# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _swig_double
else:
    import _swig_double

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class swig_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    units = property(_swig_double.swig_double_units_get, _swig_double.swig_double_units_set)

    def __str__(self):
        return _swig_double.swig_double___str__(self)

    def __repr__(self):
        return _swig_double.swig_double___repr__(self)

    def __add__(self, obj1):
        return _swig_double.swig_double___add__(self, obj1)

    def __sub__(self, obj1):
        return _swig_double.swig_double___sub__(self, obj1)

    def __mul__(self, obj1):
        return _swig_double.swig_double___mul__(self, obj1)

    def __div__(self, obj1):
        return _swig_double.swig_double___div__(self, obj1)

    def __truediv__(self, obj1):
        return _swig_double.swig_double___truediv__(self, obj1)

    def __floordiv__(self, obj1):
        return _swig_double.swig_double___floordiv__(self, obj1)

    def __mod__(self, obj1):
        return _swig_double.swig_double___mod__(self, obj1)

    def __pow__(self, obj1):
        return _swig_double.swig_double___pow__(self, obj1)

    def __radd__(self, obj1):
        return _swig_double.swig_double___radd__(self, obj1)

    def __rsub__(self, obj1):
        return _swig_double.swig_double___rsub__(self, obj1)

    def __rmul__(self, obj1):
        return _swig_double.swig_double___rmul__(self, obj1)

    def __rdiv__(self, obj1):
        return _swig_double.swig_double___rdiv__(self, obj1)

    def __rtruediv__(self, obj1):
        return _swig_double.swig_double___rtruediv__(self, obj1)

    def __rfloordiv__(self, obj1):
        return _swig_double.swig_double___rfloordiv__(self, obj1)

    def __rmod__(self, obj1):
        return _swig_double.swig_double___rmod__(self, obj1)

    def __rpow__(self, obj1):
        return _swig_double.swig_double___rpow__(self, obj1)

    def __iadd__(self, obj1):
        return _swig_double.swig_double___iadd__(self, obj1)

    def __isub__(self, obj1):
        return _swig_double.swig_double___isub__(self, obj1)

    def __imul__(self, obj1):
        return _swig_double.swig_double___imul__(self, obj1)

    def __idiv__(self, obj1):
        return _swig_double.swig_double___idiv__(self, obj1)

    def __itruediv__(self, obj1):
        return _swig_double.swig_double___itruediv__(self, obj1)

    def __ifloordiv__(self, obj1):
        return _swig_double.swig_double___ifloordiv__(self, obj1)

    def __imod__(self, obj1):
        return _swig_double.swig_double___imod__(self, obj1)

    def __ipow__(self, obj1):
        return _swig_double.swig_double___ipow__(self, obj1)

    def __lt__(self, obj1):
        return _swig_double.swig_double___lt__(self, obj1)

    def __le__(self, obj1):
        return _swig_double.swig_double___le__(self, obj1)

    def __eq__(self, obj1):
        return _swig_double.swig_double___eq__(self, obj1)

    def __ne__(self, obj1):
        return _swig_double.swig_double___ne__(self, obj1)

    def __gt__(self, obj1):
        return _swig_double.swig_double___gt__(self, obj1)

    def __ge__(self, obj1):
        return _swig_double.swig_double___ge__(self, obj1)

    def __neg__(self):
        return _swig_double.swig_double___neg__(self)

    def __pos__(self):
        return _swig_double.swig_double___pos__(self)

    def __abs__(self):
        return _swig_double.swig_double___abs__(self)

    def __int__(self):
        return _swig_double.swig_double___int__(self)

    def __long__(self):
        return _swig_double.swig_double___long__(self)

    def __float__(self):
        return _swig_double.swig_double___float__(self)

    def __len__(self):
        return _swig_double.swig_double___len__(self)

    def __init__(self):
        _swig_double.swig_double_swiginit(self, _swig_double.new_swig_double())
    __swig_destroy__ = _swig_double.delete_swig_double

# Register swig_double in _swig_double:
_swig_double.swig_double_swigregister(swig_double)


#if SWIG_VERSION > 0x040000
def _trick_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        else:
            msg = f'You cannot add instance attribute \'{name}\' to Trick swig_double'
            raise AttributeError(msg)
    return set_instance_attr

swig_double.__setattr__ = _trick_setattr_nondynamic_instance_variable(object.__setattr__)
#endif



