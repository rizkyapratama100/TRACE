# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sim_services
else:
    import _sim_services

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_SwigPyIterator

    def value(self):
        return _sim_services.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _sim_services.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _sim_services.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _sim_services.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _sim_services.SwigPyIterator_equal(self, x)

    def copy(self):
        return _sim_services.SwigPyIterator_copy(self)

    def next(self):
        return _sim_services.SwigPyIterator_next(self)

    def __next__(self):
        return _sim_services.SwigPyIterator___next__(self)

    def previous(self):
        return _sim_services.SwigPyIterator_previous(self)

    def advance(self, n):
        return _sim_services.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _sim_services.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _sim_services.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _sim_services.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _sim_services.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _sim_services.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _sim_services.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _sim_services:
_sim_services.SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

class swig_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    value = property(_sim_services.swig_double_value_get, _sim_services.swig_double_value_set)
    units = property(_sim_services.swig_double_units_get, _sim_services.swig_double_units_set)
    str_output = property(_sim_services.swig_double_str_output_get, _sim_services.swig_double_str_output_set)

    def __init__(self, *args):
        _sim_services.swig_double_swiginit(self, _sim_services.new_swig_double(*args))

    def __str__(self, *args):
        return _sim_services.swig_double___str__(self, *args)

    def __repr__(self, *args):
        return _sim_services.swig_double___repr__(self, *args)

    def __add__(self, *args):
        return _sim_services.swig_double___add__(self, *args)

    def __sub__(self, *args):
        return _sim_services.swig_double___sub__(self, *args)

    def __mul__(self, *args):
        return _sim_services.swig_double___mul__(self, *args)

    def __div__(self, *args):
        return _sim_services.swig_double___div__(self, *args)

    def __truediv__(self, *args):
        return _sim_services.swig_double___truediv__(self, *args)

    def __floordiv__(self, *args):
        return _sim_services.swig_double___floordiv__(self, *args)

    def __mod__(self, *args):
        return _sim_services.swig_double___mod__(self, *args)

    def __pow__(self, *args):
        return _sim_services.swig_double___pow__(self, *args)

    def __radd__(self, *args):
        return _sim_services.swig_double___radd__(self, *args)

    def __rsub__(self, *args):
        return _sim_services.swig_double___rsub__(self, *args)

    def __rmul__(self, *args):
        return _sim_services.swig_double___rmul__(self, *args)

    def __rdiv__(self, *args):
        return _sim_services.swig_double___rdiv__(self, *args)

    def __rtruediv__(self, *args):
        return _sim_services.swig_double___rtruediv__(self, *args)

    def __rfloordiv__(self, *args):
        return _sim_services.swig_double___rfloordiv__(self, *args)

    def __rmod__(self, *args):
        return _sim_services.swig_double___rmod__(self, *args)

    def __rpow__(self, *args):
        return _sim_services.swig_double___rpow__(self, *args)

    def __iadd__(self, *args):
        return _sim_services.swig_double___iadd__(self, *args)

    def __isub__(self, *args):
        return _sim_services.swig_double___isub__(self, *args)

    def __imul__(self, *args):
        return _sim_services.swig_double___imul__(self, *args)

    def __idiv__(self, *args):
        return _sim_services.swig_double___idiv__(self, *args)

    def __itruediv__(self, *args):
        return _sim_services.swig_double___itruediv__(self, *args)

    def __ifloordiv__(self, *args):
        return _sim_services.swig_double___ifloordiv__(self, *args)

    def __imod__(self, *args):
        return _sim_services.swig_double___imod__(self, *args)

    def __ipow__(self, *args):
        return _sim_services.swig_double___ipow__(self, *args)

    def __lt__(self, *args):
        return _sim_services.swig_double___lt__(self, *args)

    def __le__(self, *args):
        return _sim_services.swig_double___le__(self, *args)

    def __eq__(self, *args):
        return _sim_services.swig_double___eq__(self, *args)

    def __ne__(self, *args):
        return _sim_services.swig_double___ne__(self, *args)

    def __gt__(self, *args):
        return _sim_services.swig_double___gt__(self, *args)

    def __ge__(self, *args):
        return _sim_services.swig_double___ge__(self, *args)

    def __neg__(self, *args):
        return _sim_services.swig_double___neg__(self, *args)

    def __pos__(self, *args):
        return _sim_services.swig_double___pos__(self, *args)

    def __abs__(self, *args):
        return _sim_services.swig_double___abs__(self, *args)

    def __int__(self, *args):
        return _sim_services.swig_double___int__(self, *args)

    def __long__(self, *args):
        return _sim_services.swig_double___long__(self, *args)

    def __float__(self, *args):
        return _sim_services.swig_double___float__(self, *args)

    def __len__(self, *args):
        return _sim_services.swig_double___len__(self, *args)
    __swig_destroy__ = _sim_services.delete_swig_double

# Register swig_double in _sim_services:
_sim_services.swig_double_swigregister(swig_double)
cvar = _sim_services.cvar


def map_trick_units_to_udunits(*args):
    return _sim_services.map_trick_units_to_udunits(*args)
class InputProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    verify_input = property(_sim_services.InputProcessor_verify_input_get, _sim_services.InputProcessor_verify_input_set)
    input_file = property(_sim_services.InputProcessor_input_file_get, _sim_services.InputProcessor_input_file_set)
    __swig_destroy__ = _sim_services.delete_InputProcessor

    def process_sim_args(self, *args):
        return _sim_services.InputProcessor_process_sim_args(self, *args)

    def parse(self, *args):
        return _sim_services.InputProcessor_parse(self, *args)

    def shutdown(self, *args):
        return _sim_services.InputProcessor_shutdown(self, *args)

# Register InputProcessor in _sim_services:
_sim_services.InputProcessor_swigregister(InputProcessor)

class IPPython(InputProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    return_val = property(_sim_services.IPPython_return_val_get, _sim_services.IPPython_return_val_set)

    def __init__(self, *args):
        _sim_services.IPPython_swiginit(self, _sim_services.new_IPPython(*args))

    def get_TMM_named_variables(self, *args):
        return _sim_services.IPPython_get_TMM_named_variables(self, *args)

    def get_units_conversion_msgs(self, *args):
        return _sim_services.IPPython_get_units_conversion_msgs(self, *args)

    def shoot_the_units_conversion_messenger(self, *args):
        return _sim_services.IPPython_shoot_the_units_conversion_messenger(self, *args)

    def init(self, *args):
        return _sim_services.IPPython_init(self, *args)

    def shutdown(self, *args):
        return _sim_services.IPPython_shutdown(self, *args)

    def parse(self, *args):
        return _sim_services.IPPython_parse(self, *args)

    def parse_condition(self, *args):
        return _sim_services.IPPython_parse_condition(self, *args)

    def restart(self, *args):
        return _sim_services.IPPython_restart(self, *args)
    __swig_destroy__ = _sim_services.delete_IPPython

# Register IPPython in _sim_services:
_sim_services.IPPython_swigregister(IPPython)


def init_swig_modules(*args):
    return _sim_services.init_swig_modules(*args)

def shoot_the_units_conversion_messenger(*args):
    return _sim_services.shoot_the_units_conversion_messenger(*args)

def revive_the_units_conversion_messenger(*args):
    return _sim_services.revive_the_units_conversion_messenger(*args)

def check_units_conversion_messenger_for_signs_of_life(*args):
    return _sim_services.check_units_conversion_messenger_for_signs_of_life(*args)

def attach_units(*args):
    return _sim_services.attach_units(*args)

def wrap_ptr(*args):
    return _sim_services.wrap_ptr(*args)

def unhex_double(*args):
    return _sim_services.unhex_double(*args)

def unhex_float(*args):
    return _sim_services.unhex_float(*args)

def new_cvar_list(*args):
    return _sim_services.new_cvar_list(*args)

def combine_cvars(*args):
    return _sim_services.combine_cvars(*args)
Roll_Pitch_Yaw = _sim_services.Roll_Pitch_Yaw
Roll_Yaw_Pitch = _sim_services.Roll_Yaw_Pitch
Pitch_Yaw_Roll = _sim_services.Pitch_Yaw_Roll
Pitch_Roll_Yaw = _sim_services.Pitch_Roll_Yaw
Yaw_Roll_Pitch = _sim_services.Yaw_Roll_Pitch
Yaw_Pitch_Roll = _sim_services.Yaw_Pitch_Roll
class TRANSFORM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    euler_sequence = property(_sim_services.TRANSFORM_euler_sequence_get, _sim_services.TRANSFORM_euler_sequence_set)
    euler_angles = property(_sim_services.TRANSFORM_euler_angles_get, _sim_services.TRANSFORM_euler_angles_set)
    location = property(_sim_services.TRANSFORM_location_get, _sim_services.TRANSFORM_location_set)

    def __init__(self):
        _sim_services.TRANSFORM_swiginit(self, _sim_services.new_TRANSFORM())
    __swig_destroy__ = _sim_services.delete_TRANSFORM

# Register TRANSFORM in _sim_services:
_sim_services.TRANSFORM_swigregister(TRANSFORM)

UNIFORM_RND_1 = _sim_services.UNIFORM_RND_1
UNIFORM_RND_TRIPLE = _sim_services.UNIFORM_RND_TRIPLE
GAUSS_RND_PSEUDO = _sim_services.GAUSS_RND_PSEUDO
GAUSS_RND_BELL = _sim_services.GAUSS_RND_BELL
RND_NUM_1 = _sim_services.RND_NUM_1
LCG1 = _sim_services.LCG1
TRIPLE = _sim_services.TRIPLE
class RAND_GENERATOR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    option = property(_sim_services.RAND_GENERATOR_option_get, _sim_services.RAND_GENERATOR_option_set)
    uniform = property(_sim_services.RAND_GENERATOR_uniform_get, _sim_services.RAND_GENERATOR_uniform_set)
    seed_1 = property(_sim_services.RAND_GENERATOR_seed_1_get, _sim_services.RAND_GENERATOR_seed_1_set)
    seed_trpl = property(_sim_services.RAND_GENERATOR_seed_trpl_get, _sim_services.RAND_GENERATOR_seed_trpl_set)
    iff = property(_sim_services.RAND_GENERATOR_iff_get, _sim_services.RAND_GENERATOR_iff_set)
    table = property(_sim_services.RAND_GENERATOR_table_get, _sim_services.RAND_GENERATOR_table_set)
    sigma_range = property(_sim_services.RAND_GENERATOR_sigma_range_get, _sim_services.RAND_GENERATOR_sigma_range_set)
    ix1 = property(_sim_services.RAND_GENERATOR_ix1_get, _sim_services.RAND_GENERATOR_ix1_set)
    ix2 = property(_sim_services.RAND_GENERATOR_ix2_get, _sim_services.RAND_GENERATOR_ix2_set)
    ix3 = property(_sim_services.RAND_GENERATOR_ix3_get, _sim_services.RAND_GENERATOR_ix3_set)

    def __init__(self):
        _sim_services.RAND_GENERATOR_swiginit(self, _sim_services.new_RAND_GENERATOR())
    __swig_destroy__ = _sim_services.delete_RAND_GENERATOR

# Register RAND_GENERATOR in _sim_services:
_sim_services.RAND_GENERATOR_swigregister(RAND_GENERATOR)

TRICK_GSL_GAUSS = _sim_services.TRICK_GSL_GAUSS
TRICK_GSL_FLAT = _sim_services.TRICK_GSL_FLAT
TRICK_GSL_POISSON = _sim_services.TRICK_GSL_POISSON
class TRICK_GSL_RANDIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t_rng = property(_sim_services.TRICK_GSL_RANDIST_t_rng_get, _sim_services.TRICK_GSL_RANDIST_t_rng_set)
    type = property(_sim_services.TRICK_GSL_RANDIST_type_get, _sim_services.TRICK_GSL_RANDIST_type_set)
    seed = property(_sim_services.TRICK_GSL_RANDIST_seed_get, _sim_services.TRICK_GSL_RANDIST_seed_set)
    sigma = property(_sim_services.TRICK_GSL_RANDIST_sigma_get, _sim_services.TRICK_GSL_RANDIST_sigma_set)
    mu = property(_sim_services.TRICK_GSL_RANDIST_mu_get, _sim_services.TRICK_GSL_RANDIST_mu_set)
    min = property(_sim_services.TRICK_GSL_RANDIST_min_get, _sim_services.TRICK_GSL_RANDIST_min_set)
    max = property(_sim_services.TRICK_GSL_RANDIST_max_get, _sim_services.TRICK_GSL_RANDIST_max_set)
    rel_min = property(_sim_services.TRICK_GSL_RANDIST_rel_min_get, _sim_services.TRICK_GSL_RANDIST_rel_min_set)
    rel_max = property(_sim_services.TRICK_GSL_RANDIST_rel_max_get, _sim_services.TRICK_GSL_RANDIST_rel_max_set)
    sigma_range = property(_sim_services.TRICK_GSL_RANDIST_sigma_range_get, _sim_services.TRICK_GSL_RANDIST_sigma_range_set)
    uniform = property(_sim_services.TRICK_GSL_RANDIST_uniform_get, _sim_services.TRICK_GSL_RANDIST_uniform_set)

    def __init__(self):
        _sim_services.TRICK_GSL_RANDIST_swiginit(self, _sim_services.new_TRICK_GSL_RANDIST())
    __swig_destroy__ = _sim_services.delete_TRICK_GSL_RANDIST

# Register TRICK_GSL_RANDIST in _sim_services:
_sim_services.TRICK_GSL_RANDIST_swigregister(TRICK_GSL_RANDIST)

class TRICK_GSL_RETURN_TYPE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ui = property(_sim_services.TRICK_GSL_RETURN_TYPE_ui_get, _sim_services.TRICK_GSL_RETURN_TYPE_ui_set)
    d = property(_sim_services.TRICK_GSL_RETURN_TYPE_d_get, _sim_services.TRICK_GSL_RETURN_TYPE_d_set)
    ll = property(_sim_services.TRICK_GSL_RETURN_TYPE_ll_get, _sim_services.TRICK_GSL_RETURN_TYPE_ll_set)
    ii = property(_sim_services.TRICK_GSL_RETURN_TYPE_ii_get, _sim_services.TRICK_GSL_RETURN_TYPE_ii_set)

    def __init__(self):
        _sim_services.TRICK_GSL_RETURN_TYPE_swiginit(self, _sim_services.new_TRICK_GSL_RETURN_TYPE())
    __swig_destroy__ = _sim_services.delete_TRICK_GSL_RETURN_TYPE

# Register TRICK_GSL_RETURN_TYPE in _sim_services:
_sim_services.TRICK_GSL_RETURN_TYPE_swigregister(TRICK_GSL_RETURN_TYPE)


def trick_gsl_rand_init(*args):
    return _sim_services.trick_gsl_rand_init(*args)

def trick_gsl_rand_alloc(*args):
    return _sim_services.trick_gsl_rand_alloc(*args)

def trick_gsl_rand_seed(*args):
    return _sim_services.trick_gsl_rand_seed(*args)

def trick_gsl_rand(*args):
    return _sim_services.trick_gsl_rand(*args)

def trick_gsl_rand_shutdown(*args):
    return _sim_services.trick_gsl_rand_shutdown(*args)
Pulse = _sim_services.Pulse
Ramp = _sim_services.Ramp
Square = _sim_services.Square
Square_Doublet = _sim_services.Square_Doublet
Triangle = _sim_services.Triangle
Triangle_Doublet = _sim_services.Triangle_Doublet
Sine = _sim_services.Sine
Noise = _sim_services.Noise
Gauss_Noise = _sim_services.Gauss_Noise
User_Wave = _sim_services.User_Wave
class WAVE_FORM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_sim_services.WAVE_FORM_type_get, _sim_services.WAVE_FORM_type_set)
    start = property(_sim_services.WAVE_FORM_start_get, _sim_services.WAVE_FORM_start_set)
    stop = property(_sim_services.WAVE_FORM_stop_get, _sim_services.WAVE_FORM_stop_set)
    ramp = property(_sim_services.WAVE_FORM_ramp_get, _sim_services.WAVE_FORM_ramp_set)
    pause = property(_sim_services.WAVE_FORM_pause_get, _sim_services.WAVE_FORM_pause_set)
    frequency = property(_sim_services.WAVE_FORM_frequency_get, _sim_services.WAVE_FORM_frequency_set)
    phase = property(_sim_services.WAVE_FORM_phase_get, _sim_services.WAVE_FORM_phase_set)
    init_random = property(_sim_services.WAVE_FORM_init_random_get, _sim_services.WAVE_FORM_init_random_set)
    random_seed = property(_sim_services.WAVE_FORM_random_seed_get, _sim_services.WAVE_FORM_random_seed_set)
    sigma_range = property(_sim_services.WAVE_FORM_sigma_range_get, _sim_services.WAVE_FORM_sigma_range_set)
    init_user_data = property(_sim_services.WAVE_FORM_init_user_data_get, _sim_services.WAVE_FORM_init_user_data_set)
    user_data = property(_sim_services.WAVE_FORM_user_data_get, _sim_services.WAVE_FORM_user_data_set)
    fp = property(_sim_services.WAVE_FORM_fp_get, _sim_services.WAVE_FORM_fp_set)
    next_time = property(_sim_services.WAVE_FORM_next_time_get, _sim_services.WAVE_FORM_next_time_set)
    next_val = property(_sim_services.WAVE_FORM_next_val_get, _sim_services.WAVE_FORM_next_val_set)
    user_time = property(_sim_services.WAVE_FORM_user_time_get, _sim_services.WAVE_FORM_user_time_set)
    user_val = property(_sim_services.WAVE_FORM_user_val_get, _sim_services.WAVE_FORM_user_val_set)

    def __init__(self):
        _sim_services.WAVE_FORM_swiginit(self, _sim_services.new_WAVE_FORM())
    __swig_destroy__ = _sim_services.delete_WAVE_FORM

# Register WAVE_FORM in _sim_services:
_sim_services.WAVE_FORM_swigregister(WAVE_FORM)


def integrate(*args):
    return _sim_services.integrate(*args)

def integrate_1st_order_ode(*args):
    return _sim_services.integrate_1st_order_ode(*args)

def integrate_2nd_order_ode(*args):
    return _sim_services.integrate_2nd_order_ode(*args)

def get_integ_time(*args):
    return _sim_services.get_integ_time(*args)

def get_integ_dt(*args):
    return _sim_services.get_integ_dt(*args)

def get_integ_target_time(*args):
    return _sim_services.get_integ_target_time(*args)

def set_integ_time(*args):
    return _sim_services.set_integ_time(*args)

def reset_state(*args):
    return _sim_services.reset_state(*args)

def load_state(*args):
    return _sim_services.load_state(*args)

def load_deriv(*args):
    return _sim_services.load_deriv(*args)

def load_deriv2(*args):
    return _sim_services.load_deriv2(*args)

def unload_state(*args):
    return _sim_services.unload_state(*args)

def load_indexed_state(*args):
    return _sim_services.load_indexed_state(*args)

def load_indexed_deriv(*args):
    return _sim_services.load_indexed_deriv(*args)

def load_indexed_deriv2(*args):
    return _sim_services.load_indexed_deriv2(*args)

def unload_indexed_state(*args):
    return _sim_services.unload_indexed_state(*args)

def get_intermediate_step(*args):
    return _sim_services.get_intermediate_step(*args)

def set_intermediate_step(*args):
    return _sim_services.set_intermediate_step(*args)

def get_integ_type(*args):
    return _sim_services.get_integ_type(*args)
MAX_TRIADS = _sim_services.MAX_TRIADS
MAX_UNITS_SPEC_STRLEN = _sim_services.MAX_UNITS_SPEC_STRLEN
CONV_OK = _sim_services.CONV_OK
CONV_ERR = _sim_services.CONV_ERR
class triad_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    op = property(_sim_services.triad_t_op_get, _sim_services.triad_t_op_set)
    a1 = property(_sim_services.triad_t_a1_get, _sim_services.triad_t_a1_set)
    a2 = property(_sim_services.triad_t_a2_get, _sim_services.triad_t_a2_set)

    def __init__(self):
        _sim_services.triad_t_swiginit(self, _sim_services.new_triad_t())
    __swig_destroy__ = _sim_services.delete_triad_t

# Register triad_t in _sim_services:
_sim_services.triad_t_swigregister(triad_t)

class Units_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nt = property(_sim_services.Units_t_nt_get, _sim_services.Units_t_nt_set)
    t = property(_sim_services.Units_t_t_get, _sim_services.Units_t_t_set)

    def __init__(self):
        _sim_services.Units_t_swiginit(self, _sim_services.new_Units_t())
    __swig_destroy__ = _sim_services.delete_Units_t

# Register Units_t in _sim_services:
_sim_services.Units_t_swigregister(Units_t)

class UnitsConvFn_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C = property(_sim_services.UnitsConvFn_t_C_get, _sim_services.UnitsConvFn_t_C_set)

    def __init__(self):
        _sim_services.UnitsConvFn_t_swiginit(self, _sim_services.new_UnitsConvFn_t())
    __swig_destroy__ = _sim_services.delete_UnitsConvFn_t

# Register UnitsConvFn_t in _sim_services:
_sim_services.UnitsConvFn_t_swigregister(UnitsConvFn_t)


def new_units(*args):
    return _sim_services.new_units(*args)

def conv_fn_u(*args):
    return _sim_services.conv_fn_u(*args)

def conv_fn_s(*args):
    return _sim_services.conv_fn_s(*args)

def convert_units(*args):
    return _sim_services.convert_units(*args)

def convert_units_spec(*args):
    return _sim_services.convert_units_spec(*args)

def list_units(*args):
    return _sim_services.list_units(*args)
class Clock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Clock

    def calc_sim_time_ratio(self, *args):
        return _sim_services.Clock_calc_sim_time_ratio(self, *args)

    def get_rt_clock_ratio(self, *args):
        return _sim_services.Clock_get_rt_clock_ratio(self, *args)

    def set_global_clock(self, *args):
        return _sim_services.Clock_set_global_clock(self, *args)

    def set_rt_clock_ratio(self, *args):
        return _sim_services.Clock_set_rt_clock_ratio(self, *args)

    def adjust_ref_time(self, *args):
        return _sim_services.Clock_adjust_ref_time(self, *args)

    def set_reference(self, *args):
        return _sim_services.Clock_set_reference(self, *args)

    def sync_to_wall_clock(self, *args):
        return _sim_services.Clock_sync_to_wall_clock(self, *args)

    def clock_time(self, *args):
        return _sim_services.Clock_clock_time(self, *args)

    def clock_reset(self, *args):
        return _sim_services.Clock_clock_reset(self, *args)

    def get_name(self, *args):
        return _sim_services.Clock_get_name(self, *args)

    def clock_init(self, *args):
        return _sim_services.Clock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.Clock_wall_clock_time(self, *args)

    def clock_spin(self, *args):
        return _sim_services.Clock_clock_spin(self, *args)

    def clock_stop(self, *args):
        return _sim_services.Clock_clock_stop(self, *args)
    name = property(_sim_services.Clock_name_get, _sim_services.Clock_name_set)
    clock_tics_per_sec = property(_sim_services.Clock_clock_tics_per_sec_get, _sim_services.Clock_clock_tics_per_sec_set)
    rt_clock_ratio = property(_sim_services.Clock_rt_clock_ratio_get, _sim_services.Clock_rt_clock_ratio_set)
    sim_tic_ratio = property(_sim_services.Clock_sim_tic_ratio_get, _sim_services.Clock_sim_tic_ratio_set)
    ref_time_tics = property(_sim_services.Clock_ref_time_tics_get, _sim_services.Clock_ref_time_tics_set)

# Register Clock in _sim_services:
_sim_services.Clock_swigregister(Clock)

class GetTimeOfDayClock(Clock):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.GetTimeOfDayClock_swiginit(self, _sim_services.new_GetTimeOfDayClock(*args))
    __swig_destroy__ = _sim_services.delete_GetTimeOfDayClock

    def clock_init(self, *args):
        return _sim_services.GetTimeOfDayClock_clock_init(self, *args)

    def wall_clock_time(self, *args):
        return _sim_services.GetTimeOfDayClock_wall_clock_time(self, *args)

    def clock_stop(self, *args):
        return _sim_services.GetTimeOfDayClock_clock_stop(self, *args)

    def set_clock_ID(self, *args):
        return _sim_services.GetTimeOfDayClock_set_clock_ID(self, *args)

    def get_clock_ID(self, *args):
        return _sim_services.GetTimeOfDayClock_get_clock_ID(self, *args)

# Register GetTimeOfDayClock in _sim_services:
_sim_services.GetTimeOfDayClock_swigregister(GetTimeOfDayClock)


def clock_time(*args):
    return _sim_services.clock_time(*args)

def clock_wall_time(*args):
    return _sim_services.clock_wall_time(*args)

def clock_reset(*args):
    return _sim_services.clock_reset(*args)

def clock_spin(*args):
    return _sim_services.clock_spin(*args)

def clock_set_reference(*args):
    return _sim_services.clock_set_reference(*args)

def clock_get_rt_clock_ratio(*args):
    return _sim_services.clock_get_rt_clock_ratio(*args)

def clock_set_rt_clock_ratio(*args):
    return _sim_services.clock_set_rt_clock_ratio(*args)

def clock_tics_per_sec(*args):
    return _sim_services.clock_tics_per_sec(*args)
class CommandLineArguments(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    argc = property(_sim_services.CommandLineArguments_argc_get, _sim_services.CommandLineArguments_argc_set)
    argv = property(_sim_services.CommandLineArguments_argv_get, _sim_services.CommandLineArguments_argv_set)
    output_dir_timestamped = property(_sim_services.CommandLineArguments_output_dir_timestamped_get, _sim_services.CommandLineArguments_output_dir_timestamped_set)
    default_dir = property(_sim_services.CommandLineArguments_default_dir_get, _sim_services.CommandLineArguments_default_dir_set)
    cmdline_name = property(_sim_services.CommandLineArguments_cmdline_name_get, _sim_services.CommandLineArguments_cmdline_name_set)
    run_dir = property(_sim_services.CommandLineArguments_run_dir_get, _sim_services.CommandLineArguments_run_dir_set)
    user_output_dir = property(_sim_services.CommandLineArguments_user_output_dir_get, _sim_services.CommandLineArguments_user_output_dir_set)
    time_stamp_dir = property(_sim_services.CommandLineArguments_time_stamp_dir_get, _sim_services.CommandLineArguments_time_stamp_dir_set)
    output_dir = property(_sim_services.CommandLineArguments_output_dir_get, _sim_services.CommandLineArguments_output_dir_set)
    input_file = property(_sim_services.CommandLineArguments_input_file_get, _sim_services.CommandLineArguments_input_file_set)

    def __init__(self, *args):
        _sim_services.CommandLineArguments_swiginit(self, _sim_services.new_CommandLineArguments(*args))

    def process_sim_args(self, *args):
        return _sim_services.CommandLineArguments_process_sim_args(self, *args)

    def get_argc(self, *args):
        return _sim_services.CommandLineArguments_get_argc(self, *args)

    def get_argv(self, *args):
        return _sim_services.CommandLineArguments_get_argv(self, *args)

    def get_output_dir(self, *args):
        return _sim_services.CommandLineArguments_get_output_dir(self, *args)

    def get_output_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_output_dir_ref(self, *args)

    def get_user_output_dir(self, *args):
        return _sim_services.CommandLineArguments_get_user_output_dir(self, *args)

    def get_user_output_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_user_output_dir_ref(self, *args)

    def get_input_file(self, *args):
        return _sim_services.CommandLineArguments_get_input_file(self, *args)

    def get_input_file_ref(self, *args):
        return _sim_services.CommandLineArguments_get_input_file_ref(self, *args)

    def get_default_dir(self, *args):
        return _sim_services.CommandLineArguments_get_default_dir(self, *args)

    def get_default_dir_ref(self, *args):
        return _sim_services.CommandLineArguments_get_default_dir_ref(self, *args)

    def get_cmdline_name(self, *args):
        return _sim_services.CommandLineArguments_get_cmdline_name(self, *args)

    def get_cmdline_name_ref(self, *args):
        return _sim_services.CommandLineArguments_get_cmdline_name_ref(self, *args)

    def output_dir_timestamped_on(self, *args):
        return _sim_services.CommandLineArguments_output_dir_timestamped_on(self, *args)

    def output_dir_timestamped_off(self, *args):
        return _sim_services.CommandLineArguments_output_dir_timestamped_off(self, *args)

    def set_output_dir(self, *args):
        return _sim_services.CommandLineArguments_set_output_dir(self, *args)

    @staticmethod
    def create_path(*args):
        return _sim_services.CommandLineArguments_create_path(*args)
    __swig_destroy__ = _sim_services.delete_CommandLineArguments

# Register CommandLineArguments in _sim_services:
_sim_services.CommandLineArguments_swigregister(CommandLineArguments)

def CommandLineArguments_create_path(*args):
    return _sim_services.CommandLineArguments_create_path(*args)


def command_line_args_process_sim_args(*args):
    return _sim_services.command_line_args_process_sim_args(*args)

def command_line_args_get_argc(*args):
    return _sim_services.command_line_args_get_argc(*args)

def command_line_args_get_argv(*args):
    return _sim_services.command_line_args_get_argv(*args)

def command_line_args_get_output_dir(*args):
    return _sim_services.command_line_args_get_output_dir(*args)

def command_line_args_get_user_output_dir(*args):
    return _sim_services.command_line_args_get_user_output_dir(*args)

def command_line_args_get_input_file(*args):
    return _sim_services.command_line_args_get_input_file(*args)

def command_line_args_get_default_dir(*args):
    return _sim_services.command_line_args_get_default_dir(*args)

def command_line_args_get_cmdline_name(*args):
    return _sim_services.command_line_args_get_cmdline_name(*args)

def output_dir_timestamped_on(*args):
    return _sim_services.output_dir_timestamped_on(*args)

def output_dir_timestamped_off(*args):
    return _sim_services.output_dir_timestamped_off(*args)

def set_output_dir(*args):
    return _sim_services.set_output_dir(*args)

def command_line_args_get_input_file_ref(*args):
    return _sim_services.command_line_args_get_input_file_ref(*args)

def create_path(*args):
    return _sim_services.create_path(*args)
class InstrumentBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_InstrumentBase

    def get_target_job(self, *args):
        return _sim_services.InstrumentBase_get_target_job(self, *args)
    name = property(_sim_services.InstrumentBase_name_get, _sim_services.InstrumentBase_name_set)
    phase = property(_sim_services.InstrumentBase_phase_get, _sim_services.InstrumentBase_phase_set)

    def call(self, *args):
        return _sim_services.InstrumentBase_call(self, *args)

# Register InstrumentBase in _sim_services:
_sim_services.InstrumentBase_swigregister(InstrumentBase)

class JobData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_sim_services.JobData_name_get, _sim_services.JobData_name_set)
    disabled = property(_sim_services.JobData_disabled_get, _sim_services.JobData_disabled_set)
    complete = property(_sim_services.JobData_complete_get, _sim_services.JobData_complete_set)
    handled = property(_sim_services.JobData_handled_get, _sim_services.JobData_handled_set)
    cycle = property(_sim_services.JobData_cycle_get, _sim_services.JobData_cycle_set)
    start = property(_sim_services.JobData_start_get, _sim_services.JobData_start_set)
    stop = property(_sim_services.JobData_stop_get, _sim_services.JobData_stop_set)
    sup_class_data = property(_sim_services.JobData_sup_class_data_get, _sim_services.JobData_sup_class_data_set)
    job_class = property(_sim_services.JobData_job_class_get, _sim_services.JobData_job_class_set)
    job_class_name = property(_sim_services.JobData_job_class_name_get, _sim_services.JobData_job_class_name_set)
    system_job_class = property(_sim_services.JobData_system_job_class_get, _sim_services.JobData_system_job_class_set)
    phase = property(_sim_services.JobData_phase_get, _sim_services.JobData_phase_set)
    tags = property(_sim_services.JobData_tags_get, _sim_services.JobData_tags_set)

    def tags_begin(self, *args):
        return _sim_services.JobData_tags_begin(self, *args)

    def tags_end(self, *args):
        return _sim_services.JobData_tags_end(self, *args)
    rt_start_time = property(_sim_services.JobData_rt_start_time_get, _sim_services.JobData_rt_start_time_set)
    rt_stop_time = property(_sim_services.JobData_rt_stop_time_get, _sim_services.JobData_rt_stop_time_set)
    frame_time = property(_sim_services.JobData_frame_time_get, _sim_services.JobData_frame_time_set)
    frame_time_seconds = property(_sim_services.JobData_frame_time_seconds_get, _sim_services.JobData_frame_time_seconds_set)
    frame_id = property(_sim_services.JobData_frame_id_get, _sim_services.JobData_frame_id_set)
    thread = property(_sim_services.JobData_thread_get, _sim_services.JobData_thread_set)
    id = property(_sim_services.JobData_id_get, _sim_services.JobData_id_set)
    sim_object_id = property(_sim_services.JobData_sim_object_id_get, _sim_services.JobData_sim_object_id_set)
    parent_object = property(_sim_services.JobData_parent_object_get, _sim_services.JobData_parent_object_set)
    depends = property(_sim_services.JobData_depends_get, _sim_services.JobData_depends_set)
    inst_before = property(_sim_services.JobData_inst_before_get, _sim_services.JobData_inst_before_set)
    inst_after = property(_sim_services.JobData_inst_after_get, _sim_services.JobData_inst_after_set)
    cycle_tics = property(_sim_services.JobData_cycle_tics_get, _sim_services.JobData_cycle_tics_set)
    start_tics = property(_sim_services.JobData_start_tics_get, _sim_services.JobData_start_tics_set)
    stop_tics = property(_sim_services.JobData_stop_tics_get, _sim_services.JobData_stop_tics_set)
    next_tics = property(_sim_services.JobData_next_tics_get, _sim_services.JobData_next_tics_set)
    time_tic_value = property(_sim_services.JobData_time_tic_value_get, _sim_services.JobData_time_tic_value_set)

    def __init__(self, *args):
        _sim_services.JobData_swiginit(self, _sim_services.new_JobData(*args))
    __swig_destroy__ = _sim_services.delete_JobData

    def get_handled(self, *args):
        return _sim_services.JobData_get_handled(self, *args)

    def enable(self, *args):
        return _sim_services.JobData_enable(self, *args)

    def disable(self, *args):
        return _sim_services.JobData_disable(self, *args)

    def set_handled(self, *args):
        return _sim_services.JobData_set_handled(self, *args)

    @staticmethod
    def set_time_tic_value(*args):
        return _sim_services.JobData_set_time_tic_value(*args)

    def set_cycle(self, *args):
        return _sim_services.JobData_set_cycle(self, *args)

    def calc_cycle_tics(self, *args):
        return _sim_services.JobData_calc_cycle_tics(self, *args)

    def set_next_call_time(self, *args):
        return _sim_services.JobData_set_next_call_time(self, *args)

    def set_system_job_class(self, *args):
        return _sim_services.JobData_set_system_job_class(self, *args)

    def add_tag(self, *args):
        return _sim_services.JobData_add_tag(self, *args)

    def add_depend(self, *args):
        return _sim_services.JobData_add_depend(self, *args)

    def add_inst_before(self, *args):
        return _sim_services.JobData_add_inst_before(self, *args)

    def add_inst_after(self, *args):
        return _sim_services.JobData_add_inst_after(self, *args)

    def remove_inst(self, *args):
        return _sim_services.JobData_remove_inst(self, *args)

    def call(self, *args):
        return _sim_services.JobData_call(self, *args)

    def call_double(self, *args):
        return _sim_services.JobData_call_double(self, *args)

    def copy_from_checkpoint(self, *args):
        return _sim_services.JobData_copy_from_checkpoint(self, *args)

# Register JobData in _sim_services:
_sim_services.JobData_swigregister(JobData)

def JobData_set_time_tic_value(*args):
    return _sim_services.JobData_set_time_tic_value(*args)

class SimObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    name = property(_sim_services.SimObject_name_get, _sim_services.SimObject_name_set)
    id = property(_sim_services.SimObject_id_get, _sim_services.SimObject_id_set)
    object_disabled = property(_sim_services.SimObject_object_disabled_get, _sim_services.SimObject_object_disabled_set)
    saved_job_states = property(_sim_services.SimObject_saved_job_states_get, _sim_services.SimObject_saved_job_states_set)
    pre_component_objects = property(_sim_services.SimObject_pre_component_objects_get, _sim_services.SimObject_pre_component_objects_set)
    post_component_objects = property(_sim_services.SimObject_post_component_objects_get, _sim_services.SimObject_post_component_objects_set)
    jobs = property(_sim_services.SimObject_jobs_get, _sim_services.SimObject_jobs_set)
    __swig_destroy__ = _sim_services.delete_SimObject

    def get_job(self, *args):
        return _sim_services.SimObject_get_job(self, *args)

    def add_tag(self, *args):
        return _sim_services.SimObject_add_tag(self, *args)

    def add_tag_to_job(self, *args):
        return _sim_services.SimObject_add_tag_to_job(self, *args)

    def add_pre_component_object(self, *args):
        return _sim_services.SimObject_add_pre_component_object(self, *args)

    def add_post_component_object(self, *args):
        return _sim_services.SimObject_add_post_component_object(self, *args)

    def add_job(self, *args):
        return _sim_services.SimObject_add_job(self, *args)

    def enable_all_jobs(self, *args):
        return _sim_services.SimObject_enable_all_jobs(self, *args)

    def enable(self, *args):
        return _sim_services.SimObject_enable(self, *args)

    def disable_all_jobs(self, *args):
        return _sim_services.SimObject_disable_all_jobs(self, *args)

    def disable(self, *args):
        return _sim_services.SimObject_disable(self, *args)

    def call_function(self, *args):
        return _sim_services.SimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.SimObject_call_function_double(self, *args)

# Register SimObject in _sim_services:
_sim_services.SimObject_swigregister(SimObject)

TRICK_VOID = _sim_services.TRICK_VOID
TRICK_CHARACTER = _sim_services.TRICK_CHARACTER
TRICK_UNSIGNED_CHARACTER = _sim_services.TRICK_UNSIGNED_CHARACTER
TRICK_STRING = _sim_services.TRICK_STRING
TRICK_SHORT = _sim_services.TRICK_SHORT
TRICK_UNSIGNED_SHORT = _sim_services.TRICK_UNSIGNED_SHORT
TRICK_INTEGER = _sim_services.TRICK_INTEGER
TRICK_UNSIGNED_INTEGER = _sim_services.TRICK_UNSIGNED_INTEGER
TRICK_LONG = _sim_services.TRICK_LONG
TRICK_UNSIGNED_LONG = _sim_services.TRICK_UNSIGNED_LONG
TRICK_FLOAT = _sim_services.TRICK_FLOAT
TRICK_DOUBLE = _sim_services.TRICK_DOUBLE
TRICK_BITFIELD = _sim_services.TRICK_BITFIELD
TRICK_UNSIGNED_BITFIELD = _sim_services.TRICK_UNSIGNED_BITFIELD
TRICK_LONG_LONG = _sim_services.TRICK_LONG_LONG
TRICK_UNSIGNED_LONG_LONG = _sim_services.TRICK_UNSIGNED_LONG_LONG
TRICK_FILE_PTR = _sim_services.TRICK_FILE_PTR
TRICK_BOOLEAN = _sim_services.TRICK_BOOLEAN
TRICK_WCHAR = _sim_services.TRICK_WCHAR
TRICK_WSTRING = _sim_services.TRICK_WSTRING
TRICK_VOID_PTR = _sim_services.TRICK_VOID_PTR
TRICK_ENUMERATED = _sim_services.TRICK_ENUMERATED
TRICK_STRUCTURED = _sim_services.TRICK_STRUCTURED
TRICK_OPAQUE_TYPE = _sim_services.TRICK_OPAQUE_TYPE
TRICK_STL = _sim_services.TRICK_STL
TRICK_NUMBER_OF_TYPES = _sim_services.TRICK_NUMBER_OF_TYPES

def trickTypeCharString(*args):
    return _sim_services.trickTypeCharString(*args)
TRICK_VAR_OUTPUT = _sim_services.TRICK_VAR_OUTPUT
TRICK_VAR_INPUT = _sim_services.TRICK_VAR_INPUT
TRICK_CHKPNT_OUTPUT = _sim_services.TRICK_CHKPNT_OUTPUT
TRICK_CHKPNT_INPUT = _sim_services.TRICK_CHKPNT_INPUT
TRICK_MODS_UNITSDASHDASH = _sim_services.TRICK_MODS_UNITSDASHDASH
TRICK_MAX_INDEX = _sim_services.TRICK_MAX_INDEX
Language_C = _sim_services.Language_C
Language_CPP = _sim_services.Language_CPP
class ENUM_ATTR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_sim_services.ENUM_ATTR_label_get, _sim_services.ENUM_ATTR_label_set)
    value = property(_sim_services.ENUM_ATTR_value_get, _sim_services.ENUM_ATTR_value_set)
    mods = property(_sim_services.ENUM_ATTR_mods_get, _sim_services.ENUM_ATTR_mods_set)

    def __init__(self):
        _sim_services.ENUM_ATTR_swiginit(self, _sim_services.new_ENUM_ATTR())
    __swig_destroy__ = _sim_services.delete_ENUM_ATTR

# Register ENUM_ATTR in _sim_services:
_sim_services.ENUM_ATTR_swigregister(ENUM_ATTR)

class INDEX(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_sim_services.INDEX_size_get, _sim_services.INDEX_size_set)
    start = property(_sim_services.INDEX_start_get, _sim_services.INDEX_start_set)

    def __init__(self):
        _sim_services.INDEX_swiginit(self, _sim_services.new_INDEX())
    __swig_destroy__ = _sim_services.delete_INDEX

# Register INDEX in _sim_services:
_sim_services.INDEX_swigregister(INDEX)

class ATTRIBUTES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_sim_services.ATTRIBUTES_name_get, _sim_services.ATTRIBUTES_name_set)
    type_name = property(_sim_services.ATTRIBUTES_type_name_get, _sim_services.ATTRIBUTES_type_name_set)
    units = property(_sim_services.ATTRIBUTES_units_get, _sim_services.ATTRIBUTES_units_set)
    alias = property(_sim_services.ATTRIBUTES_alias_get, _sim_services.ATTRIBUTES_alias_set)
    user_defined = property(_sim_services.ATTRIBUTES_user_defined_get, _sim_services.ATTRIBUTES_user_defined_set)
    des = property(_sim_services.ATTRIBUTES_des_get, _sim_services.ATTRIBUTES_des_set)
    io = property(_sim_services.ATTRIBUTES_io_get, _sim_services.ATTRIBUTES_io_set)
    type = property(_sim_services.ATTRIBUTES_type_get, _sim_services.ATTRIBUTES_type_set)
    size = property(_sim_services.ATTRIBUTES_size_get, _sim_services.ATTRIBUTES_size_set)
    range_min = property(_sim_services.ATTRIBUTES_range_min_get, _sim_services.ATTRIBUTES_range_min_set)
    range_max = property(_sim_services.ATTRIBUTES_range_max_get, _sim_services.ATTRIBUTES_range_max_set)
    language = property(_sim_services.ATTRIBUTES_language_get, _sim_services.ATTRIBUTES_language_set)
    mods = property(_sim_services.ATTRIBUTES_mods_get, _sim_services.ATTRIBUTES_mods_set)
    offset = property(_sim_services.ATTRIBUTES_offset_get, _sim_services.ATTRIBUTES_offset_set)
    attr = property(_sim_services.ATTRIBUTES_attr_get, _sim_services.ATTRIBUTES_attr_set)
    num_index = property(_sim_services.ATTRIBUTES_num_index_get, _sim_services.ATTRIBUTES_num_index_set)
    index = property(_sim_services.ATTRIBUTES_index_get, _sim_services.ATTRIBUTES_index_set)
    checkpoint_stl = property(_sim_services.ATTRIBUTES_checkpoint_stl_get, _sim_services.ATTRIBUTES_checkpoint_stl_set)
    post_checkpoint_stl = property(_sim_services.ATTRIBUTES_post_checkpoint_stl_get, _sim_services.ATTRIBUTES_post_checkpoint_stl_set)
    restore_stl = property(_sim_services.ATTRIBUTES_restore_stl_get, _sim_services.ATTRIBUTES_restore_stl_set)
    clear_stl = property(_sim_services.ATTRIBUTES_clear_stl_get, _sim_services.ATTRIBUTES_clear_stl_set)

    def __init__(self):
        _sim_services.ATTRIBUTES_swiginit(self, _sim_services.new_ATTRIBUTES())
    __swig_destroy__ = _sim_services.delete_ATTRIBUTES

# Register ATTRIBUTES in _sim_services:
_sim_services.ATTRIBUTES_swigregister(ATTRIBUTES)

class ENUM_LIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type_name = property(_sim_services.ENUM_LIST_type_name_get, _sim_services.ENUM_LIST_type_name_set)
    E = property(_sim_services.ENUM_LIST_E_get, _sim_services.ENUM_LIST_E_set)

    def __init__(self):
        _sim_services.ENUM_LIST_swiginit(self, _sim_services.new_ENUM_LIST())
    __swig_destroy__ = _sim_services.delete_ENUM_LIST

# Register ENUM_LIST in _sim_services:
_sim_services.ENUM_LIST_swigregister(ENUM_LIST)

class NAME_TO_ATTR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_sim_services.NAME_TO_ATTR_name_get, _sim_services.NAME_TO_ATTR_name_set)
    attr = property(_sim_services.NAME_TO_ATTR_attr_get, _sim_services.NAME_TO_ATTR_attr_set)
    size = property(_sim_services.NAME_TO_ATTR_size_get, _sim_services.NAME_TO_ATTR_size_set)

    def __init__(self):
        _sim_services.NAME_TO_ATTR_swiginit(self, _sim_services.new_NAME_TO_ATTR())
    __swig_destroy__ = _sim_services.delete_NAME_TO_ATTR

# Register NAME_TO_ATTR in _sim_services:
_sim_services.NAME_TO_ATTR_swigregister(NAME_TO_ATTR)

class EQUIV_ATTRIBUTES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attr = property(_sim_services.EQUIV_ATTRIBUTES_attr_get, _sim_services.EQUIV_ATTRIBUTES_attr_set)
    base = property(_sim_services.EQUIV_ATTRIBUTES_base_get, _sim_services.EQUIV_ATTRIBUTES_base_set)

    def __init__(self):
        _sim_services.EQUIV_ATTRIBUTES_swiginit(self, _sim_services.new_EQUIV_ATTRIBUTES())
    __swig_destroy__ = _sim_services.delete_EQUIV_ATTRIBUTES

# Register EQUIV_ATTRIBUTES in _sim_services:
_sim_services.EQUIV_ATTRIBUTES_swigregister(EQUIV_ATTRIBUTES)

MAX_VALUE = _sim_services.MAX_VALUE
class VALUE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    c = property(_sim_services.VALUE_c_get, _sim_services.VALUE_c_set)
    cp = property(_sim_services.VALUE_cp_get, _sim_services.VALUE_cp_set)
    s = property(_sim_services.VALUE_s_get, _sim_services.VALUE_s_set)
    fp = property(_sim_services.VALUE_fp_get, _sim_services.VALUE_fp_set)
    i = property(_sim_services.VALUE_i_get, _sim_services.VALUE_i_set)
    l = property(_sim_services.VALUE_l_get, _sim_services.VALUE_l_set)
    f = property(_sim_services.VALUE_f_get, _sim_services.VALUE_f_set)
    d = property(_sim_services.VALUE_d_get, _sim_services.VALUE_d_set)
    ll = property(_sim_services.VALUE_ll_get, _sim_services.VALUE_ll_set)
    vp = property(_sim_services.VALUE_vp_get, _sim_services.VALUE_vp_set)

    def __init__(self):
        _sim_services.VALUE_swiginit(self, _sim_services.new_VALUE())
    __swig_destroy__ = _sim_services.delete_VALUE

# Register VALUE in _sim_services:
_sim_services.VALUE_swigregister(VALUE)

class V_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_sim_services.V_DATA_type_get, _sim_services.V_DATA_type_set)
    value = property(_sim_services.V_DATA_value_get, _sim_services.V_DATA_value_set)

    def __init__(self):
        _sim_services.V_DATA_swiginit(self, _sim_services.new_V_DATA())
    __swig_destroy__ = _sim_services.delete_V_DATA

# Register V_DATA in _sim_services:
_sim_services.V_DATA_swigregister(V_DATA)

class VALUE_LIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_val = property(_sim_services.VALUE_LIST_num_val_get, _sim_services.VALUE_LIST_num_val_set)
    v_data = property(_sim_services.VALUE_LIST_v_data_get, _sim_services.VALUE_LIST_v_data_set)

    def __init__(self):
        _sim_services.VALUE_LIST_swiginit(self, _sim_services.new_VALUE_LIST())
    __swig_destroy__ = _sim_services.delete_VALUE_LIST

# Register VALUE_LIST in _sim_services:
_sim_services.VALUE_LIST_swigregister(VALUE_LIST)

class V_TREE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    last = property(_sim_services.V_TREE_last_get, _sim_services.V_TREE_last_set)
    next = property(_sim_services.V_TREE_next_get, _sim_services.V_TREE_next_set)
    down = property(_sim_services.V_TREE_down_get, _sim_services.V_TREE_down_set)
    v_data = property(_sim_services.V_TREE_v_data_get, _sim_services.V_TREE_v_data_set)

    def __init__(self):
        _sim_services.V_TREE_swiginit(self, _sim_services.new_V_TREE())
    __swig_destroy__ = _sim_services.delete_V_TREE

# Register V_TREE in _sim_services:
_sim_services.V_TREE_swigregister(V_TREE)

class DLLNODE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    info = property(_sim_services.DLLNODE_info_get, _sim_services.DLLNODE_info_set)
    prev = property(_sim_services.DLLNODE_prev_get, _sim_services.DLLNODE_prev_set)
    next = property(_sim_services.DLLNODE_next_get, _sim_services.DLLNODE_next_set)

    def __init__(self):
        _sim_services.DLLNODE_swiginit(self, _sim_services.new_DLLNODE())
    __swig_destroy__ = _sim_services.delete_DLLNODE

# Register DLLNODE in _sim_services:
_sim_services.DLLNODE_swigregister(DLLNODE)

class DLLIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_sim_services.DLLIST_count_get, _sim_services.DLLIST_count_set)
    head = property(_sim_services.DLLIST_head_get, _sim_services.DLLIST_head_set)
    tail = property(_sim_services.DLLIST_tail_get, _sim_services.DLLIST_tail_set)
    compare = property(_sim_services.DLLIST_compare_get, _sim_services.DLLIST_compare_set)

    def __init__(self):
        _sim_services.DLLIST_swiginit(self, _sim_services.new_DLLIST())
    __swig_destroy__ = _sim_services.delete_DLLIST

# Register DLLIST in _sim_services:
_sim_services.DLLIST_swigregister(DLLIST)


def DLL_Create(*args):
    return _sim_services.DLL_Create(*args)

def DLL_Delete(*args):
    return _sim_services.DLL_Delete(*args)

def DLL_Init(*args):
    return _sim_services.DLL_Init(*args)

def DLL_GetCount(*args):
    return _sim_services.DLL_GetCount(*args)

def DLL_Find(*args):
    return _sim_services.DLL_Find(*args)

def DLL_FindPos(*args):
    return _sim_services.DLL_FindPos(*args)

def DLL_FindIndex(*args):
    return _sim_services.DLL_FindIndex(*args)

def DLL_GetAt(*args):
    return _sim_services.DLL_GetAt(*args)

def DLL_SetAt(*args):
    return _sim_services.DLL_SetAt(*args)

def DLL_RemoveAt(*args):
    return _sim_services.DLL_RemoveAt(*args)

def DLL_RemoveAll(*args):
    return _sim_services.DLL_RemoveAll(*args)

def DLL_InsertBefore(*args):
    return _sim_services.DLL_InsertBefore(*args)

def DLL_InsertAfter(*args):
    return _sim_services.DLL_InsertAfter(*args)

def DLL_GetNext(*args):
    return _sim_services.DLL_GetNext(*args)

def DLL_GetPrev(*args):
    return _sim_services.DLL_GetPrev(*args)

def DLL_AddHead(*args):
    return _sim_services.DLL_AddHead(*args)

def DLL_AddTail(*args):
    return _sim_services.DLL_AddTail(*args)

def DLL_GetHeadPosition(*args):
    return _sim_services.DLL_GetHeadPosition(*args)

def DLL_GetTailPosition(*args):
    return _sim_services.DLL_GetTailPosition(*args)

def bubble_sort(*args):
    return _sim_services.bubble_sort(*args)
TRICK_NO_ERROR = _sim_services.TRICK_NO_ERROR
TRICK_PARAMETER_ARRAY_SIZE = _sim_services.TRICK_PARAMETER_ARRAY_SIZE
TRICK_PARAMETER_ADDRESS_NULL = _sim_services.TRICK_PARAMETER_ADDRESS_NULL
TRICK_UNITS_CONVERSION_ERROR = _sim_services.TRICK_UNITS_CONVERSION_ERROR
REF_ADDRESS = _sim_services.REF_ADDRESS
REF_VALUE = _sim_services.REF_VALUE
REF_INVALID = _sim_services.REF_INVALID
AO_ADDRESS = _sim_services.AO_ADDRESS
AO_OFFSET = _sim_services.AO_OFFSET
AO_DEREFERENCE = _sim_services.AO_DEREFERENCE
class ADDRESS_OPERAND(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_sim_services.ADDRESS_OPERAND_address_get, _sim_services.ADDRESS_OPERAND_address_set)
    offset = property(_sim_services.ADDRESS_OPERAND_offset_get, _sim_services.ADDRESS_OPERAND_offset_set)

    def __init__(self):
        _sim_services.ADDRESS_OPERAND_swiginit(self, _sim_services.new_ADDRESS_OPERAND())
    __swig_destroy__ = _sim_services.delete_ADDRESS_OPERAND

# Register ADDRESS_OPERAND in _sim_services:
_sim_services.ADDRESS_OPERAND_swigregister(ADDRESS_OPERAND)

class ADDRESS_NODE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    operator_ = property(_sim_services.ADDRESS_NODE_operator__get, _sim_services.ADDRESS_NODE_operator__set)
    operand = property(_sim_services.ADDRESS_NODE_operand_get, _sim_services.ADDRESS_NODE_operand_set)

    def __init__(self):
        _sim_services.ADDRESS_NODE_swiginit(self, _sim_services.new_ADDRESS_NODE())
    __swig_destroy__ = _sim_services.delete_ADDRESS_NODE

# Register ADDRESS_NODE in _sim_services:
_sim_services.ADDRESS_NODE_swigregister(ADDRESS_NODE)

class REF2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reference = property(_sim_services.REF2_reference_get, _sim_services.REF2_reference_set)
    num_index = property(_sim_services.REF2_num_index_get, _sim_services.REF2_num_index_set)
    units = property(_sim_services.REF2_units_get, _sim_services.REF2_units_set)
    num_index_left = property(_sim_services.REF2_num_index_left_get, _sim_services.REF2_num_index_left_set)
    pointer_present = property(_sim_services.REF2_pointer_present_get, _sim_services.REF2_pointer_present_set)
    ref_type = property(_sim_services.REF2_ref_type_get, _sim_services.REF2_ref_type_set)
    address = property(_sim_services.REF2_address_get, _sim_services.REF2_address_set)
    v_data = property(_sim_services.REF2_v_data_get, _sim_services.REF2_v_data_set)
    attr = property(_sim_services.REF2_attr_get, _sim_services.REF2_attr_set)
    ref_attr = property(_sim_services.REF2_ref_attr_get, _sim_services.REF2_ref_attr_set)
    create_add_path = property(_sim_services.REF2_create_add_path_get, _sim_services.REF2_create_add_path_set)
    address_path = property(_sim_services.REF2_address_path_get, _sim_services.REF2_address_path_set)

    def __init__(self):
        _sim_services.REF2_swiginit(self, _sim_services.new_REF2())
    __swig_destroy__ = _sim_services.delete_REF2

# Register REF2 in _sim_services:
_sim_services.REF2_swigregister(REF2)


def ref_to_value(*args):
    return _sim_services.ref_to_value(*args)
DR_Always = _sim_services.DR_Always
DR_Changes = _sim_services.DR_Changes
DR_Changes_Step = _sim_services.DR_Changes_Step
DR_Buffer = _sim_services.DR_Buffer
DR_No_Buffer = _sim_services.DR_No_Buffer
DR_Ring_Buffer = _sim_services.DR_Ring_Buffer
DR_Thread_Buffer = _sim_services.DR_Thread_Buffer
DR_Not_Specified = _sim_services.DR_Not_Specified
DR_Type_None = _sim_services.DR_Type_None
DR_Type_Ascii = _sim_services.DR_Type_Ascii
DR_Type_Binary = _sim_services.DR_Type_Binary
DR_Type_HDF5 = _sim_services.DR_Type_HDF5
DR_Type_FrameLogDataRecord = _sim_services.DR_Type_FrameLogDataRecord
class DataRecordBuffer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    buffer = property(_sim_services.DataRecordBuffer_buffer_get, _sim_services.DataRecordBuffer_buffer_set)
    curr_buffer = property(_sim_services.DataRecordBuffer_curr_buffer_get, _sim_services.DataRecordBuffer_curr_buffer_set)
    last_value = property(_sim_services.DataRecordBuffer_last_value_get, _sim_services.DataRecordBuffer_last_value_set)
    ref = property(_sim_services.DataRecordBuffer_ref_get, _sim_services.DataRecordBuffer_ref_set)
    ref_searched = property(_sim_services.DataRecordBuffer_ref_searched_get, _sim_services.DataRecordBuffer_ref_searched_set)
    name = property(_sim_services.DataRecordBuffer_name_get, _sim_services.DataRecordBuffer_name_set)
    alias = property(_sim_services.DataRecordBuffer_alias_get, _sim_services.DataRecordBuffer_alias_set)

    def __init__(self, *args):
        _sim_services.DataRecordBuffer_swiginit(self, _sim_services.new_DataRecordBuffer(*args))
    __swig_destroy__ = _sim_services.delete_DataRecordBuffer

# Register DataRecordBuffer in _sim_services:
_sim_services.DataRecordBuffer_swigregister(DataRecordBuffer)

class DataRecordGroup(SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    record = property(_sim_services.DataRecordGroup_record_get, _sim_services.DataRecordGroup_record_set)
    inited = property(_sim_services.DataRecordGroup_inited_get, _sim_services.DataRecordGroup_inited_set)
    group_name = property(_sim_services.DataRecordGroup_group_name_get, _sim_services.DataRecordGroup_group_name_set)
    output_dir = property(_sim_services.DataRecordGroup_output_dir_get, _sim_services.DataRecordGroup_output_dir_set)
    file_name = property(_sim_services.DataRecordGroup_file_name_get, _sim_services.DataRecordGroup_file_name_set)
    freq = property(_sim_services.DataRecordGroup_freq_get, _sim_services.DataRecordGroup_freq_set)
    start = property(_sim_services.DataRecordGroup_start_get, _sim_services.DataRecordGroup_start_set)
    cycle = property(_sim_services.DataRecordGroup_cycle_get, _sim_services.DataRecordGroup_cycle_set)
    time_value_attr = property(_sim_services.DataRecordGroup_time_value_attr_get, _sim_services.DataRecordGroup_time_value_attr_set)
    num_variable_names = property(_sim_services.DataRecordGroup_num_variable_names_get, _sim_services.DataRecordGroup_num_variable_names_set)
    variable_names = property(_sim_services.DataRecordGroup_variable_names_get, _sim_services.DataRecordGroup_variable_names_set)
    variable_alias = property(_sim_services.DataRecordGroup_variable_alias_get, _sim_services.DataRecordGroup_variable_alias_set)
    rec_buffer = property(_sim_services.DataRecordGroup_rec_buffer_get, _sim_services.DataRecordGroup_rec_buffer_set)
    num_change_variable_names = property(_sim_services.DataRecordGroup_num_change_variable_names_get, _sim_services.DataRecordGroup_num_change_variable_names_set)
    change_variable_names = property(_sim_services.DataRecordGroup_change_variable_names_get, _sim_services.DataRecordGroup_change_variable_names_set)
    change_variable_alias = property(_sim_services.DataRecordGroup_change_variable_alias_get, _sim_services.DataRecordGroup_change_variable_alias_set)
    change_buffer = property(_sim_services.DataRecordGroup_change_buffer_get, _sim_services.DataRecordGroup_change_buffer_set)
    max_num = property(_sim_services.DataRecordGroup_max_num_get, _sim_services.DataRecordGroup_max_num_set)
    buffer_num = property(_sim_services.DataRecordGroup_buffer_num_get, _sim_services.DataRecordGroup_buffer_num_set)
    writer_num = property(_sim_services.DataRecordGroup_writer_num_get, _sim_services.DataRecordGroup_writer_num_set)
    max_file_size = property(_sim_services.DataRecordGroup_max_file_size_get, _sim_services.DataRecordGroup_max_file_size_set)
    total_bytes_written = property(_sim_services.DataRecordGroup_total_bytes_written_get, _sim_services.DataRecordGroup_total_bytes_written_set)
    max_size_warning = property(_sim_services.DataRecordGroup_max_size_warning_get, _sim_services.DataRecordGroup_max_size_warning_set)
    writer_buff = property(_sim_services.DataRecordGroup_writer_buff_get, _sim_services.DataRecordGroup_writer_buff_set)
    writer_buff_size = property(_sim_services.DataRecordGroup_writer_buff_size_get, _sim_services.DataRecordGroup_writer_buff_size_set)
    byte_order = property(_sim_services.DataRecordGroup_byte_order_get, _sim_services.DataRecordGroup_byte_order_set)
    single_prec_only = property(_sim_services.DataRecordGroup_single_prec_only_get, _sim_services.DataRecordGroup_single_prec_only_set)
    buffer_type = property(_sim_services.DataRecordGroup_buffer_type_get, _sim_services.DataRecordGroup_buffer_type_set)
    job_class = property(_sim_services.DataRecordGroup_job_class_get, _sim_services.DataRecordGroup_job_class_set)
    write_job = property(_sim_services.DataRecordGroup_write_job_get, _sim_services.DataRecordGroup_write_job_set)
    __swig_destroy__ = _sim_services.delete_DataRecordGroup

    def get_group_name(self, *args):
        return _sim_services.DataRecordGroup_get_group_name(self, *args)

    def register_group_with_mm(self, *args):
        return _sim_services.DataRecordGroup_register_group_with_mm(self, *args)

    def set_job_class(self, *args):
        return _sim_services.DataRecordGroup_set_job_class(self, *args)

    def set_cycle(self, *args):
        return _sim_services.DataRecordGroup_set_cycle(self, *args)

    def set_phase(self, *args):
        return _sim_services.DataRecordGroup_set_phase(self, *args)

    def set_freq(self, *args):
        return _sim_services.DataRecordGroup_set_freq(self, *args)

    def set_max_buffer_size(self, *args):
        return _sim_services.DataRecordGroup_set_max_buffer_size(self, *args)

    def set_buffer_type(self, *args):
        return _sim_services.DataRecordGroup_set_buffer_type(self, *args)

    def set_max_file_size(self, *args):
        return _sim_services.DataRecordGroup_set_max_file_size(self, *args)

    def set_single_prec_only(self, *args):
        return _sim_services.DataRecordGroup_set_single_prec_only(self, *args)

    def set_thread(self, *args):
        return _sim_services.DataRecordGroup_set_thread(self, *args)

    def enable(self, *args):
        return _sim_services.DataRecordGroup_enable(self, *args)

    def disable(self, *args):
        return _sim_services.DataRecordGroup_disable(self, *args)

    def init(self, *args):
        return _sim_services.DataRecordGroup_init(self, *args)

    def checkpoint(self, *args):
        return _sim_services.DataRecordGroup_checkpoint(self, *args)

    def clear_checkpoint_vars(self, *args):
        return _sim_services.DataRecordGroup_clear_checkpoint_vars(self, *args)

    def restart(self, *args):
        return _sim_services.DataRecordGroup_restart(self, *args)

    def format_specific_header(self, *args):
        return _sim_services.DataRecordGroup_format_specific_header(self, *args)

    def format_specific_init(self, *args):
        return _sim_services.DataRecordGroup_format_specific_init(self, *args)

    def format_specific_write_data(self, *args):
        return _sim_services.DataRecordGroup_format_specific_write_data(self, *args)

    def format_specific_shutdown(self, *args):
        return _sim_services.DataRecordGroup_format_specific_shutdown(self, *args)

    def write_header(self, *args):
        return _sim_services.DataRecordGroup_write_header(self, *args)

    def remove_variable(self, *args):
        return _sim_services.DataRecordGroup_remove_variable(self, *args)

    def remove_all_variables(self, *args):
        return _sim_services.DataRecordGroup_remove_all_variables(self, *args)

    def add_variable(self, *args):
        return _sim_services.DataRecordGroup_add_variable(self, *args)

    def add_change_variable(self, *args):
        return _sim_services.DataRecordGroup_add_change_variable(self, *args)

    def data_record(self, *args):
        return _sim_services.DataRecordGroup_data_record(self, *args)

    def write_data(self, *args):
        return _sim_services.DataRecordGroup_write_data(self, *args)

    def shutdown(self, *args):
        return _sim_services.DataRecordGroup_shutdown(self, *args)

    def call_function(self, *args):
        return _sim_services.DataRecordGroup_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.DataRecordGroup_call_function_double(self, *args)

    def type_string(self, *args):
        return _sim_services.DataRecordGroup_type_string(self, *args)

# Register DataRecordGroup in _sim_services:
_sim_services.DataRecordGroup_swigregister(DataRecordGroup)

class DRAscii(DataRecordGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ascii_float_format = property(_sim_services.DRAscii_ascii_float_format_get, _sim_services.DRAscii_ascii_float_format_set)
    ascii_double_format = property(_sim_services.DRAscii_ascii_double_format_get, _sim_services.DRAscii_ascii_double_format_set)
    delimiter = property(_sim_services.DRAscii_delimiter_get, _sim_services.DRAscii_delimiter_set)
    __swig_destroy__ = _sim_services.delete_DRAscii

    def __init__(self, *args):
        this = _sim_services.new_DRAscii(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def format_specific_header(self, outstream):
        return _sim_services.DRAscii_format_specific_header(self, outstream)

    def format_specific_init(self):
        return _sim_services.DRAscii_format_specific_init(self)

    def format_specific_write_data(self, writer_offset):
        return _sim_services.DRAscii_format_specific_write_data(self, writer_offset)

    def format_specific_shutdown(self):
        return _sim_services.DRAscii_format_specific_shutdown(self)

    def set_ascii_float_format(self, in_ascii_float_format):
        return _sim_services.DRAscii_set_ascii_float_format(self, in_ascii_float_format)

    def set_ascii_double_format(self, in_ascii_double_format):
        return _sim_services.DRAscii_set_ascii_double_format(self, in_ascii_double_format)

    def set_delimiter(self, in_delimiter):
        return _sim_services.DRAscii_set_delimiter(self, in_delimiter)

    def set_single_prec_only(self, in_single_prec_only):
        return _sim_services.DRAscii_set_single_prec_only(self, in_single_prec_only)

# Register DRAscii in _sim_services:
_sim_services.DRAscii_swigregister(DRAscii)

class DRBinary(DataRecordGroup):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_DRBinary

    def __init__(self, *args):
        this = _sim_services.new_DRBinary(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def format_specific_header(self, outstream):
        return _sim_services.DRBinary_format_specific_header(self, outstream)

    def format_specific_init(self):
        return _sim_services.DRBinary_format_specific_init(self)

    def format_specific_write_data(self, writer_offset):
        return _sim_services.DRBinary_format_specific_write_data(self, writer_offset)

    def format_specific_shutdown(self):
        return _sim_services.DRBinary_format_specific_shutdown(self)

# Register DRBinary in _sim_services:
_sim_services.DRBinary_swigregister(DRBinary)

class ScheduledJobQueue(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ScheduledJobQueue_swiginit(self, _sim_services.new_ScheduledJobQueue(*args))
    __swig_destroy__ = _sim_services.delete_ScheduledJobQueue

    def push(self, *args):
        return _sim_services.ScheduledJobQueue_push(self, *args)

    def push_ignore_sim_object(self, *args):
        return _sim_services.ScheduledJobQueue_push_ignore_sim_object(self, *args)

    def remove(self, *args):
        return _sim_services.ScheduledJobQueue_remove(self, *args)

    def get_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_get_curr_index(self, *args)

    def set_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_set_curr_index(self, *args)

    def reset_curr_index(self, *args):
        return _sim_services.ScheduledJobQueue_reset_curr_index(self, *args)

    def size(self, *args):
        return _sim_services.ScheduledJobQueue_size(self, *args)

    def empty(self, *args):
        return _sim_services.ScheduledJobQueue_empty(self, *args)

    def clear(self, *args):
        return _sim_services.ScheduledJobQueue_clear(self, *args)

    def execute_all_jobs(self, *args):
        return _sim_services.ScheduledJobQueue_execute_all_jobs(self, *args)

    def write_sched_queue(self, *args):
        return _sim_services.ScheduledJobQueue_write_sched_queue(self, *args)

    def write_non_sched_queue(self, *args):
        return _sim_services.ScheduledJobQueue_write_non_sched_queue(self, *args)

    def instrument_before(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_before(self, *args)

    def instrument_after(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_after(self, *args)

    def instrument_remove(self, *args):
        return _sim_services.ScheduledJobQueue_instrument_remove(self, *args)

    def top(self, *args):
        return _sim_services.ScheduledJobQueue_top(self, *args)

    def get_next_job(self, *args):
        return _sim_services.ScheduledJobQueue_get_next_job(self, *args)

    def find_next_job(self, *args):
        return _sim_services.ScheduledJobQueue_find_next_job(self, *args)

    def find_job(self, *args):
        return _sim_services.ScheduledJobQueue_find_job(self, *args)

    def set_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_set_next_job_call_time(self, *args)

    def get_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_get_next_job_call_time(self, *args)

    def test_next_job_call_time(self, *args):
        return _sim_services.ScheduledJobQueue_test_next_job_call_time(self, *args)

# Register ScheduledJobQueue in _sim_services:
_sim_services.ScheduledJobQueue_swigregister(ScheduledJobQueue)

class Scheduler(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Scheduler

    def add_sim_object(self, *args):
        return _sim_services.Scheduler_add_sim_object(self, *args)

    def delete_sim_object(self, *args):
        return _sim_services.Scheduler_delete_sim_object(self, *args)

    def write_sched_queue(self, *args):
        return _sim_services.Scheduler_write_sched_queue(self, *args)

    def write_non_sched_queue(self, *args):
        return _sim_services.Scheduler_write_non_sched_queue(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.Scheduler_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.Scheduler_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.Scheduler_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.Scheduler_instrument_job_remove(self, *args)

# Register Scheduler in _sim_services:
_sim_services.Scheduler_swigregister(Scheduler)

class ThreadBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_ThreadBase

    def get_name(self, *args):
        return _sim_services.ThreadBase_get_name(self, *args)

    def set_name(self, *args):
        return _sim_services.ThreadBase_set_name(self, *args)

    def get_pthread_id(self, *args):
        return _sim_services.ThreadBase_get_pthread_id(self, *args)

    def get_pid(self, *args):
        return _sim_services.ThreadBase_get_pid(self, *args)

    def set_pid(self, *args):
        return _sim_services.ThreadBase_set_pid(self, *args)

    def cpu_set(self, *args):
        return _sim_services.ThreadBase_cpu_set(self, *args)

    def cpu_clr(self, *args):
        return _sim_services.ThreadBase_cpu_clr(self, *args)

    def execute_cpu_affinity(self, *args):
        return _sim_services.ThreadBase_execute_cpu_affinity(self, *args)

    def set_priority(self, *args):
        return _sim_services.ThreadBase_set_priority(self, *args)

    def execute_priority(self, *args):
        return _sim_services.ThreadBase_execute_priority(self, *args)

    def create_thread(self, *args):
        return _sim_services.ThreadBase_create_thread(self, *args)

    def cancel_thread(self, *args):
        return _sim_services.ThreadBase_cancel_thread(self, *args)

    def join_thread(self, *args):
        return _sim_services.ThreadBase_join_thread(self, *args)

    def thread_body(self, *args):
        return _sim_services.ThreadBase_thread_body(self, *args)

    @staticmethod
    def thread_helper(*args):
        return _sim_services.ThreadBase_thread_helper(*args)

    def dump(self, *args):
        return _sim_services.ThreadBase_dump(self, *args)

    def test_shutdown(self, *args):
        return _sim_services.ThreadBase_test_shutdown(self, *args)

    def thread_shutdown(self, *args):
        return _sim_services.ThreadBase_thread_shutdown(self, *args)

# Register ThreadBase in _sim_services:
_sim_services.ThreadBase_swigregister(ThreadBase)

def ThreadBase_thread_helper(*args):
    return _sim_services.ThreadBase_thread_helper(*args)

class SysThread(ThreadBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_SysThread

    @staticmethod
    def ensureAllShutdown(*args):
        return _sim_services.SysThread_ensureAllShutdown(*args)

# Register SysThread in _sim_services:
_sim_services.SysThread_swigregister(SysThread)

def SysThread_ensureAllShutdown(*args):
    return _sim_services.SysThread_ensureAllShutdown(*args)

class DRDMutexes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.DRDMutexes_swiginit(self, _sim_services.new_DRDMutexes(*args))
    dr_go_cv = property(_sim_services.DRDMutexes_dr_go_cv_get, _sim_services.DRDMutexes_dr_go_cv_set)
    dr_go_mutex = property(_sim_services.DRDMutexes_dr_go_mutex_get, _sim_services.DRDMutexes_dr_go_mutex_set)
    init_complete_cv = property(_sim_services.DRDMutexes_init_complete_cv_get, _sim_services.DRDMutexes_init_complete_cv_set)
    init_complete_mutex = property(_sim_services.DRDMutexes_init_complete_mutex_get, _sim_services.DRDMutexes_init_complete_mutex_set)
    cancelled = property(_sim_services.DRDMutexes_cancelled_get, _sim_services.DRDMutexes_cancelled_set)
    __swig_destroy__ = _sim_services.delete_DRDMutexes

# Register DRDMutexes in _sim_services:
_sim_services.DRDMutexes_swigregister(DRDMutexes)

class DRDWriterThread(SysThread):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.DRDWriterThread_swiginit(self, _sim_services.new_DRDWriterThread(*args))

    def thread_body(self, *args):
        return _sim_services.DRDWriterThread_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.DRDWriterThread_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_DRDWriterThread

# Register DRDWriterThread in _sim_services:
_sim_services.DRDWriterThread_swigregister(DRDWriterThread)

class DataRecordDispatcher(Scheduler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.DataRecordDispatcher_swiginit(self, _sim_services.new_DataRecordDispatcher(*args))
    __swig_destroy__ = _sim_services.delete_DataRecordDispatcher

    def remove_files(self, *args):
        return _sim_services.DataRecordDispatcher_remove_files(self, *args)

    def init(self, *args):
        return _sim_services.DataRecordDispatcher_init(self, *args)

    def init_groups(self, *args):
        return _sim_services.DataRecordDispatcher_init_groups(self, *args)

    def add_group(self, *args):
        return _sim_services.DataRecordDispatcher_add_group(self, *args)

    def remove_group(self, *args):
        return _sim_services.DataRecordDispatcher_remove_group(self, *args)

    def remove_all_groups(self, *args):
        return _sim_services.DataRecordDispatcher_remove_all_groups(self, *args)

    def get_group(self, *args):
        return _sim_services.DataRecordDispatcher_get_group(self, *args)

    def get_groups_size(self, *args):
        return _sim_services.DataRecordDispatcher_get_groups_size(self, *args)

    def signal_thread(self, *args):
        return _sim_services.DataRecordDispatcher_signal_thread(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.DataRecordDispatcher_preload_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.DataRecordDispatcher_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.DataRecordDispatcher_shutdown(self, *args)

    def enable(self, *args):
        return _sim_services.DataRecordDispatcher_enable(self, *args)

    def disable(self, *args):
        return _sim_services.DataRecordDispatcher_disable(self, *args)

    def record_now_group(self, *args):
        return _sim_services.DataRecordDispatcher_record_now_group(self, *args)

    def set_group_max_file_size(self, *args):
        return _sim_services.DataRecordDispatcher_set_group_max_file_size(self, *args)

    def set_max_file_size(self, *args):
        return _sim_services.DataRecordDispatcher_set_max_file_size(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.DataRecordDispatcher_add_sim_object(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.DataRecordDispatcher_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.DataRecordDispatcher_instrument_job_remove(self, *args)
    drd_writer_thread = property(_sim_services.DataRecordDispatcher_drd_writer_thread_get)

# Register DataRecordDispatcher in _sim_services:
_sim_services.DataRecordDispatcher_swigregister(DataRecordDispatcher)


def dr_remove_files(*args):
    return _sim_services.dr_remove_files(*args)

def dr_enable(*args):
    return _sim_services.dr_enable(*args)

def dr_disable(*args):
    return _sim_services.dr_disable(*args)

def dr_enable_group(*args):
    return _sim_services.dr_enable_group(*args)

def dr_disable_group(*args):
    return _sim_services.dr_disable_group(*args)

def dr_record_now_group(*args):
    return _sim_services.dr_record_now_group(*args)

def dr_set_max_file_size(*args):
    return _sim_services.dr_set_max_file_size(*args)

def remove_all_data_record_groups(*args):
    return _sim_services.remove_all_data_record_groups(*args)

def set_max_size_record_group(*args):
    return _sim_services.set_max_size_record_group(*args)

def add_data_record_group(*args):
    return _sim_services.add_data_record_group(*args)

def remove_data_record_group(*args):
    return _sim_services.remove_data_record_group(*args)

def get_data_record_group(*args):
    return _sim_services.get_data_record_group(*args)

def get_data_record_group_by_idx(*args):
    return _sim_services.get_data_record_group_by_idx(*args)

def get_num_data_record_groups(*args):
    return _sim_services.get_num_data_record_groups(*args)
class DebugPause(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    debug_pause_flag = property(_sim_services.DebugPause_debug_pause_flag_get, _sim_services.DebugPause_debug_pause_flag_set)

    def __init__(self, *args):
        _sim_services.DebugPause_swiginit(self, _sim_services.new_DebugPause(*args))

    def debug_pause(self, *args):
        return _sim_services.DebugPause_debug_pause(self, *args)

    def debug_signal(self, *args):
        return _sim_services.DebugPause_debug_signal(self, *args)

    def debug_pause_on(self, *args):
        return _sim_services.DebugPause_debug_pause_on(self, *args)

    def debug_pause_off(self, *args):
        return _sim_services.DebugPause_debug_pause_off(self, *args)
    __swig_destroy__ = _sim_services.delete_DebugPause

# Register DebugPause in _sim_services:
_sim_services.DebugPause_swigregister(DebugPause)


def debug_pause_on(*args):
    return _sim_services.debug_pause_on(*args)

def debug_pause_off(*args):
    return _sim_services.debug_pause_off(*args)

def debug_signal(*args):
    return _sim_services.debug_signal(*args)
class EchoJobs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.EchoJobs_swiginit(self, _sim_services.new_EchoJobs(*args))

    def echo_job(self, *args):
        return _sim_services.EchoJobs_echo_job(self, *args)

    def echojobs_on(self, *args):
        return _sim_services.EchoJobs_echojobs_on(self, *args)

    def echojobs_off(self, *args):
        return _sim_services.EchoJobs_echojobs_off(self, *args)
    __swig_destroy__ = _sim_services.delete_EchoJobs

# Register EchoJobs in _sim_services:
_sim_services.EchoJobs_swigregister(EchoJobs)


def echo_jobs_on(*args):
    return _sim_services.echo_jobs_on(*args)

def echo_jobs_off(*args):
    return _sim_services.echo_jobs_off(*args)
class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Environment_swiginit(self, _sim_services.new_Environment(*args))

    def add_var(self, *args):
        return _sim_services.Environment_add_var(self, *args)

    def get_var(self, *args):
        return _sim_services.Environment_get_var(self, *args)

    def print_vars(self, *args):
        return _sim_services.Environment_print_vars(self, *args)
    __swig_destroy__ = _sim_services.delete_Environment

# Register Environment in _sim_services:
_sim_services.Environment_swigregister(Environment)


def env_add_var(*args):
    return _sim_services.env_add_var(*args)

def get_trick_env(*args):
    return _sim_services.get_trick_env(*args)

def env_get_var(*args):
    return _sim_services.env_get_var(*args)

def env_print_vars(*args):
    return _sim_services.env_print_vars(*args)
TT_MUTEX = _sim_services.TT_MUTEX
TT_FLAG = _sim_services.TT_FLAG
TT_EVENTFD = _sim_services.TT_EVENTFD
TT_FUTEX = _sim_services.TT_FUTEX
class ThreadTriggerBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    tt_type = property(_sim_services.ThreadTriggerBase_tt_type_get, _sim_services.ThreadTriggerBase_tt_type_set)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerBase

    def init(self, *args):
        return _sim_services.ThreadTriggerBase_init(self, *args)

    def fire(self, *args):
        return _sim_services.ThreadTriggerBase_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerBase_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerBase_dump(self, *args)

# Register ThreadTriggerBase in _sim_services:
_sim_services.ThreadTriggerBase_swigregister(ThreadTriggerBase)

class ThreadTriggerMutex(ThreadTriggerBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ThreadTriggerMutex_swiginit(self, _sim_services.new_ThreadTriggerMutex(*args))

    def init(self, *args):
        return _sim_services.ThreadTriggerMutex_init(self, *args)

    def fire(self, *args):
        return _sim_services.ThreadTriggerMutex_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerMutex_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerMutex_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerMutex

# Register ThreadTriggerMutex in _sim_services:
_sim_services.ThreadTriggerMutex_swigregister(ThreadTriggerMutex)

class ThreadTriggerFlag(ThreadTriggerBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ThreadTriggerFlag_swiginit(self, _sim_services.new_ThreadTriggerFlag(*args))

    def fire(self, *args):
        return _sim_services.ThreadTriggerFlag_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerFlag_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerFlag_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerFlag

# Register ThreadTriggerFlag in _sim_services:
_sim_services.ThreadTriggerFlag_swigregister(ThreadTriggerFlag)

class ThreadTriggerEventFD(ThreadTriggerBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ThreadTriggerEventFD_swiginit(self, _sim_services.new_ThreadTriggerEventFD(*args))

    def fire(self, *args):
        return _sim_services.ThreadTriggerEventFD_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerEventFD_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerEventFD_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerEventFD

# Register ThreadTriggerEventFD in _sim_services:
_sim_services.ThreadTriggerEventFD_swigregister(ThreadTriggerEventFD)

class ThreadTriggerFutex(ThreadTriggerBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ThreadTriggerFutex_swiginit(self, _sim_services.new_ThreadTriggerFutex(*args))

    def fire(self, *args):
        return _sim_services.ThreadTriggerFutex_fire(self, *args)

    def wait(self, *args):
        return _sim_services.ThreadTriggerFutex_wait(self, *args)

    def dump(self, *args):
        return _sim_services.ThreadTriggerFutex_dump(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerFutex

# Register ThreadTriggerFutex in _sim_services:
_sim_services.ThreadTriggerFutex_swigregister(ThreadTriggerFutex)

class ThreadTriggerContainer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.ThreadTriggerContainer_swiginit(self, _sim_services.new_ThreadTriggerContainer(*args))

    def getThreadTrigger(self, *args):
        return _sim_services.ThreadTriggerContainer_getThreadTrigger(self, *args)

    def setThreadTrigger(self, *args):
        return _sim_services.ThreadTriggerContainer_setThreadTrigger(self, *args)
    __swig_destroy__ = _sim_services.delete_ThreadTriggerContainer

# Register ThreadTriggerContainer in _sim_services:
_sim_services.ThreadTriggerContainer_swigregister(ThreadTriggerContainer)

PROCESS_TYPE_SCHEDULED = _sim_services.PROCESS_TYPE_SCHEDULED
PROCESS_TYPE_ASYNC_CHILD = _sim_services.PROCESS_TYPE_ASYNC_CHILD
PROCESS_TYPE_AMF_CHILD = _sim_services.PROCESS_TYPE_AMF_CHILD
class Threads(ThreadBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Threads_swiginit(self, _sim_services.new_Threads(*args))

    def set_pthread_id(self, *args):
        return _sim_services.Threads_set_pthread_id(self, *args)

    def thread_body(self, *args):
        return _sim_services.Threads_thread_body(self, *args)

    def set_enabled(self, *args):
        return _sim_services.Threads_set_enabled(self, *args)

    def set_process_type(self, *args):
        return _sim_services.Threads_set_process_type(self, *args)

    def set_amf_cycle(self, *args):
        return _sim_services.Threads_set_amf_cycle(self, *args)

    def time_tic_changed(self, *args):
        return _sim_services.Threads_time_tic_changed(self, *args)

    def set_async_wait(self, *args):
        return _sim_services.Threads_set_async_wait(self, *args)

    def clear_scheduled_queues(self, *args):
        return _sim_services.Threads_clear_scheduled_queues(self, *args)

    def dump(self, *args):
        return _sim_services.Threads_dump(self, *args)
    enabled = property(_sim_services.Threads_enabled_get, _sim_services.Threads_enabled_set)
    thread_id = property(_sim_services.Threads_thread_id_get, _sim_services.Threads_thread_id_set)
    curr_time_tics = property(_sim_services.Threads_curr_time_tics_get, _sim_services.Threads_curr_time_tics_set)
    amf_cycle = property(_sim_services.Threads_amf_cycle_get, _sim_services.Threads_amf_cycle_set)
    amf_cycle_tics = property(_sim_services.Threads_amf_cycle_tics_get, _sim_services.Threads_amf_cycle_tics_set)
    amf_next_tics = property(_sim_services.Threads_amf_next_tics_get, _sim_services.Threads_amf_next_tics_set)
    job_queue = property(_sim_services.Threads_job_queue_get, _sim_services.Threads_job_queue_set)
    top_of_frame_queue = property(_sim_services.Threads_top_of_frame_queue_get, _sim_services.Threads_top_of_frame_queue_set)
    end_of_frame_queue = property(_sim_services.Threads_end_of_frame_queue_get, _sim_services.Threads_end_of_frame_queue_set)
    curr_job = property(_sim_services.Threads_curr_job_get, _sim_services.Threads_curr_job_set)
    rt_nap = property(_sim_services.Threads_rt_nap_get, _sim_services.Threads_rt_nap_set)
    process_type = property(_sim_services.Threads_process_type_get, _sim_services.Threads_process_type_set)
    child_complete = property(_sim_services.Threads_child_complete_get, _sim_services.Threads_child_complete_set)
    running = property(_sim_services.Threads_running_get, _sim_services.Threads_running_set)
    trigger_container = property(_sim_services.Threads_trigger_container_get, _sim_services.Threads_trigger_container_set)
    shutdown_wait_async = property(_sim_services.Threads_shutdown_wait_async_get, _sim_services.Threads_shutdown_wait_async_set)
    __swig_destroy__ = _sim_services.delete_Threads

# Register Threads in _sim_services:
_sim_services.Threads_swigregister(Threads)

NoCmd = _sim_services.NoCmd
FreezeCmd = _sim_services.FreezeCmd
RunCmd = _sim_services.RunCmd
ExitCmd = _sim_services.ExitCmd
Initialization = _sim_services.Initialization
Freeze = _sim_services.Freeze
Step = _sim_services.Step
Run = _sim_services.Run
ExitMode = _sim_services.ExitMode
class Executive(Scheduler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def get_except_return(self, *args):
        return _sim_services.Executive_get_except_return(self, *args)

    def __init__(self, *args):
        _sim_services.Executive_swiginit(self, _sim_services.new_Executive(*args))
    __swig_destroy__ = _sim_services.delete_Executive

    def get_all_jobs_vector(self, *args):
        return _sim_services.Executive_get_all_jobs_vector(self, *args)

    def get_attach_debugger(self, *args):
        return _sim_services.Executive_get_attach_debugger(self, *args)

    def get_current_version(self, *args):
        return _sim_services.Executive_get_current_version(self, *args)

    def get_debugger_command(self, *args):
        return _sim_services.Executive_get_debugger_command(self, *args)

    def get_exec_command(self, *args):
        return _sim_services.Executive_get_exec_command(self, *args)

    def get_enable_freeze(self, *args):
        return _sim_services.Executive_get_enable_freeze(self, *args)

    def get_freeze_command(self, *args):
        return _sim_services.Executive_get_freeze_command(self, *args)

    def get_freeze_on_frame_boundary(self, *args):
        return _sim_services.Executive_get_freeze_on_frame_boundary(self, *args)

    def get_freeze_frame(self, *args):
        return _sim_services.Executive_get_freeze_frame(self, *args)

    def get_freeze_frame_tics(self, *args):
        return _sim_services.Executive_get_freeze_frame_tics(self, *args)

    def get_mode(self, *args):
        return _sim_services.Executive_get_mode(self, *args)

    def get_num_threads(self, *args):
        return _sim_services.Executive_get_num_threads(self, *args)

    def get_old_time_tic_value(self, *args):
        return _sim_services.Executive_get_old_time_tic_value(self, *args)

    def get_rt_nap(self, *args):
        return _sim_services.Executive_get_rt_nap(self, *args)

    def get_scheduled_start_index(self, *args):
        return _sim_services.Executive_get_scheduled_start_index(self, *args)

    def get_sim_objects(self, *args):
        return _sim_services.Executive_get_sim_objects(self, *args)

    def get_sim_object_by_name(self, *args):
        return _sim_services.Executive_get_sim_object_by_name(self, *args)

    def get_software_frame(self, *args):
        return _sim_services.Executive_get_software_frame(self, *args)

    def get_software_frame_tics(self, *args):
        return _sim_services.Executive_get_software_frame_tics(self, *args)

    def get_frame_count(self, *args):
        return _sim_services.Executive_get_frame_count(self, *args)

    def get_freeze_frame_count(self, *args):
        return _sim_services.Executive_get_freeze_frame_count(self, *args)

    def get_pthread_id(self, *args):
        return _sim_services.Executive_get_pthread_id(self, *args)

    def get_stack_trace(self, *args):
        return _sim_services.Executive_get_stack_trace(self, *args)

    def get_terminate_time(self, *args):
        return _sim_services.Executive_get_terminate_time(self, *args)

    def get_thread_amf_cycle_time(self, *args):
        return _sim_services.Executive_get_thread_amf_cycle_time(self, *args)

    def get_time_tic_value(self, *args):
        return _sim_services.Executive_get_time_tic_value(self, *args)

    def get_time_tics(self, *args):
        return _sim_services.Executive_get_time_tics(self, *args)

    def get_freeze_time_tics(self, *args):
        return _sim_services.Executive_get_freeze_time_tics(self, *args)

    def get_trap_sigbus(self, *args):
        return _sim_services.Executive_get_trap_sigbus(self, *args)

    def get_trap_sigfpe(self, *args):
        return _sim_services.Executive_get_trap_sigfpe(self, *args)

    def get_trap_sigsegv(self, *args):
        return _sim_services.Executive_get_trap_sigsegv(self, *args)

    def get_trap_sigabrt(self, *args):
        return _sim_services.Executive_get_trap_sigabrt(self, *args)

    def get_trap_sigchld(self, *args):
        return _sim_services.Executive_get_trap_sigchld(self, *args)

    def set_attach_debugger(self, *args):
        return _sim_services.Executive_set_attach_debugger(self, *args)

    def set_debugger_command(self, *args):
        return _sim_services.Executive_set_debugger_command(self, *args)

    def set_enable_freeze(self, *args):
        return _sim_services.Executive_set_enable_freeze(self, *args)

    def set_freeze_command(self, *args):
        return _sim_services.Executive_set_freeze_command(self, *args)

    def set_freeze_on_frame_boundary(self, *args):
        return _sim_services.Executive_set_freeze_on_frame_boundary(self, *args)

    def set_freeze_frame(self, *args):
        return _sim_services.Executive_set_freeze_frame(self, *args)

    def set_exec_command(self, *args):
        return _sim_services.Executive_set_exec_command(self, *args)

    def set_rt_nap(self, *args):
        return _sim_services.Executive_set_rt_nap(self, *args)

    def set_software_frame(self, *args):
        return _sim_services.Executive_set_software_frame(self, *args)

    def set_stack_trace(self, *args):
        return _sim_services.Executive_set_stack_trace(self, *args)

    def set_time(self, *args):
        return _sim_services.Executive_set_time(self, *args)

    def set_time_tics(self, *args):
        return _sim_services.Executive_set_time_tics(self, *args)

    def set_time_tic_value(self, *args):
        return _sim_services.Executive_set_time_tic_value(self, *args)

    def set_terminate_time(self, *args):
        return _sim_services.Executive_set_terminate_time(self, *args)

    def set_trap_sigbus(self, *args):
        return _sim_services.Executive_set_trap_sigbus(self, *args)

    def set_trap_sigfpe(self, *args):
        return _sim_services.Executive_set_trap_sigfpe(self, *args)

    def set_trap_sigsegv(self, *args):
        return _sim_services.Executive_set_trap_sigsegv(self, *args)

    def set_trap_sigabrt(self, *args):
        return _sim_services.Executive_set_trap_sigabrt(self, *args)

    def set_trap_sigchld(self, *args):
        return _sim_services.Executive_set_trap_sigchld(self, *args)

    def get_sim_time(self, *args):
        return _sim_services.Executive_get_sim_time(self, *args)

    def get_process_id(self, *args):
        return _sim_services.Executive_get_process_id(self, *args)

    def get_freeze_job(self, *args):
        return _sim_services.Executive_get_freeze_job(self, *args)

    def get_job(self, *args):
        return _sim_services.Executive_get_job(self, *args)

    def get_curr_job(self, *args):
        return _sim_services.Executive_get_curr_job(self, *args)

    def get_job_cycle(self, *args):
        return _sim_services.Executive_get_job_cycle(self, *args)

    def set_job_onoff(self, *args):
        return _sim_services.Executive_set_job_onoff(self, *args)

    def set_job_cycle(self, *args):
        return _sim_services.Executive_set_job_cycle(self, *args)

    def set_sim_object_jobs_onoff(self, *args):
        return _sim_services.Executive_set_sim_object_jobs_onoff(self, *args)

    def set_sim_object_onoff(self, *args):
        return _sim_services.Executive_set_sim_object_onoff(self, *args)

    def get_sim_object_onoff(self, *args):
        return _sim_services.Executive_get_sim_object_onoff(self, *args)

    def set_version_date_tag(self, *args):
        return _sim_services.Executive_set_version_date_tag(self, *args)

    def set_build_date(self, *args):
        return _sim_services.Executive_set_build_date(self, *args)

    def set_current_version(self, *args):
        return _sim_services.Executive_set_current_version(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Executive_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Executive_init(self, *args)

    def call_default_data(self, *args):
        return _sim_services.Executive_call_default_data(self, *args)

    def call_input_processor(self, *args):
        return _sim_services.Executive_call_input_processor(self, *args)

    def call_initialization(self, *args):
        return _sim_services.Executive_call_initialization(self, *args)

    def checkpoint(self, *args):
        return _sim_services.Executive_checkpoint(self, *args)

    def post_checkpoint(self, *args):
        return _sim_services.Executive_post_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.Executive_restart(self, *args)

    def clear_scheduled_queues(self, *args):
        return _sim_services.Executive_clear_scheduled_queues(self, *args)

    def write_s_run_summary(self, *args):
        return _sim_services.Executive_write_s_run_summary(self, *args)

    def create_threads(self, *args):
        return _sim_services.Executive_create_threads(self, *args)

    def loop(self, *args):
        return _sim_services.Executive_loop(self, *args)

    def loop_multi_thread(self, *args):
        return _sim_services.Executive_loop_multi_thread(self, *args)

    def loop_single_thread(self, *args):
        return _sim_services.Executive_loop_single_thread(self, *args)

    def async_freeze_to_exec_command(self, *args):
        return _sim_services.Executive_async_freeze_to_exec_command(self, *args)

    def sched_freeze_to_exec_command(self, *args):
        return _sim_services.Executive_sched_freeze_to_exec_command(self, *args)

    def advance_sim_time(self, *args):
        return _sim_services.Executive_advance_sim_time(self, *args)

    def thread_sync(self, *args):
        return _sim_services.Executive_thread_sync(self, *args)

    def scheduled_thread_sync(self, *args):
        return _sim_services.Executive_scheduled_thread_sync(self, *args)

    def init_freeze_scheduled(self, *args):
        return _sim_services.Executive_init_freeze_scheduled(self, *args)

    def freeze_loop(self, *args):
        return _sim_services.Executive_freeze_loop(self, *args)

    def shutdown(self, *args):
        return _sim_services.Executive_shutdown(self, *args)

    def add_scheduled_job_class(self, *args):
        return _sim_services.Executive_add_scheduled_job_class(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.Executive_add_sim_object(self, *args)

    def add_jobs_to_queue(self, *args):
        return _sim_services.Executive_add_jobs_to_queue(self, *args)

    def add_job_to_queue(self, *args):
        return _sim_services.Executive_add_job_to_queue(self, *args)

    def delete_sim_object(self, *args):
        return _sim_services.Executive_delete_sim_object(self, *args)

    def remove_jobs(self, *args):
        return _sim_services.Executive_remove_jobs(self, *args)

    def add_depends_on_job(self, *args):
        return _sim_services.Executive_add_depends_on_job(self, *args)

    def check_all_jobs_handled(self, *args):
        return _sim_services.Executive_check_all_jobs_handled(self, *args)

    def check_all_job_cycle_times(self, *args):
        return _sim_services.Executive_check_all_job_cycle_times(self, *args)

    def init_signal_handlers(self, *args):
        return _sim_services.Executive_init_signal_handlers(self, *args)

    def signal_handler(self, *args):
        return _sim_services.Executive_signal_handler(self, *args)

    def ctrl_c_handler(self, *args):
        return _sim_services.Executive_ctrl_c_handler(self, *args)

    def term_handler(self, *args):
        return _sim_services.Executive_term_handler(self, *args)

    def usr1_handler(self, *args):
        return _sim_services.Executive_usr1_handler(self, *args)

    def fpe_handler(self, *args):
        return _sim_services.Executive_fpe_handler(self, *args)

    def get_thread(self, *args):
        return _sim_services.Executive_get_thread(self, *args)

    def set_thread_enabled(self, *args):
        return _sim_services.Executive_set_thread_enabled(self, *args)

    def set_thread_process_type(self, *args):
        return _sim_services.Executive_set_thread_process_type(self, *args)

    def set_thread_amf_cycle_time(self, *args):
        return _sim_services.Executive_set_thread_amf_cycle_time(self, *args)

    def set_thread_async_wait(self, *args):
        return _sim_services.Executive_set_thread_async_wait(self, *args)

    def set_thread_rt_semaphores(self, *args):
        return _sim_services.Executive_set_thread_rt_semaphores(self, *args)

    def set_thread_priority(self, *args):
        return _sim_services.Executive_set_thread_priority(self, *args)

    def set_thread_cpu_affinity(self, *args):
        return _sim_services.Executive_set_thread_cpu_affinity(self, *args)

    def run(self, *args):
        return _sim_services.Executive_run(self, *args)

    def freeze(self, *args):
        return _sim_services.Executive_freeze(self, *args)

    def stop(self, *args):
        return _sim_services.Executive_stop(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.Executive_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.Executive_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.Executive_instrument_job_remove(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.Executive_write_s_job_execution(self, *args)

    def register_scheduler(self, *args):
        return _sim_services.Executive_register_scheduler(self, *args)

    def exec_terminate(self, *args):
        return _sim_services.Executive_exec_terminate(self, *args)

# Register Executive in _sim_services:
_sim_services.Executive_swigregister(Executive)

class ExecutiveException(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ret_code = property(_sim_services.ExecutiveException_ret_code_get, _sim_services.ExecutiveException_ret_code_set)
    file = property(_sim_services.ExecutiveException_file_get, _sim_services.ExecutiveException_file_set)
    message = property(_sim_services.ExecutiveException_message_get, _sim_services.ExecutiveException_message_set)

    def __init__(self, *args):
        _sim_services.ExecutiveException_swiginit(self, _sim_services.new_ExecutiveException(*args))
    __swig_destroy__ = _sim_services.delete_ExecutiveException

    def what(self, *args):
        return _sim_services.ExecutiveException_what(self, *args)

# Register ExecutiveException in _sim_services:
_sim_services.ExecutiveException_swigregister(ExecutiveException)


def exec_get_attach_debugger(*args):
    return _sim_services.exec_get_attach_debugger(*args)

def exec_get_current_version(*args):
    return _sim_services.exec_get_current_version(*args)

def exec_get_debugger_command(*args):
    return _sim_services.exec_get_debugger_command(*args)

def exec_get_enable_freeze(*args):
    return _sim_services.exec_get_enable_freeze(*args)

def exec_get_exec_command(*args):
    return _sim_services.exec_get_exec_command(*args)

def exec_get_frame_count(*args):
    return _sim_services.exec_get_frame_count(*args)

def exec_get_freeze_frame(*args):
    return _sim_services.exec_get_freeze_frame(*args)

def exec_get_freeze_frame_count(*args):
    return _sim_services.exec_get_freeze_frame_count(*args)

def exec_get_freeze_command(*args):
    return _sim_services.exec_get_freeze_command(*args)

def exec_get_freeze_on_frame_boundary(*args):
    return _sim_services.exec_get_freeze_on_frame_boundary(*args)

def exec_get_freeze_frame_tics(*args):
    return _sim_services.exec_get_freeze_frame_tics(*args)

def exec_get_freeze_time_tics(*args):
    return _sim_services.exec_get_freeze_time_tics(*args)

def exec_get_job_cycle(*args):
    return _sim_services.exec_get_job_cycle(*args)

def exec_get_mode(*args):
    return _sim_services.exec_get_mode(*args)

def exec_get_num_threads(*args):
    return _sim_services.exec_get_num_threads(*args)

def exec_get_old_time_tic_value(*args):
    return _sim_services.exec_get_old_time_tic_value(*args)

def exec_get_process_id(*args):
    return _sim_services.exec_get_process_id(*args)

def exec_get_rt_nap(*args):
    return _sim_services.exec_get_rt_nap(*args)

def exec_get_scheduled_start_index(*args):
    return _sim_services.exec_get_scheduled_start_index(*args)

def exec_get_sim_time(*args):
    return _sim_services.exec_get_sim_time(*args)

def exec_get_software_frame(*args):
    return _sim_services.exec_get_software_frame(*args)

def exec_get_software_frame_tics(*args):
    return _sim_services.exec_get_software_frame_tics(*args)

def exec_get_stack_trace(*args):
    return _sim_services.exec_get_stack_trace(*args)

def exec_get_terminate_time(*args):
    return _sim_services.exec_get_terminate_time(*args)

def exec_get_thread_amf_cycle_time(*args):
    return _sim_services.exec_get_thread_amf_cycle_time(*args)

def exec_get_time_tic_value(*args):
    return _sim_services.exec_get_time_tic_value(*args)

def exec_get_time_tics(*args):
    return _sim_services.exec_get_time_tics(*args)

def exec_get_trap_sigbus(*args):
    return _sim_services.exec_get_trap_sigbus(*args)

def exec_get_trap_sigfpe(*args):
    return _sim_services.exec_get_trap_sigfpe(*args)

def exec_get_trap_sigsegv(*args):
    return _sim_services.exec_get_trap_sigsegv(*args)

def exec_get_trap_sigabrt(*args):
    return _sim_services.exec_get_trap_sigabrt(*args)

def exec_get_trap_sigchld(*args):
    return _sim_services.exec_get_trap_sigchld(*args)

def exec_set_attach_debugger(*args):
    return _sim_services.exec_set_attach_debugger(*args)

def exec_set_debugger_command(*args):
    return _sim_services.exec_set_debugger_command(*args)

def exec_set_exec_command(*args):
    return _sim_services.exec_set_exec_command(*args)

def exec_set_freeze_command(*args):
    return _sim_services.exec_set_freeze_command(*args)

def exec_set_freeze_on_frame_boundary(*args):
    return _sim_services.exec_set_freeze_on_frame_boundary(*args)

def exec_set_freeze_frame(*args):
    return _sim_services.exec_set_freeze_frame(*args)

def exec_set_enable_freeze(*args):
    return _sim_services.exec_set_enable_freeze(*args)

def exec_set_job_cycle(*args):
    return _sim_services.exec_set_job_cycle(*args)

def exec_set_job_onoff(*args):
    return _sim_services.exec_set_job_onoff(*args)

def exec_set_rt_nap(*args):
    return _sim_services.exec_set_rt_nap(*args)

def exec_set_sim_object_onoff(*args):
    return _sim_services.exec_set_sim_object_onoff(*args)

def exec_set_software_frame(*args):
    return _sim_services.exec_set_software_frame(*args)

def exec_set_stack_trace(*args):
    return _sim_services.exec_set_stack_trace(*args)

def exec_set_terminate_time(*args):
    return _sim_services.exec_set_terminate_time(*args)

def exec_set_thread_enabled(*args):
    return _sim_services.exec_set_thread_enabled(*args)

def exec_set_thread_amf_cycle_time(*args):
    return _sim_services.exec_set_thread_amf_cycle_time(*args)

def exec_set_thread_async_cycle_time(*args):
    return _sim_services.exec_set_thread_async_cycle_time(*args)

def exec_set_thread_async_wait(*args):
    return _sim_services.exec_set_thread_async_wait(*args)

def exec_set_thread_rt_semaphores(*args):
    return _sim_services.exec_set_thread_rt_semaphores(*args)

def exec_set_thread_cpu_affinity(*args):
    return _sim_services.exec_set_thread_cpu_affinity(*args)

def exec_set_thread_priority(*args):
    return _sim_services.exec_set_thread_priority(*args)

def exec_set_thread_process_type(*args):
    return _sim_services.exec_set_thread_process_type(*args)

def exec_set_time(*args):
    return _sim_services.exec_set_time(*args)

def exec_set_time_tics(*args):
    return _sim_services.exec_set_time_tics(*args)

def exec_set_time_tic_value(*args):
    return _sim_services.exec_set_time_tic_value(*args)

def exec_set_trap_sigbus(*args):
    return _sim_services.exec_set_trap_sigbus(*args)

def exec_set_trap_sigfpe(*args):
    return _sim_services.exec_set_trap_sigfpe(*args)

def exec_set_trap_sigsegv(*args):
    return _sim_services.exec_set_trap_sigsegv(*args)

def exec_set_trap_sigabrt(*args):
    return _sim_services.exec_set_trap_sigabrt(*args)

def exec_set_trap_sigchld(*args):
    return _sim_services.exec_set_trap_sigchld(*args)

def exec_set_version_date_tag(*args):
    return _sim_services.exec_set_version_date_tag(*args)

def exec_set_build_date(*args):
    return _sim_services.exec_set_build_date(*args)

def exec_set_current_version(*args):
    return _sim_services.exec_set_current_version(*args)

def exec_freeze(*args):
    return _sim_services.exec_freeze(*args)

def exec_run(*args):
    return _sim_services.exec_run(*args)

def exec_signal_terminate(*args):
    return _sim_services.exec_signal_terminate(*args)

def exec_terminate(*args):
    return _sim_services.exec_terminate(*args)

def exec_terminate_with_return(*args):
    return _sim_services.exec_terminate_with_return(*args)

def exec_instrument_before(*args):
    return _sim_services.exec_instrument_before(*args)

def exec_instrument_after(*args):
    return _sim_services.exec_instrument_after(*args)

def exec_instrument_remove(*args):
    return _sim_services.exec_instrument_remove(*args)

def exec_add_scheduled_job_class(*args):
    return _sim_services.exec_add_scheduled_job_class(*args)

def exec_add_depends_on_job(*args):
    return _sim_services.exec_add_depends_on_job(*args)

def exec_get_exec_cpp(*args):
    return _sim_services.exec_get_exec_cpp(*args)

def exec_add_sim_object(*args):
    return _sim_services.exec_add_sim_object(*args)

def exec_remove_sim_object(*args):
    return _sim_services.exec_remove_sim_object(*args)

def exec_get_sim_objects(*args):
    return _sim_services.exec_get_sim_objects(*args)

def exec_get_job(*args):
    return _sim_services.exec_get_job(*args)

def exec_get_curr_job(*args):
    return _sim_services.exec_get_curr_job(*args)

def exec_get_thread(*args):
    return _sim_services.exec_get_thread(*args)

def exec_get_all_jobs_vector(*args):
    return _sim_services.exec_get_all_jobs_vector(*args)

def exec_register_scheduler(*args):
    return _sim_services.exec_register_scheduler(*args)
class ExternalApplication(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CLOSE = _sim_services.ExternalApplication_CLOSE
    NOTIFY = _sim_services.ExternalApplication_NOTIFY
    NOTHING = _sim_services.ExternalApplication_NOTHING

    def __init__(self, *args):
        _sim_services.ExternalApplication_swiginit(self, _sim_services.new_ExternalApplication(*args))
    __swig_destroy__ = _sim_services.delete_ExternalApplication

    def set_startup_command(self, *args):
        return _sim_services.ExternalApplication_set_startup_command(self, *args)

    def get_startup_command(self, *args):
        return _sim_services.ExternalApplication_get_startup_command(self, *args)

    def get_startup_command_c_str(self, *args):
        return _sim_services.ExternalApplication_get_startup_command_c_str(self, *args)

    def add_arguments(self, *args):
        return _sim_services.ExternalApplication_add_arguments(self, *args)

    def set_arguments(self, *args):
        return _sim_services.ExternalApplication_set_arguments(self, *args)

    def get_arguments(self, *args):
        return _sim_services.ExternalApplication_get_arguments(self, *args)

    def set_host(self, *args):
        return _sim_services.ExternalApplication_set_host(self, *args)

    def get_host(self, *args):
        return _sim_services.ExternalApplication_get_host(self, *args)

    def set_port(self, *args):
        return _sim_services.ExternalApplication_set_port(self, *args)

    def get_port(self, *args):
        return _sim_services.ExternalApplication_get_port(self, *args)

    def set_auto_reconnect(self, *args):
        return _sim_services.ExternalApplication_set_auto_reconnect(self, *args)

    def get_auto_reconnect(self, *args):
        return _sim_services.ExternalApplication_get_auto_reconnect(self, *args)

    def set_cycle_period(self, *args):
        return _sim_services.ExternalApplication_set_cycle_period(self, *args)

    def get_cycle_period(self, *args):
        return _sim_services.ExternalApplication_get_cycle_period(self, *args)

    def set_minimum_cycle_period(self, *args):
        return _sim_services.ExternalApplication_set_minimum_cycle_period(self, *args)

    def get_minimum_cycle_period(self, *args):
        return _sim_services.ExternalApplication_get_minimum_cycle_period(self, *args)

    def set_disconnect_behavior(self, *args):
        return _sim_services.ExternalApplication_set_disconnect_behavior(self, *args)

    def get_disconnect_behavior(self, *args):
        return _sim_services.ExternalApplication_get_disconnect_behavior(self, *args)

    def set_height(self, *args):
        return _sim_services.ExternalApplication_set_height(self, *args)

    def get_height(self, *args):
        return _sim_services.ExternalApplication_get_height(self, *args)

    def set_width(self, *args):
        return _sim_services.ExternalApplication_set_width(self, *args)

    def get_width(self, *args):
        return _sim_services.ExternalApplication_get_width(self, *args)

    def set_x(self, *args):
        return _sim_services.ExternalApplication_set_x(self, *args)

    def get_x(self, *args):
        return _sim_services.ExternalApplication_get_x(self, *args)

    def set_y(self, *args):
        return _sim_services.ExternalApplication_set_y(self, *args)

    def get_y(self, *args):
        return _sim_services.ExternalApplication_get_y(self, *args)

    def launch(self, *args):
        return _sim_services.ExternalApplication_launch(self, *args)

# Register ExternalApplication in _sim_services:
_sim_services.ExternalApplication_swigregister(ExternalApplication)

class MalfunctionsTrickView(ExternalApplication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MalfunctionsTrickView_swiginit(self, _sim_services.new_MalfunctionsTrickView(*args))
    __swig_destroy__ = _sim_services.delete_MalfunctionsTrickView

# Register MalfunctionsTrickView in _sim_services:
_sim_services.MalfunctionsTrickView_swigregister(MalfunctionsTrickView)

class MonteMonitor(ExternalApplication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteMonitor_swiginit(self, _sim_services.new_MonteMonitor(*args))
    __swig_destroy__ = _sim_services.delete_MonteMonitor

# Register MonteMonitor in _sim_services:
_sim_services.MonteMonitor_swigregister(MonteMonitor)

class SimControlPanel(ExternalApplication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.SimControlPanel_swiginit(self, _sim_services.new_SimControlPanel(*args))
    auto_exit = property(_sim_services.SimControlPanel_auto_exit_get, _sim_services.SimControlPanel_auto_exit_set)
    __swig_destroy__ = _sim_services.delete_SimControlPanel

# Register SimControlPanel in _sim_services:
_sim_services.SimControlPanel_swigregister(SimControlPanel)

class StripChart(ExternalApplication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.StripChart_swiginit(self, _sim_services.new_StripChart(*args))

    def set_arguments(self, *args):
        return _sim_services.StripChart_set_arguments(self, *args)

    def set_input_file(self, *args):
        return _sim_services.StripChart_set_input_file(self, *args)

    def get_input_file(self, *args):
        return _sim_services.StripChart_get_input_file(self, *args)
    __swig_destroy__ = _sim_services.delete_StripChart

# Register StripChart in _sim_services:
_sim_services.StripChart_swigregister(StripChart)

class TrickView(ExternalApplication):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.TrickView_swiginit(self, _sim_services.new_TrickView(*args))

    def set_arguments(self, *args):
        return _sim_services.TrickView_set_arguments(self, *args)

    def set_strip_charts_only(self, *args):
        return _sim_services.TrickView_set_strip_charts_only(self, *args)

    def get_strip_charts_only(self, *args):
        return _sim_services.TrickView_get_strip_charts_only(self, *args)

    def set_auto_open_file(self, *args):
        return _sim_services.TrickView_set_auto_open_file(self, *args)

    def get_auto_open_file(self, *args):
        return _sim_services.TrickView_get_auto_open_file(self, *args)

    def set_auto_open_and_set_file(self, *args):
        return _sim_services.TrickView_set_auto_open_and_set_file(self, *args)

    def get_auto_open_and_set_file(self, *args):
        return _sim_services.TrickView_get_auto_open_and_set_file(self, *args)

    def set_auto_set_file(self, *args):
        return _sim_services.TrickView_set_auto_set_file(self, *args)

    def get_auto_set_file(self, *args):
        return _sim_services.TrickView_get_auto_set_file(self, *args)
    __swig_destroy__ = _sim_services.delete_TrickView

# Register TrickView in _sim_services:
_sim_services.TrickView_swigregister(TrickView)


def get_external_applications(*args):
    return _sim_services.get_external_applications(*args)

def add_external_application(*args):
    return _sim_services.add_external_application(*args)

def remove_external_application(*args):
    return _sim_services.remove_external_application(*args)

def remove_all_external_applications(*args):
    return _sim_services.remove_all_external_applications(*args)

def launch_all_external_applications(*args):
    return _sim_services.launch_all_external_applications(*args)

def sim_control_panel_set_enabled(*args):
    return _sim_services.sim_control_panel_set_enabled(*args)

def sim_control_panel_get_enabled(*args):
    return _sim_services.sim_control_panel_get_enabled(*args)

def sim_control_panel_auto_exit_set_enabled(*args):
    return _sim_services.sim_control_panel_auto_exit_set_enabled(*args)

def trick_view_set_enabled(*args):
    return _sim_services.trick_view_set_enabled(*args)

def trick_view_get_enabled(*args):
    return _sim_services.trick_view_get_enabled(*args)

def malfunctions_trick_view_set_enabled(*args):
    return _sim_services.malfunctions_trick_view_set_enabled(*args)

def malfunctions_trick_view_get_enabled(*args):
    return _sim_services.malfunctions_trick_view_get_enabled(*args)

def monte_monitor_set_enabled(*args):
    return _sim_services.monte_monitor_set_enabled(*args)

def monte_monitor_get_enabled(*args):
    return _sim_services.monte_monitor_get_enabled(*args)

def stripchart_set_enabled(*args):
    return _sim_services.stripchart_set_enabled(*args)

def stripchart_get_enabled(*args):
    return _sim_services.stripchart_get_enabled(*args)

def sim_control_panel_set_startup_command(*args):
    return _sim_services.sim_control_panel_set_startup_command(*args)

def sim_control_panel_get_startup_command(*args):
    return _sim_services.sim_control_panel_get_startup_command(*args)

def trick_view_set_startup_command(*args):
    return _sim_services.trick_view_set_startup_command(*args)

def trick_view_get_startup_command(*args):
    return _sim_services.trick_view_get_startup_command(*args)

def malfunctions_trick_view_set_startup_command(*args):
    return _sim_services.malfunctions_trick_view_set_startup_command(*args)

def malfunctions_trick_view_get_startup_command(*args):
    return _sim_services.malfunctions_trick_view_get_startup_command(*args)

def monte_monitor_set_startup_command(*args):
    return _sim_services.monte_monitor_set_startup_command(*args)

def monte_monitor_get_startup_command(*args):
    return _sim_services.monte_monitor_get_startup_command(*args)

def stripchart_set_startup_command(*args):
    return _sim_services.stripchart_set_startup_command(*args)

def stripchart_get_startup_command(*args):
    return _sim_services.stripchart_get_startup_command(*args)

def sim_control_panel_launch(*args):
    return _sim_services.sim_control_panel_launch(*args)

def trick_view_launch(*args):
    return _sim_services.trick_view_launch(*args)

def malfunctions_trick_view_launch(*args):
    return _sim_services.malfunctions_trick_view_launch(*args)

def monte_monitor_launch(*args):
    return _sim_services.monte_monitor_launch(*args)

def stripchart_launch(*args):
    return _sim_services.stripchart_launch(*args)

def trick_view_set_cycle_period(*args):
    return _sim_services.trick_view_set_cycle_period(*args)

def trick_view_add_auto_load_file(*args):
    return _sim_services.trick_view_add_auto_load_file(*args)
class VAR_DECLARE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_pointers = property(_sim_services.VAR_DECLARE_num_pointers_get, _sim_services.VAR_DECLARE_num_pointers_set)
    name = property(_sim_services.VAR_DECLARE_name_get, _sim_services.VAR_DECLARE_name_set)
    dim_list = property(_sim_services.VAR_DECLARE_dim_list_get, _sim_services.VAR_DECLARE_dim_list_set)
    value = property(_sim_services.VAR_DECLARE_value_get, _sim_services.VAR_DECLARE_value_set)

    def __init__(self):
        _sim_services.VAR_DECLARE_swiginit(self, _sim_services.new_VAR_DECLARE())
    __swig_destroy__ = _sim_services.delete_VAR_DECLARE

# Register VAR_DECLARE in _sim_services:
_sim_services.VAR_DECLARE_swigregister(VAR_DECLARE)

class VAR_LIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_vars = property(_sim_services.VAR_LIST_num_vars_get, _sim_services.VAR_LIST_num_vars_set)
    var_declare = property(_sim_services.VAR_LIST_var_declare_get, _sim_services.VAR_LIST_var_declare_set)

    def __init__(self):
        _sim_services.VAR_LIST_swiginit(self, _sim_services.new_VAR_LIST())
    __swig_destroy__ = _sim_services.delete_VAR_LIST

# Register VAR_LIST in _sim_services:
_sim_services.VAR_LIST_swigregister(VAR_LIST)

TRICK_LOCAL = _sim_services.TRICK_LOCAL
TRICK_EXTERN = _sim_services.TRICK_EXTERN
TRICK_ALLOC_MALLOC = _sim_services.TRICK_ALLOC_MALLOC
TRICK_ALLOC_NEW = _sim_services.TRICK_ALLOC_NEW
TRICK_ALLOC_OTHER = _sim_services.TRICK_ALLOC_OTHER
class ALLOC_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_sim_services.ALLOC_INFO_start_get, _sim_services.ALLOC_INFO_start_set)
    end = property(_sim_services.ALLOC_INFO_end_get, _sim_services.ALLOC_INFO_end_set)
    name = property(_sim_services.ALLOC_INFO_name_get, _sim_services.ALLOC_INFO_name_set)
    size = property(_sim_services.ALLOC_INFO_size_get, _sim_services.ALLOC_INFO_size_set)
    sentinel_bytes = property(_sim_services.ALLOC_INFO_sentinel_bytes_get, _sim_services.ALLOC_INFO_sentinel_bytes_set)
    language = property(_sim_services.ALLOC_INFO_language_get, _sim_services.ALLOC_INFO_language_set)
    type = property(_sim_services.ALLOC_INFO_type_get, _sim_services.ALLOC_INFO_type_set)
    stcl = property(_sim_services.ALLOC_INFO_stcl_get, _sim_services.ALLOC_INFO_stcl_set)
    alloc_type = property(_sim_services.ALLOC_INFO_alloc_type_get, _sim_services.ALLOC_INFO_alloc_type_set)
    user_type_name = property(_sim_services.ALLOC_INFO_user_type_name_get, _sim_services.ALLOC_INFO_user_type_name_set)
    attr = property(_sim_services.ALLOC_INFO_attr_get, _sim_services.ALLOC_INFO_attr_set)
    num = property(_sim_services.ALLOC_INFO_num_get, _sim_services.ALLOC_INFO_num_set)
    num_index = property(_sim_services.ALLOC_INFO_num_index_get, _sim_services.ALLOC_INFO_num_index_set)
    index = property(_sim_services.ALLOC_INFO_index_get, _sim_services.ALLOC_INFO_index_set)
    id = property(_sim_services.ALLOC_INFO_id_get, _sim_services.ALLOC_INFO_id_set)
    alloced_in_memory_init = property(_sim_services.ALLOC_INFO_alloced_in_memory_init_get, _sim_services.ALLOC_INFO_alloced_in_memory_init_set)

    def __init__(self):
        _sim_services.ALLOC_INFO_swiginit(self, _sim_services.new_ALLOC_INFO())
    __swig_destroy__ = _sim_services.delete_ALLOC_INFO

# Register ALLOC_INFO in _sim_services:
_sim_services.ALLOC_INFO_swigregister(ALLOC_INFO)


def TMM_declare_var(*args):
    return _sim_services.TMM_declare_var(*args)

def TMM_declare_var_1d(*args):
    return _sim_services.TMM_declare_var_1d(*args)

def TMM_declare_var_s(*args):
    return _sim_services.TMM_declare_var_s(*args)

def alloc_type(*args):
    return _sim_services.alloc_type(*args)

def TMM_declare_operatornew_var(*args):
    return _sim_services.TMM_declare_operatornew_var(*args)

def TMM_declare_ext_var(*args):
    return _sim_services.TMM_declare_ext_var(*args)

def TMM_declare_ext_var_1d(*args):
    return _sim_services.TMM_declare_ext_var_1d(*args)

def TMM_declare_ext_var_s(*args):
    return _sim_services.TMM_declare_ext_var_s(*args)

def TMM_resize_array_a(*args):
    return _sim_services.TMM_resize_array_a(*args)

def TMM_resize_array_n(*args):
    return _sim_services.TMM_resize_array_n(*args)

def TMM_resize_array_1d_a(*args):
    return _sim_services.TMM_resize_array_1d_a(*args)

def TMM_resize_array_1d_n(*args):
    return _sim_services.TMM_resize_array_1d_n(*args)

def TMM_strdup(*args):
    return _sim_services.TMM_strdup(*args)

def TMM_var_exists(*args):
    return _sim_services.TMM_var_exists(*args)

def TMM_is_alloced(*args):
    return _sim_services.TMM_is_alloced(*args)

def TMM_set_debug_level(*args):
    return _sim_services.TMM_set_debug_level(*args)

def TMM_reduced_checkpoint(*args):
    return _sim_services.TMM_reduced_checkpoint(*args)

def TMM_hexfloat_checkpoint(*args):
    return _sim_services.TMM_hexfloat_checkpoint(*args)

def TMM_clear_var_a(*args):
    return _sim_services.TMM_clear_var_a(*args)

def TMM_clear_var_n(*args):
    return _sim_services.TMM_clear_var_n(*args)

def TMM_delete_var_a(*args):
    return _sim_services.TMM_delete_var_a(*args)

def TMM_delete_var_n(*args):
    return _sim_services.TMM_delete_var_n(*args)

def TMM_delete_extern_var_a(*args):
    return _sim_services.TMM_delete_extern_var_a(*args)

def TMM_delete_extern_var_n(*args):
    return _sim_services.TMM_delete_extern_var_n(*args)

def TMM_write_checkpoint(*args):
    return _sim_services.TMM_write_checkpoint(*args)

def TMM_read_checkpoint(*args):
    return _sim_services.TMM_read_checkpoint(*args)

def TMM_read_checkpoint_from_string(*args):
    return _sim_services.TMM_read_checkpoint_from_string(*args)

def TMM_init_from_checkpoint(*args):
    return _sim_services.TMM_init_from_checkpoint(*args)

def TMM_add_shared_library_symbols(*args):
    return _sim_services.TMM_add_shared_library_symbols(*args)

def TMM_set_stl_restore(*args):
    return _sim_services.TMM_set_stl_restore(*args)

def ref_attributes(*args):
    return _sim_services.ref_attributes(*args)

def ref_var(*args):
    return _sim_services.ref_var(*args)

def get_size(*args):
    return _sim_services.get_size(*args)

def add_var(*args):
    return _sim_services.add_var(*args)

def add_vars(*args):
    return _sim_services.add_vars(*args)

def follow_address_path(*args):
    return _sim_services.follow_address_path(*args)

def ref_allocate(*args):
    return _sim_services.ref_allocate(*args)

def ref_assignment(*args):
    return _sim_services.ref_assignment(*args)

def get_truncated_size(*args):
    return _sim_services.get_truncated_size(*args)

def io_get_fixed_truncated_size(*args):
    return _sim_services.io_get_fixed_truncated_size(*args)

def get_alloc_info_of(*args):
    return _sim_services.get_alloc_info_of(*args)

def get_alloc_info_at(*args):
    return _sim_services.get_alloc_info_at(*args)

def set_alloc_name_at(*args):
    return _sim_services.set_alloc_name_at(*args)

def ref_free(*args):
    return _sim_services.ref_free(*args)

def get_enumerated(*args):
    return _sim_services.get_enumerated(*args)

def TMM_add_checkpoint_alloc_dependency(*args):
    return _sim_services.TMM_add_checkpoint_alloc_dependency(*args)
MM_OK = _sim_services.MM_OK
MM_ASSIGNMENT_LIST = _sim_services.MM_ASSIGNMENT_LIST
MM_ERROR = _sim_services.MM_ERROR
MM_FILE_STREAM = _sim_services.MM_FILE_STREAM
MM_FILE_STREAM_HIGH_ARG = _sim_services.MM_FILE_STREAM_HIGH_ARG
MM_INIT_GT_512_LINE = _sim_services.MM_INIT_GT_512_LINE
MM_INVALID_UNITS = _sim_services.MM_INVALID_UNITS
MM_MAX_ERROR = _sim_services.MM_MAX_ERROR
MM_PARAMETER_ARRAY_DIM = _sim_services.MM_PARAMETER_ARRAY_DIM
MM_PARAMETER_ARRAY_SIZE = _sim_services.MM_PARAMETER_ARRAY_SIZE
MM_PARAMETER_TYPE = _sim_services.MM_PARAMETER_TYPE
MM_STRUCT_NOT_ASSIGNABLE = _sim_services.MM_STRUCT_NOT_ASSIGNABLE
MM_SYNTAX_ERROR = _sim_services.MM_SYNTAX_ERROR
MM_TOO_MANY_ARRAY_DIMENSIONS = _sim_services.MM_TOO_MANY_ARRAY_DIMENSIONS
MM_UNCLOSED_COMMENT = _sim_services.MM_UNCLOSED_COMMENT
MM_UNDEFINED_REFERENCE = _sim_services.MM_UNDEFINED_REFERENCE
MM_UNTERMINATED_STRING = _sim_services.MM_UNTERMINATED_STRING
BASE_NAME = _sim_services.BASE_NAME
ELEM_NAME = _sim_services.ELEM_NAME
ARRAY_INDEX = _sim_services.ARRAY_INDEX
class VarNameElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_sim_services.VarNameElement_type_get, _sim_services.VarNameElement_type_set)
    index = property(_sim_services.VarNameElement_index_get, _sim_services.VarNameElement_index_set)
    name = property(_sim_services.VarNameElement_name_get, _sim_services.VarNameElement_name_set)

    def __init__(self):
        _sim_services.VarNameElement_swiginit(self, _sim_services.new_VarNameElement())
    __swig_destroy__ = _sim_services.delete_VarNameElement

# Register VarNameElement in _sim_services:
_sim_services.VarNameElement_swigregister(VarNameElement)

class CheckPointAgent(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_CheckPointAgent

    def input_perm_check(self, *args):
        return _sim_services.CheckPointAgent_input_perm_check(self, *args)

    def output_perm_check(self, *args):
        return _sim_services.CheckPointAgent_output_perm_check(self, *args)

    def write_decl(self, *args):
        return _sim_services.CheckPointAgent_write_decl(self, *args)

    def push_basename(self, *args):
        return _sim_services.CheckPointAgent_push_basename(self, *args)

    def push_struct_elem(self, *args):
        return _sim_services.CheckPointAgent_push_struct_elem(self, *args)

    def push_array_elem(self, *args):
        return _sim_services.CheckPointAgent_push_array_elem(self, *args)

    def pop_elem(self, *args):
        return _sim_services.CheckPointAgent_pop_elem(self, *args)

    def assign_rvalue(self, *args):
        return _sim_services.CheckPointAgent_assign_rvalue(self, *args)

    def restore(self, *args):
        return _sim_services.CheckPointAgent_restore(self, *args)

    def set_reduced_checkpoint(self, *args):
        return _sim_services.CheckPointAgent_set_reduced_checkpoint(self, *args)

    def set_hexfloat_checkpoint(self, *args):
        return _sim_services.CheckPointAgent_set_hexfloat_checkpoint(self, *args)

    def set_debug_level(self, *args):
        return _sim_services.CheckPointAgent_set_debug_level(self, *args)
    reduced_checkpoint = property(_sim_services.CheckPointAgent_reduced_checkpoint_get, _sim_services.CheckPointAgent_reduced_checkpoint_set)
    hexfloat_checkpoint = property(_sim_services.CheckPointAgent_hexfloat_checkpoint_get, _sim_services.CheckPointAgent_hexfloat_checkpoint_set)
    debug_level = property(_sim_services.CheckPointAgent_debug_level_get, _sim_services.CheckPointAgent_debug_level_set)
    leftside_stack = property(_sim_services.CheckPointAgent_leftside_stack_get, _sim_services.CheckPointAgent_leftside_stack_set)

# Register CheckPointAgent in _sim_services:
_sim_services.CheckPointAgent_swigregister(CheckPointAgent)

class MemoryManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MemoryManager_swiginit(self, _sim_services.new_MemoryManager(*args))
    __swig_destroy__ = _sim_services.delete_MemoryManager

    def declare_var(self, *args):
        return _sim_services.MemoryManager_declare_var(self, *args)

    def declare_operatornew_var(self, *args):
        return _sim_services.MemoryManager_declare_operatornew_var(self, *args)

    def declare_extern_var(self, *args):
        return _sim_services.MemoryManager_declare_extern_var(self, *args)

    def resize_array(self, *args):
        return _sim_services.MemoryManager_resize_array(self, *args)

    def mm_strdup(self, *args):
        return _sim_services.MemoryManager_mm_strdup(self, *args)

    def var_exists(self, *args):
        return _sim_services.MemoryManager_var_exists(self, *args)

    def sizeof_type(self, *args):
        return _sim_services.MemoryManager_sizeof_type(self, *args)

    def is_alloced(self, *args):
        return _sim_services.MemoryManager_is_alloced(self, *args)

    def set_debug_level(self, *args):
        return _sim_services.MemoryManager_set_debug_level(self, *args)

    def set_expanded_arrays(self, *args):
        return _sim_services.MemoryManager_set_expanded_arrays(self, *args)

    def set_reduced_checkpoint(self, *args):
        return _sim_services.MemoryManager_set_reduced_checkpoint(self, *args)

    def set_hexfloat_checkpoint(self, *args):
        return _sim_services.MemoryManager_set_hexfloat_checkpoint(self, *args)

    def clear_var(self, *args):
        return _sim_services.MemoryManager_clear_var(self, *args)

    def clear_all_vars(self, *args):
        return _sim_services.MemoryManager_clear_all_vars(self, *args)

    def delete_var(self, *args):
        return _sim_services.MemoryManager_delete_var(self, *args)

    def delete_extern_var(self, *args):
        return _sim_services.MemoryManager_delete_extern_var(self, *args)

    def write_checkpoint(self, *args):
        return _sim_services.MemoryManager_write_checkpoint(self, *args)

    def read_checkpoint(self, *args):
        return _sim_services.MemoryManager_read_checkpoint(self, *args)

    def read_checkpoint_from_string(self, *args):
        return _sim_services.MemoryManager_read_checkpoint_from_string(self, *args)

    def init_from_checkpoint(self, *args):
        return _sim_services.MemoryManager_init_from_checkpoint(self, *args)

    def reset_memory(self, *args):
        return _sim_services.MemoryManager_reset_memory(self, *args)

    def add_attr_info(self, *args):
        return _sim_services.MemoryManager_add_attr_info(self, *args)

    def add_template_name_trans(self, *args):
        return _sim_services.MemoryManager_add_template_name_trans(self, *args)

    def add_var(self, *args):
        return _sim_services.MemoryManager_add_var(self, *args)

    def add_vars(self, *args):
        return _sim_services.MemoryManager_add_vars(self, *args)

    def ref_allocate(self, *args):
        return _sim_services.MemoryManager_ref_allocate(self, *args)

    def ref_attributes(self, *args):
        return _sim_services.MemoryManager_ref_attributes(self, *args)

    def ref_name_from_address(self, *args):
        return _sim_services.MemoryManager_ref_name_from_address(self, *args)

    def ref_assignment(self, *args):
        return _sim_services.MemoryManager_ref_assignment(self, *args)

    def ref_var(self, *args):
        return _sim_services.MemoryManager_ref_var(self, *args)

    def ref_dim(self, *args):
        return _sim_services.MemoryManager_ref_dim(self, *args)

    def ref_name(self, *args):
        return _sim_services.MemoryManager_ref_name(self, *args)

    def get_enumerated(self, *args):
        return _sim_services.MemoryManager_get_enumerated(self, *args)

    def get_size(self, *args):
        return _sim_services.MemoryManager_get_size(self, *args)

    def get_truncated_size(self, *args):
        return _sim_services.MemoryManager_get_truncated_size(self, *args)

    def io_get_fixed_truncated_size(self, *args):
        return _sim_services.MemoryManager_io_get_fixed_truncated_size(self, *args)

    def get_alloc_info_of(self, *args):
        return _sim_services.MemoryManager_get_alloc_info_of(self, *args)

    def get_alloc_info_at(self, *args):
        return _sim_services.MemoryManager_get_alloc_info_at(self, *args)

    def set_name_at(self, *args):
        return _sim_services.MemoryManager_set_name_at(self, *args)

    def add_checkpoint_alloc_dependency(self, *args):
        return _sim_services.MemoryManager_add_checkpoint_alloc_dependency(self, *args)

    def add_shared_library_symbols(self, *args):
        return _sim_services.MemoryManager_add_shared_library_symbols(self, *args)
    dlhandles = property(_sim_services.MemoryManager_dlhandles_get, _sim_services.MemoryManager_dlhandles_set)

    def get_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_get_CheckPointAgent(self, *args)

    def set_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_set_CheckPointAgent(self, *args)

    def reset_CheckPointAgent(self, *args):
        return _sim_services.MemoryManager_reset_CheckPointAgent(self, *args)

    def write_var(self, *args):
        return _sim_services.MemoryManager_write_var(self, *args)

    def write_composite_var(self, *args):
        return _sim_services.MemoryManager_write_composite_var(self, *args)

    def write_array_var(self, *args):
        return _sim_services.MemoryManager_write_array_var(self, *args)

    def make_decl_string(self, *args):
        return _sim_services.MemoryManager_make_decl_string(self, *args)

    def io_src_sizeof_user_type(self, *args):
        return _sim_services.MemoryManager_io_src_sizeof_user_type(self, *args)

    def alloc_info_map_begin(self, *args):
        return _sim_services.MemoryManager_alloc_info_map_begin(self, *args)

    def alloc_info_map_end(self, *args):
        return _sim_services.MemoryManager_alloc_info_map_end(self, *args)

    def variable_map_begin(self, *args):
        return _sim_services.MemoryManager_variable_map_begin(self, *args)

    def variable_map_end(self, *args):
        return _sim_services.MemoryManager_variable_map_end(self, *args)
    debug_level = property(_sim_services.MemoryManager_debug_level_get, _sim_services.MemoryManager_debug_level_set)

    @staticmethod
    def emitMessage(*args):
        return _sim_services.MemoryManager_emitMessage(*args)

    @staticmethod
    def emitError(*args):
        return _sim_services.MemoryManager_emitError(*args)

    @staticmethod
    def emitWarning(*args):
        return _sim_services.MemoryManager_emitWarning(*args)

    def write_JSON_alloc_info(self, *args):
        return _sim_services.MemoryManager_write_JSON_alloc_info(self, *args)

    def write_JSON_alloc_list(self, *args):
        return _sim_services.MemoryManager_write_JSON_alloc_list(self, *args)

    def set_restore_stls_default(self, *args):
        return _sim_services.MemoryManager_set_restore_stls_default(self, *args)
    restore_stls_default = property(_sim_services.MemoryManager_restore_stls_default_get, _sim_services.MemoryManager_restore_stls_default_set)

# Register MemoryManager in _sim_services:
_sim_services.MemoryManager_swigregister(MemoryManager)

def MemoryManager_emitMessage(*args):
    return _sim_services.MemoryManager_emitMessage(*args)

def MemoryManager_emitError(*args):
    return _sim_services.MemoryManager_emitError(*args)

def MemoryManager_emitWarning(*args):
    return _sim_services.MemoryManager_emitWarning(*args)

class FrameDataRecordGroup(DRBinary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.FrameDataRecordGroup_swiginit(self, _sim_services.new_FrameDataRecordGroup(*args))

    def start_timer(self, *args):
        return _sim_services.FrameDataRecordGroup_start_timer(self, *args)

    def stop_timer(self, *args):
        return _sim_services.FrameDataRecordGroup_stop_timer(self, *args)

    def frame_log_clear(self, *args):
        return _sim_services.FrameDataRecordGroup_frame_log_clear(self, *args)

    def adjust_time(self, *args):
        return _sim_services.FrameDataRecordGroup_adjust_time(self, *args)

    def enable(self, *args):
        return _sim_services.FrameDataRecordGroup_enable(self, *args)

    def add_rec_job(self, *args):
        return _sim_services.FrameDataRecordGroup_add_rec_job(self, *args)

    def restart(self, *args):
        return _sim_services.FrameDataRecordGroup_restart(self, *args)

    def call_function(self, *args):
        return _sim_services.FrameDataRecordGroup_call_function(self, *args)
    __swig_destroy__ = _sim_services.delete_FrameDataRecordGroup

# Register FrameDataRecordGroup in _sim_services:
_sim_services.FrameDataRecordGroup_swigregister(FrameDataRecordGroup)

class timeline_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    trick_job = property(_sim_services.timeline_t_trick_job_get, _sim_services.timeline_t_trick_job_set)
    id = property(_sim_services.timeline_t_id_get, _sim_services.timeline_t_id_set)
    start = property(_sim_services.timeline_t_start_get, _sim_services.timeline_t_start_set)
    stop = property(_sim_services.timeline_t_stop_get, _sim_services.timeline_t_stop_set)

    def __init__(self):
        _sim_services.timeline_t_swiginit(self, _sim_services.new_timeline_t())
    __swig_destroy__ = _sim_services.delete_timeline_t

# Register timeline_t in _sim_services:
_sim_services.timeline_t_swigregister(timeline_t)

class FrameLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frame_log_flag = property(_sim_services.FrameLog_frame_log_flag_get, _sim_services.FrameLog_frame_log_flag_set)
    drg_users = property(_sim_services.FrameLog_drg_users_get, _sim_services.FrameLog_drg_users_set)
    drg_trick = property(_sim_services.FrameLog_drg_trick_get, _sim_services.FrameLog_drg_trick_set)
    drg_frame = property(_sim_services.FrameLog_drg_frame_get, _sim_services.FrameLog_drg_frame_set)
    plots_per_page = property(_sim_services.FrameLog_plots_per_page_get, _sim_services.FrameLog_plots_per_page_set)
    timeline = property(_sim_services.FrameLog_timeline_get, _sim_services.FrameLog_timeline_set)
    timeline_other = property(_sim_services.FrameLog_timeline_other_get, _sim_services.FrameLog_timeline_other_set)
    num_threads = property(_sim_services.FrameLog_num_threads_get, _sim_services.FrameLog_num_threads_set)
    tl_max_samples = property(_sim_services.FrameLog_tl_max_samples_get, _sim_services.FrameLog_tl_max_samples_set)
    tl_count = property(_sim_services.FrameLog_tl_count_get, _sim_services.FrameLog_tl_count_set)
    tl_other_count = property(_sim_services.FrameLog_tl_other_count_get, _sim_services.FrameLog_tl_other_count_set)
    log_init_start = property(_sim_services.FrameLog_log_init_start_get, _sim_services.FrameLog_log_init_start_set)
    log_init_end = property(_sim_services.FrameLog_log_init_end_get, _sim_services.FrameLog_log_init_end_set)
    fp_time_main = property(_sim_services.FrameLog_fp_time_main_get, _sim_services.FrameLog_fp_time_main_set)
    fp_time_other = property(_sim_services.FrameLog_fp_time_other_get, _sim_services.FrameLog_fp_time_other_set)
    time_value_attr = property(_sim_services.FrameLog_time_value_attr_get, _sim_services.FrameLog_time_value_attr_set)
    msg_sim_object_name = property(_sim_services.FrameLog_msg_sim_object_name_get, _sim_services.FrameLog_msg_sim_object_name_set)
    dr_sim_object_name = property(_sim_services.FrameLog_dr_sim_object_name_get, _sim_services.FrameLog_dr_sim_object_name_set)
    rt_sim_object_name = property(_sim_services.FrameLog_rt_sim_object_name_get, _sim_services.FrameLog_rt_sim_object_name_set)
    ms_sim_object_name = property(_sim_services.FrameLog_ms_sim_object_name_get, _sim_services.FrameLog_ms_sim_object_name_set)
    clock = property(_sim_services.FrameLog_clock_get, _sim_services.FrameLog_clock_set)

    def __init__(self, *args):
        _sim_services.FrameLog_swiginit(self, _sim_services.new_FrameLog(*args))
    __swig_destroy__ = _sim_services.delete_FrameLog

    def frame_clock_start(self, *args):
        return _sim_services.FrameLog_frame_clock_start(self, *args)

    def frame_clock_stop(self, *args):
        return _sim_services.FrameLog_frame_clock_stop(self, *args)

    def framelog_on(self, *args):
        return _sim_services.FrameLog_framelog_on(self, *args)

    def framelog_off(self, *args):
        return _sim_services.FrameLog_framelog_off(self, *args)

    def default_data(self, *args):
        return _sim_services.FrameLog_default_data(self, *args)

    def create_DP_files(self, *args):
        return _sim_services.FrameLog_create_DP_files(self, *args)

    def set_max_samples(self, *args):
        return _sim_services.FrameLog_set_max_samples(self, *args)

    def clear_data_record_info(self, *args):
        return _sim_services.FrameLog_clear_data_record_info(self, *args)

    def restart(self, *args):
        return _sim_services.FrameLog_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.FrameLog_shutdown(self, *args)

    def set_clock(self, *args):
        return _sim_services.FrameLog_set_clock(self, *args)

# Register FrameLog in _sim_services:
_sim_services.FrameLog_swigregister(FrameLog)


def frame_log_on(*args):
    return _sim_services.frame_log_on(*args)

def frame_log_off(*args):
    return _sim_services.frame_log_off(*args)

def frame_log_set_max_samples(*args):
    return _sim_services.frame_log_set_max_samples(*args)

def ip_parse(*args):
    return _sim_services.ip_parse(*args)
EVENT_NOTARGET = _sim_services.EVENT_NOTARGET
EVENT_BEFORETARGET = _sim_services.EVENT_BEFORETARGET
EVENT_AFTERTARGET = _sim_services.EVENT_AFTERTARGET
class Event(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Event

    def get_name(self, *args):
        return _sim_services.Event_get_name(self, *args)

    def set_name(self, *args):
        return _sim_services.Event_set_name(self, *args)

    def is_active(self, *args):
        return _sim_services.Event_is_active(self, *args)

    def activate(self, *args):
        return _sim_services.Event_activate(self, *args)

    def deactivate(self, *args):
        return _sim_services.Event_deactivate(self, *args)

    def set_thread(self, *args):
        return _sim_services.Event_set_thread(self, *args)

    def get_thread(self, *args):
        return _sim_services.Event_get_thread(self, *args)

    def set_before_after(self, *args):
        return _sim_services.Event_set_before_after(self, *args)

    def get_before_after(self, *args):
        return _sim_services.Event_get_before_after(self, *args)

    def set_cycle(self, *args):
        return _sim_services.Event_set_cycle(self, *args)

    def get_cycle(self, *args):
        return _sim_services.Event_get_cycle(self, *args)

    def get_cycle_tics(self, *args):
        return _sim_services.Event_get_cycle_tics(self, *args)

    def get_next_tics(self, *args):
        return _sim_services.Event_get_next_tics(self, *args)

    def set_next_tics(self, *args):
        return _sim_services.Event_set_next_tics(self, *args)

    def advance_next_tics(self, *args):
        return _sim_services.Event_advance_next_tics(self, *args)

    def get_free_on_removal(self, *args):
        return _sim_services.Event_get_free_on_removal(self, *args)

    def set_free_on_removal(self, *args):
        return _sim_services.Event_set_free_on_removal(self, *args)

    def get_target_name(self, *args):
        return _sim_services.Event_get_target_name(self, *args)

    def set_target_name(self, *args):
        return _sim_services.Event_set_target_name(self, *args)

    def get_target_inst(self, *args):
        return _sim_services.Event_get_target_inst(self, *args)

    def set_target_inst(self, *args):
        return _sim_services.Event_set_target_inst(self, *args)

    def process(self, *args):
        return _sim_services.Event_process(self, *args)

    def add(self, *args):
        return _sim_services.Event_add(self, *args)

    def remove(self, *args):
        return _sim_services.Event_remove(self, *args)

    def restart(self, *args):
        return _sim_services.Event_restart(self, *args)

# Register Event in _sim_services:
_sim_services.Event_swigregister(Event)

class condition_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.condition_t_swiginit(self, _sim_services.new_condition_t(*args))
    enabled = property(_sim_services.condition_t_enabled_get, _sim_services.condition_t_enabled_set)
    hold = property(_sim_services.condition_t_hold_get, _sim_services.condition_t_hold_set)
    fired = property(_sim_services.condition_t_fired_get, _sim_services.condition_t_fired_set)
    fired_count = property(_sim_services.condition_t_fired_count_get, _sim_services.condition_t_fired_count_set)
    fired_time = property(_sim_services.condition_t_fired_time_get, _sim_services.condition_t_fired_time_set)
    str = property(_sim_services.condition_t_str_get, _sim_services.condition_t_str_set)
    comment = property(_sim_services.condition_t_comment_get, _sim_services.condition_t_comment_set)
    ref = property(_sim_services.condition_t_ref_get, _sim_services.condition_t_ref_set)
    job = property(_sim_services.condition_t_job_get, _sim_services.condition_t_job_set)
    cond_type = property(_sim_services.condition_t_cond_type_get, _sim_services.condition_t_cond_type_set)
    __swig_destroy__ = _sim_services.delete_condition_t

# Register condition_t in _sim_services:
_sim_services.condition_t_swigregister(condition_t)

class action_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.action_t_swiginit(self, _sim_services.new_action_t(*args))
    enabled = property(_sim_services.action_t_enabled_get, _sim_services.action_t_enabled_set)
    ran = property(_sim_services.action_t_ran_get, _sim_services.action_t_ran_set)
    ran_count = property(_sim_services.action_t_ran_count_get, _sim_services.action_t_ran_count_set)
    ran_time = property(_sim_services.action_t_ran_time_get, _sim_services.action_t_ran_time_set)
    str = property(_sim_services.action_t_str_get, _sim_services.action_t_str_set)
    comment = property(_sim_services.action_t_comment_get, _sim_services.action_t_comment_set)
    job = property(_sim_services.action_t_job_get, _sim_services.action_t_job_set)
    act_type = property(_sim_services.action_t_act_type_get, _sim_services.action_t_act_type_set)
    __swig_destroy__ = _sim_services.delete_action_t

# Register action_t in _sim_services:
_sim_services.action_t_swigregister(action_t)

class IPPythonEvent(Event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    added = property(_sim_services.IPPythonEvent_added_get, _sim_services.IPPythonEvent_added_set)
    is_user_event = property(_sim_services.IPPythonEvent_is_user_event_get, _sim_services.IPPythonEvent_is_user_event_set)
    manual = property(_sim_services.IPPythonEvent_manual_get, _sim_services.IPPythonEvent_manual_set)
    manual_fired = property(_sim_services.IPPythonEvent_manual_fired_get, _sim_services.IPPythonEvent_manual_fired_set)
    info_msg = property(_sim_services.IPPythonEvent_info_msg_get, _sim_services.IPPythonEvent_info_msg_set)
    cond_all = property(_sim_services.IPPythonEvent_cond_all_get, _sim_services.IPPythonEvent_cond_all_set)
    fired = property(_sim_services.IPPythonEvent_fired_get, _sim_services.IPPythonEvent_fired_set)
    hold = property(_sim_services.IPPythonEvent_hold_get, _sim_services.IPPythonEvent_hold_set)
    ran = property(_sim_services.IPPythonEvent_ran_get, _sim_services.IPPythonEvent_ran_set)
    condition_count = property(_sim_services.IPPythonEvent_condition_count_get, _sim_services.IPPythonEvent_condition_count_set)
    fired_count = property(_sim_services.IPPythonEvent_fired_count_get, _sim_services.IPPythonEvent_fired_count_set)
    fired_time = property(_sim_services.IPPythonEvent_fired_time_get, _sim_services.IPPythonEvent_fired_time_set)
    action_count = property(_sim_services.IPPythonEvent_action_count_get, _sim_services.IPPythonEvent_action_count_set)
    ran_count = property(_sim_services.IPPythonEvent_ran_count_get, _sim_services.IPPythonEvent_ran_count_set)
    ran_time = property(_sim_services.IPPythonEvent_ran_time_get, _sim_services.IPPythonEvent_ran_time_set)
    condition_list = property(_sim_services.IPPythonEvent_condition_list_get, _sim_services.IPPythonEvent_condition_list_set)
    action_list = property(_sim_services.IPPythonEvent_action_list_get, _sim_services.IPPythonEvent_action_list_set)

    def __init__(self, *args):
        _sim_services.IPPythonEvent_swiginit(self, _sim_services.new_IPPythonEvent(*args))
    __swig_destroy__ = _sim_services.delete_IPPythonEvent

    def condition_all(self, *args):
        return _sim_services.IPPythonEvent_condition_all(self, *args)

    def condition_any(self, *args):
        return _sim_services.IPPythonEvent_condition_any(self, *args)

    def manual_on(self, *args):
        return _sim_services.IPPythonEvent_manual_on(self, *args)

    def manual_fire(self, *args):
        return _sim_services.IPPythonEvent_manual_fire(self, *args)

    def manual_off(self, *args):
        return _sim_services.IPPythonEvent_manual_off(self, *args)

    def manual_done(self, *args):
        return _sim_services.IPPythonEvent_manual_done(self, *args)

    @staticmethod
    def set_event_info_msg_on(*args):
        return _sim_services.IPPythonEvent_set_event_info_msg_on(*args)

    @staticmethod
    def set_event_info_msg_off(*args):
        return _sim_services.IPPythonEvent_set_event_info_msg_off(*args)

    @staticmethod
    def terminate_on_event_parse_error(*args):
        return _sim_services.IPPythonEvent_terminate_on_event_parse_error(*args)

    def restart(self, *args):
        return _sim_services.IPPythonEvent_restart(self, *args)

    def condition(self, *args):
        return _sim_services.IPPythonEvent_condition(self, *args)

    def condition_var(self, *args):
        return _sim_services.IPPythonEvent_condition_var(self, *args)

    def condition_job(self, *args):
        return _sim_services.IPPythonEvent_condition_job(self, *args)

    def condition_hold_on(self, *args):
        return _sim_services.IPPythonEvent_condition_hold_on(self, *args)

    def condition_hold_off(self, *args):
        return _sim_services.IPPythonEvent_condition_hold_off(self, *args)

    def condition_enable(self, *args):
        return _sim_services.IPPythonEvent_condition_enable(self, *args)

    def condition_disable(self, *args):
        return _sim_services.IPPythonEvent_condition_disable(self, *args)

    def condition_fired(self, *args):
        return _sim_services.IPPythonEvent_condition_fired(self, *args)

    def condition_fired_count(self, *args):
        return _sim_services.IPPythonEvent_condition_fired_count(self, *args)

    def condition_fired_time(self, *args):
        return _sim_services.IPPythonEvent_condition_fired_time(self, *args)

    def condition_string(self, *args):
        return _sim_services.IPPythonEvent_condition_string(self, *args)

    def action(self, *args):
        return _sim_services.IPPythonEvent_action(self, *args)

    def action_job(self, *args):
        return _sim_services.IPPythonEvent_action_job(self, *args)

    def action_job_on(self, *args):
        return _sim_services.IPPythonEvent_action_job_on(self, *args)

    def action_job_off(self, *args):
        return _sim_services.IPPythonEvent_action_job_off(self, *args)

    def action_enable(self, *args):
        return _sim_services.IPPythonEvent_action_enable(self, *args)

    def action_disable(self, *args):
        return _sim_services.IPPythonEvent_action_disable(self, *args)

    def action_ran(self, *args):
        return _sim_services.IPPythonEvent_action_ran(self, *args)

    def action_ran_count(self, *args):
        return _sim_services.IPPythonEvent_action_ran_count(self, *args)

    def action_ran_time(self, *args):
        return _sim_services.IPPythonEvent_action_ran_time(self, *args)

    def process(self, *args):
        return _sim_services.IPPythonEvent_process(self, *args)

    def process_user_event(self, *args):
        return _sim_services.IPPythonEvent_process_user_event(self, *args)

    def add(self, *args):
        return _sim_services.IPPythonEvent_add(self, *args)

    def remove(self, *args):
        return _sim_services.IPPythonEvent_remove(self, *args)

    @staticmethod
    def set_python_processor(*args):
        return _sim_services.IPPythonEvent_set_python_processor(*args)

    @staticmethod
    def set_mtv(*args):
        return _sim_services.IPPythonEvent_set_mtv(*args)

    def __getitem__(self, *args):
        return _sim_services.IPPythonEvent___getitem__(self, *args)

    def __len__(self, *args):
        return _sim_services.IPPythonEvent___len__(self, *args)

# Register IPPythonEvent in _sim_services:
_sim_services.IPPythonEvent_swigregister(IPPythonEvent)

def IPPythonEvent_set_event_info_msg_on(*args):
    return _sim_services.IPPythonEvent_set_event_info_msg_on(*args)

def IPPythonEvent_set_event_info_msg_off(*args):
    return _sim_services.IPPythonEvent_set_event_info_msg_off(*args)

def IPPythonEvent_terminate_on_event_parse_error(*args):
    return _sim_services.IPPythonEvent_terminate_on_event_parse_error(*args)

def IPPythonEvent_set_python_processor(*args):
    return _sim_services.IPPythonEvent_set_python_processor(*args)

def IPPythonEvent_set_mtv(*args):
    return _sim_services.IPPythonEvent_set_mtv(*args)


def ippython_new_event(*args):
    return _sim_services.ippython_new_event(*args)

def ippython_delete_event(*args):
    return _sim_services.ippython_delete_event(*args)

def ippython_add_event(*args):
    return _sim_services.ippython_add_event(*args)

def ippython_add_event_before(*args):
    return _sim_services.ippython_add_event_before(*args)

def ippython_add_event_after(*args):
    return _sim_services.ippython_add_event_after(*args)

def ippython_add_read(*args):
    return _sim_services.ippython_add_read(*args)

def ippython_manual_on(*args):
    return _sim_services.ippython_manual_on(*args)

def ippython_manual_fire(*args):
    return _sim_services.ippython_manual_fire(*args)

def ippython_manual_off(*args):
    return _sim_services.ippython_manual_off(*args)

def ippython_manual_done(*args):
    return _sim_services.ippython_manual_done(*args)

def castAsTrick__IPPythonEvent(*args):
    return _sim_services.castAsTrick__IPPythonEvent(*args)
class MTV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MTV_swiginit(self, _sim_services.new_MTV(*args))
    dummy_event = property(_sim_services.MTV_dummy_event_get, _sim_services.MTV_dummy_event_set)
    mtv_list = property(_sim_services.MTV_mtv_list_get, _sim_services.MTV_mtv_list_set)
    mtv_count = property(_sim_services.MTV_mtv_count_get, _sim_services.MTV_mtv_count_set)
    mtv_update_ticker = property(_sim_services.MTV_mtv_update_ticker_get, _sim_services.MTV_mtv_update_ticker_set)

    def add_event(self, *args):
        return _sim_services.MTV_add_event(self, *args)

    def delete_event(self, *args):
        return _sim_services.MTV_delete_event(self, *args)

    def get_event(self, *args):
        return _sim_services.MTV_get_event(self, *args)

    def send_event_data(self, *args):
        return _sim_services.MTV_send_event_data(self, *args)
    __swig_destroy__ = _sim_services.delete_MTV

# Register MTV in _sim_services:
_sim_services.MTV_swigregister(MTV)


def mtv_add_event(*args):
    return _sim_services.mtv_add_event(*args)

def mtv_delete_event(*args):
    return _sim_services.mtv_delete_event(*args)

def mtv_get_event(*args):
    return _sim_services.mtv_get_event(*args)

def mtv_send_event_data(*args):
    return _sim_services.mtv_send_event_data(*args)
class EventInstrument(InstrumentBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.EventInstrument_swiginit(self, _sim_services.new_EventInstrument(*args))

    def call(self, *args):
        return _sim_services.EventInstrument_call(self, *args)

    def get_event(self, *args):
        return _sim_services.EventInstrument_get_event(self, *args)
    __swig_destroy__ = _sim_services.delete_EventInstrument

# Register EventInstrument in _sim_services:
_sim_services.EventInstrument_swigregister(EventInstrument)

class EventProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def set_process_event_job(self, *args):
        return _sim_services.EventProcessor_set_process_event_job(self, *args)

    def add_event(self, *args):
        return _sim_services.EventProcessor_add_event(self, *args)

    def remove_event(self, *args):
        return _sim_services.EventProcessor_remove_event(self, *args)

    def add_pending_events(self, *args):
        return _sim_services.EventProcessor_add_pending_events(self, *args)

    def process_event(self, *args):
        return _sim_services.EventProcessor_process_event(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.EventProcessor_preload_checkpoint(self, *args)

    def __init__(self):
        _sim_services.EventProcessor_swiginit(self, _sim_services.new_EventProcessor())
    __swig_destroy__ = _sim_services.delete_EventProcessor

# Register EventProcessor in _sim_services:
_sim_services.EventProcessor_swigregister(EventProcessor)

class EventManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.EventManager_swiginit(self, _sim_services.new_EventManager(*args))

    def get_event(self, *args):
        return _sim_services.EventManager_get_event(self, *args)

    def add_event(self, *args):
        return _sim_services.EventManager_add_event(self, *args)

    def add_event_before(self, *args):
        return _sim_services.EventManager_add_event_before(self, *args)

    def add_event_after(self, *args):
        return _sim_services.EventManager_add_event_after(self, *args)

    def activate_event(self, *args):
        return _sim_services.EventManager_activate_event(self, *args)

    def deactivate_event(self, *args):
        return _sim_services.EventManager_deactivate_event(self, *args)

    def remove_event(self, *args):
        return _sim_services.EventManager_remove_event(self, *args)

    def time_tic_changed(self, *args):
        return _sim_services.EventManager_time_tic_changed(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.EventManager_preload_checkpoint(self, *args)

    def restart(self, *args):
        return _sim_services.EventManager_restart(self, *args)

    def add_event_processor(self, *args):
        return _sim_services.EventManager_add_event_processor(self, *args)
    __swig_destroy__ = _sim_services.delete_EventManager

# Register EventManager in _sim_services:
_sim_services.EventManager_swigregister(EventManager)


def event_manager_get_event(*args):
    return _sim_services.event_manager_get_event(*args)

def event_manager_add_event(*args):
    return _sim_services.event_manager_add_event(*args)

def event_manager_add_event_before(*args):
    return _sim_services.event_manager_add_event_before(*args)

def event_manager_add_event_after(*args):
    return _sim_services.event_manager_add_event_after(*args)

def event_manager_remove_event(*args):
    return _sim_services.event_manager_remove_event(*args)
class JITEvent(Event):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.JITEvent_swiginit(self, _sim_services.new_JITEvent(*args))

    def process(self, *args):
        return _sim_services.JITEvent_process(self, *args)

    def add(self, *args):
        return _sim_services.JITEvent_add(self, *args)

    def remove(self, *args):
        return _sim_services.JITEvent_remove(self, *args)

    def restart(self, *args):
        return _sim_services.JITEvent_restart(self, *args)
    func_name = property(_sim_services.JITEvent_func_name_get, _sim_services.JITEvent_func_name_set)
    __swig_destroy__ = _sim_services.delete_JITEvent

# Register JITEvent in _sim_services:
_sim_services.JITEvent_swigregister(JITEvent)

class JITLibInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.JITLibInfo_swiginit(self, _sim_services.new_JITLibInfo(*args))
    library_name = property(_sim_services.JITLibInfo_library_name_get, _sim_services.JITLibInfo_library_name_set)
    handle = property(_sim_services.JITLibInfo_handle_get, _sim_services.JITLibInfo_handle_set)

    def find_symbol(self, *args):
        return _sim_services.JITLibInfo_find_symbol(self, *args)
    __swig_destroy__ = _sim_services.delete_JITLibInfo

# Register JITLibInfo in _sim_services:
_sim_services.JITLibInfo_swigregister(JITLibInfo)

class JITInputFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.JITInputFile_swiginit(self, _sim_services.new_JITInputFile(*args))

    def process_sim_args(self, *args):
        return _sim_services.JITInputFile_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.JITInputFile_init(self, *args)

    def compile(self, *args):
        return _sim_services.JITInputFile_compile(self, *args)

    def run(self, *args):
        return _sim_services.JITInputFile_run(self, *args)

    def compile_and_run(self, *args):
        return _sim_services.JITInputFile_compile_and_run(self, *args)

    def add_library(self, *args):
        return _sim_services.JITInputFile_add_library(self, *args)

    def find_symbol(self, *args):
        return _sim_services.JITInputFile_find_symbol(self, *args)
    __swig_destroy__ = _sim_services.delete_JITInputFile

# Register JITInputFile in _sim_services:
_sim_services.JITInputFile_swigregister(JITInputFile)


def jit_compile(*args):
    return _sim_services.jit_compile(*args)

def jit_run(*args):
    return _sim_services.jit_run(*args)

def jit_compile_and_run(*args):
    return _sim_services.jit_compile_and_run(*args)

def jit_add_library(*args):
    return _sim_services.jit_add_library(*args)

def jit_find_symbol(*args):
    return _sim_services.jit_find_symbol(*args)

def jit_add_read(*args):
    return _sim_services.jit_add_read(*args)

def jit_add_event(*args):
    return _sim_services.jit_add_event(*args)

def jit_add_event_before(*args):
    return _sim_services.jit_add_event_before(*args)

def jit_add_event_after(*args):
    return _sim_services.jit_add_event_after(*args)
TRICK_ERROR_ALL = _sim_services.TRICK_ERROR_ALL
TRICK_ERROR_TRIVIAL = _sim_services.TRICK_ERROR_TRIVIAL
TRICK_ERROR_ADVISORY = _sim_services.TRICK_ERROR_ADVISORY
TRICK_ERROR_CAUTION = _sim_services.TRICK_ERROR_CAUTION
TRICK_ERROR_WARNING = _sim_services.TRICK_ERROR_WARNING
TRICK_ERROR_ALERT = _sim_services.TRICK_ERROR_ALERT
TRICK_ERROR_FATAL = _sim_services.TRICK_ERROR_FATAL
TRICK_ERROR_ABORT = _sim_services.TRICK_ERROR_ABORT
TRICK_ERROR_SILENT = _sim_services.TRICK_ERROR_SILENT
class TrickErrorHndlr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    error_func = property(_sim_services.TrickErrorHndlr_error_func_get, _sim_services.TrickErrorHndlr_error_func_set)
    data_ptr = property(_sim_services.TrickErrorHndlr_data_ptr_get, _sim_services.TrickErrorHndlr_data_ptr_set)
    report_level = property(_sim_services.TrickErrorHndlr_report_level_get, _sim_services.TrickErrorHndlr_report_level_set)
    use_send_hs = property(_sim_services.TrickErrorHndlr_use_send_hs_get, _sim_services.TrickErrorHndlr_use_send_hs_set)
    report_stream = property(_sim_services.TrickErrorHndlr_report_stream_get, _sim_services.TrickErrorHndlr_report_stream_set)

    def __init__(self):
        _sim_services.TrickErrorHndlr_swiginit(self, _sim_services.new_TrickErrorHndlr())
    __swig_destroy__ = _sim_services.delete_TrickErrorHndlr

# Register TrickErrorHndlr in _sim_services:
_sim_services.TrickErrorHndlr_swigregister(TrickErrorHndlr)


def trick_error_func_default(*args):
    return _sim_services.trick_error_func_default(*args)

def trick_error_init(*args):
    return _sim_services.trick_error_init(*args)

def trick_error_shutdown(*args):
    return _sim_services.trick_error_shutdown(*args)

def trick_error_set_func(*args):
    return _sim_services.trick_error_set_func(*args)

def trick_error_set_data(*args):
    return _sim_services.trick_error_set_data(*args)

def trick_error_set_report_level(*args):
    return _sim_services.trick_error_set_report_level(*args)

def trick_error_set_stream(*args):
    return _sim_services.trick_error_set_stream(*args)

def trick_error_set_all_streams(*args):
    return _sim_services.trick_error_set_all_streams(*args)

def trick_error_copy_streams(*args):
    return _sim_services.trick_error_copy_streams(*args)

def trick_error_set_send_hs_flag(*args):
    return _sim_services.trick_error_set_send_hs_flag(*args)

def trick_error_set_all_send_hs_flags(*args):
    return _sim_services.trick_error_set_all_send_hs_flags(*args)

def trick_error_copy_send_hs_flags(*args):
    return _sim_services.trick_error_copy_send_hs_flags(*args)

def trick_error_get_func(*args):
    return _sim_services.trick_error_get_func(*args)

def trick_error_get_data(*args):
    return _sim_services.trick_error_get_data(*args)

def trick_error_get_report_level(*args):
    return _sim_services.trick_error_get_report_level(*args)

def trick_error_get_stream(*args):
    return _sim_services.trick_error_get_stream(*args)

def trick_error_get_curr_stream(*args):
    return _sim_services.trick_error_get_curr_stream(*args)

def trick_error_get_send_hs_flag(*args):
    return _sim_services.trick_error_get_send_hs_flag(*args)

def trick_error_get_curr_send_hs_flag(*args):
    return _sim_services.trick_error_get_curr_send_hs_flag(*args)

def trick_error_report(*args):
    return _sim_services.trick_error_report(*args)
TC_NOSIGNAL = _sim_services.TC_NOSIGNAL
TC_SUCCESS = _sim_services.TC_SUCCESS
TC_COULD_NOT_OPEN_SOCKET = _sim_services.TC_COULD_NOT_OPEN_SOCKET
TC_COULD_NOT_BIND_SOCKET = _sim_services.TC_COULD_NOT_BIND_SOCKET
TC_COULD_NOT_LISTEN_SOCKET = _sim_services.TC_COULD_NOT_LISTEN_SOCKET
TC_COULD_NOT_ACCEPT = _sim_services.TC_COULD_NOT_ACCEPT
TC_DRIVER_NOT_INSTALLED = _sim_services.TC_DRIVER_NOT_INSTALLED
TC_DRIVER_ALREADY_INSTALLED = _sim_services.TC_DRIVER_ALREADY_INSTALLED
TC_DRIVER_IS_NULL = _sim_services.TC_DRIVER_IS_NULL
TC_HOST_NOT_FOUND = _sim_services.TC_HOST_NOT_FOUND
TC_COULD_NOT_CONNECT = _sim_services.TC_COULD_NOT_CONNECT
TC_RESOURCE_EXCEEDED = _sim_services.TC_RESOURCE_EXCEEDED
TC_DRIVER_NOT_FOUND = _sim_services.TC_DRIVER_NOT_FOUND
TC_DRIVER_ALREADY_DISCONNECTED = _sim_services.TC_DRIVER_ALREADY_DISCONNECTED
TC_CONN_DISABLED = _sim_services.TC_CONN_DISABLED
TC_COULD_NOT_SET_TTL = _sim_services.TC_COULD_NOT_SET_TTL
TC_COULD_NOT_ADD_MEMBERSHIP = _sim_services.TC_COULD_NOT_ADD_MEMBERSHIP
TC_EWOULDBLOCK = _sim_services.TC_EWOULDBLOCK
TC_READWRITE_TIMEOUT = _sim_services.TC_READWRITE_TIMEOUT
TC_BROKEN_PIPE = _sim_services.TC_BROKEN_PIPE
MAX_BLOCKIO_TIMEOUT_LIMIT = _sim_services.MAX_BLOCKIO_TIMEOUT_LIMIT
TRICKCOMM_SOCKET_PROTO = _sim_services.TRICKCOMM_SOCKET_PROTO
TRICKCOMM_INVALID_SOCKET = _sim_services.TRICKCOMM_INVALID_SOCKET
TC_TAG_LENGTH = _sim_services.TC_TAG_LENGTH
TC_BYTE_ORDER_NDX = _sim_services.TC_BYTE_ORDER_NDX
TC_LONG_SIZE_NDX = _sim_services.TC_LONG_SIZE_NDX
TC_BYTE_INFO_LENGTH = _sim_services.TC_BYTE_INFO_LENGTH
TC_MULT_PORT = _sim_services.TC_MULT_PORT
TC_MULT_GROUP = _sim_services.TC_MULT_GROUP
TC_COMM_FALSE = _sim_services.TC_COMM_FALSE
TC_COMM_TRUE = _sim_services.TC_COMM_TRUE
TC_COMM_NO = _sim_services.TC_COMM_NO
TC_COMM_YES = _sim_services.TC_COMM_YES
TC_COMM_DISABLED = _sim_services.TC_COMM_DISABLED
TC_COMM_ENABLED = _sim_services.TC_COMM_ENABLED
TC_COMM_BLOCKIO = _sim_services.TC_COMM_BLOCKIO
TC_COMM_NOBLOCKIO = _sim_services.TC_COMM_NOBLOCKIO
TC_COMM_TIMED_BLOCKIO = _sim_services.TC_COMM_TIMED_BLOCKIO
TC_COMM_ALL_OR_NOTHING = _sim_services.TC_COMM_ALL_OR_NOTHING
class TCDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    socket = property(_sim_services.TCDevice_socket_get, _sim_services.TCDevice_socket_set)
    socket_type = property(_sim_services.TCDevice_socket_type_get, _sim_services.TCDevice_socket_type_set)
    disabled = property(_sim_services.TCDevice_disabled_get, _sim_services.TCDevice_disabled_set)
    disable_handshaking = property(_sim_services.TCDevice_disable_handshaking_get, _sim_services.TCDevice_disable_handshaking_set)
    blockio_limit = property(_sim_services.TCDevice_blockio_limit_get, _sim_services.TCDevice_blockio_limit_set)
    blockio_type = property(_sim_services.TCDevice_blockio_type_get, _sim_services.TCDevice_blockio_type_set)
    byte_info = property(_sim_services.TCDevice_byte_info_get, _sim_services.TCDevice_byte_info_set)
    client_id = property(_sim_services.TCDevice_client_id_get, _sim_services.TCDevice_client_id_set)
    client_tag = property(_sim_services.TCDevice_client_tag_get, _sim_services.TCDevice_client_tag_set)
    client_addr = property(_sim_services.TCDevice_client_addr_get, _sim_services.TCDevice_client_addr_set)
    error_handler = property(_sim_services.TCDevice_error_handler_get, _sim_services.TCDevice_error_handler_set)
    hostname = property(_sim_services.TCDevice_hostname_get, _sim_services.TCDevice_hostname_set)
    port = property(_sim_services.TCDevice_port_get, _sim_services.TCDevice_port_set)
    remoteServAddr = property(_sim_services.TCDevice_remoteServAddr_get, _sim_services.TCDevice_remoteServAddr_set)
    mcast_group = property(_sim_services.TCDevice_mcast_group_get, _sim_services.TCDevice_mcast_group_set)
    ttl = property(_sim_services.TCDevice_ttl_get, _sim_services.TCDevice_ttl_set)
    cliAddr = property(_sim_services.TCDevice_cliAddr_get, _sim_services.TCDevice_cliAddr_set)

    def __init__(self):
        _sim_services.TCDevice_swiginit(self, _sim_services.new_TCDevice())
    __swig_destroy__ = _sim_services.delete_TCDevice

# Register TCDevice in _sim_services:
_sim_services.TCDevice_swigregister(TCDevice)

class SEND_ME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    addr = property(_sim_services.SEND_ME_addr_get, _sim_services.SEND_ME_addr_set)
    port = property(_sim_services.SEND_ME_port_get, _sim_services.SEND_ME_port_set)
    pid = property(_sim_services.SEND_ME_pid_get, _sim_services.SEND_ME_pid_set)
    conn_initiated = property(_sim_services.SEND_ME_conn_initiated_get, _sim_services.SEND_ME_conn_initiated_set)
    disabled = property(_sim_services.SEND_ME_disabled_get, _sim_services.SEND_ME_disabled_set)
    my_tag = property(_sim_services.SEND_ME_my_tag_get, _sim_services.SEND_ME_my_tag_set)
    other_tag = property(_sim_services.SEND_ME_other_tag_get, _sim_services.SEND_ME_other_tag_set)

    def __init__(self):
        _sim_services.SEND_ME_swiginit(self, _sim_services.new_SEND_ME())
    __swig_destroy__ = _sim_services.delete_SEND_ME

# Register SEND_ME in _sim_services:
_sim_services.SEND_ME_swigregister(SEND_ME)

class BC_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    send_me = property(_sim_services.BC_INFO_send_me_get, _sim_services.BC_INFO_send_me_set)
    device = property(_sim_services.BC_INFO_device_get, _sim_services.BC_INFO_device_set)
    addr = property(_sim_services.BC_INFO_addr_get, _sim_services.BC_INFO_addr_set)
    fd = property(_sim_services.BC_INFO_fd_get, _sim_services.BC_INFO_fd_set)

    def __init__(self):
        _sim_services.BC_INFO_swiginit(self, _sim_services.new_BC_INFO())
    __swig_destroy__ = _sim_services.delete_BC_INFO

# Register BC_INFO in _sim_services:
_sim_services.BC_INFO_swigregister(BC_INFO)

class JSONVariableServer(ThreadBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.JSONVariableServer_swiginit(self, _sim_services.new_JSONVariableServer(*args))
    __swig_destroy__ = _sim_services.delete_JSONVariableServer
    enabled = property(_sim_services.JSONVariableServer_enabled_get, _sim_services.JSONVariableServer_enabled_set)

    def get_hostname(self, *args):
        return _sim_services.JSONVariableServer_get_hostname(self, *args)

    def get_port(self, *args):
        return _sim_services.JSONVariableServer_get_port(self, *args)

    def set_port(self, *args):
        return _sim_services.JSONVariableServer_set_port(self, *args)

    def set_source_address(self, *args):
        return _sim_services.JSONVariableServer_set_source_address(self, *args)

    def get_source_address(self, *args):
        return _sim_services.JSONVariableServer_get_source_address(self, *args)

    def init_listen_device(self, *args):
        return _sim_services.JSONVariableServer_init_listen_device(self, *args)

    def init(self, *args):
        return _sim_services.JSONVariableServer_init(self, *args)

    def check_and_move_listen_device(self, *args):
        return _sim_services.JSONVariableServer_check_and_move_listen_device(self, *args)

    def thread_body(self, *args):
        return _sim_services.JSONVariableServer_thread_body(self, *args)

    def restart(self, *args):
        return _sim_services.JSONVariableServer_restart(self, *args)

    def dump(self, *args):
        return _sim_services.JSONVariableServer_dump(self, *args)

# Register JSONVariableServer in _sim_services:
_sim_services.JSONVariableServer_swigregister(JSONVariableServer)

class IntegrationManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.IntegrationManager_swiginit(self, _sim_services.new_IntegrationManager(*args))

    def is_empty(self, *args):
        return _sim_services.IntegrationManager_is_empty(self, *args)

    def build_sim_object_info(self, *args):
        return _sim_services.IntegrationManager_build_sim_object_info(self, *args)

    def clear_sim_object_info(self, *args):
        return _sim_services.IntegrationManager_clear_sim_object_info(self, *args)

    def clear_integrated_by(self, *args):
        return _sim_services.IntegrationManager_clear_integrated_by(self, *args)

    def get_integrated_by(self, *args):
        return _sim_services.IntegrationManager_get_integrated_by(self, *args)

    def set_integrated_by(self, *args):
        return _sim_services.IntegrationManager_set_integrated_by(self, *args)

    def add_jobs_to_queue(self, *args):
        return _sim_services.IntegrationManager_add_jobs_to_queue(self, *args)

    def find_sim_object(self, *args):
        return _sim_services.IntegrationManager_find_sim_object(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegrationManager

# Register IntegrationManager in _sim_services:
_sim_services.IntegrationManager_swigregister(IntegrationManager)

Euler = _sim_services.Euler
Euler_Cromer = _sim_services.Euler_Cromer
Nystrom_Lear_2 = _sim_services.Nystrom_Lear_2
Runge_Kutta_2 = _sim_services.Runge_Kutta_2
Modified_Midpoint_4 = _sim_services.Modified_Midpoint_4
Runge_Kutta_4 = _sim_services.Runge_Kutta_4
Runge_Kutta_Gill_4 = _sim_services.Runge_Kutta_Gill_4
Runge_Kutta_Fehlberg_45 = _sim_services.Runge_Kutta_Fehlberg_45
Runge_Kutta_Fehlberg_78 = _sim_services.Runge_Kutta_Fehlberg_78
ABM_Method = _sim_services.ABM_Method
User_Defined = _sim_services.User_Defined
class Integrator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Integrator

    def initialize(self, *args):
        return _sim_services.Integrator_initialize(self, *args)

    def integrate(self, *args):
        return _sim_services.Integrator_integrate(self, *args)

    def integrate_1st_order_ode(self, *args):
        return _sim_services.Integrator_integrate_1st_order_ode(self, *args)

    def integrate_2nd_order_ode(self, *args):
        return _sim_services.Integrator_integrate_2nd_order_ode(self, *args)

    def state_in(self, *args):
        return _sim_services.Integrator_state_in(self, *args)

    def deriv_in(self, *args):
        return _sim_services.Integrator_deriv_in(self, *args)

    def state_out(self, *args):
        return _sim_services.Integrator_state_out(self, *args)

    def deriv2_in(self, *args):
        return _sim_services.Integrator_deriv2_in(self, *args)
    num_state = property(_sim_services.Integrator_num_state_get, _sim_services.Integrator_num_state_set)
    intermediate_step = property(_sim_services.Integrator_intermediate_step_get, _sim_services.Integrator_intermediate_step_set)
    first_step_deriv = property(_sim_services.Integrator_first_step_deriv_get, _sim_services.Integrator_first_step_deriv_set)
    last_step_deriv = property(_sim_services.Integrator_last_step_deriv_get, _sim_services.Integrator_last_step_deriv_set)
    is_2nd_order_ODE_technique = property(_sim_services.Integrator_is_2nd_order_ODE_technique_get, _sim_services.Integrator_is_2nd_order_ODE_technique_set)
    use_deriv2 = property(_sim_services.Integrator_use_deriv2_get, _sim_services.Integrator_use_deriv2_set)
    dt = property(_sim_services.Integrator_dt_get, _sim_services.Integrator_dt_set)
    target_integ_time = property(_sim_services.Integrator_target_integ_time_get, _sim_services.Integrator_target_integ_time_set)
    state = property(_sim_services.Integrator_state_get, _sim_services.Integrator_state_set)
    deriv = property(_sim_services.Integrator_deriv_get, _sim_services.Integrator_deriv_set)
    deriv2 = property(_sim_services.Integrator_deriv2_get, _sim_services.Integrator_deriv2_set)
    state_ws = property(_sim_services.Integrator_state_ws_get, _sim_services.Integrator_state_ws_set)
    time = property(_sim_services.Integrator_time_get, _sim_services.Integrator_time_set)
    time_0 = property(_sim_services.Integrator_time_0_get, _sim_services.Integrator_time_0_set)
    verbosity = property(_sim_services.Integrator_verbosity_get, _sim_services.Integrator_verbosity_set)

    def get_first_step_deriv(self, *args):
        return _sim_services.Integrator_get_first_step_deriv(self, *args)

    def set_first_step_deriv(self, *args):
        return _sim_services.Integrator_set_first_step_deriv(self, *args)

    def get_last_step_deriv(self, *args):
        return _sim_services.Integrator_get_last_step_deriv(self, *args)

    def set_last_step_deriv(self, *args):
        return _sim_services.Integrator_set_last_step_deriv(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.Integrator_set_verbosity(self, *args)

    def reset(self, *args):
        return _sim_services.Integrator_reset(self, *args)

    def get_Integrator_type(self, *args):
        return _sim_services.Integrator_get_Integrator_type(self, *args)

# Register Integrator in _sim_services:
_sim_services.Integrator_swigregister(Integrator)


def getIntegrator(*args):
    return _sim_services.getIntegrator(*args)
class IntegLoopScheduler(Scheduler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    verbosity = property(_sim_services.IntegLoopScheduler_verbosity_get, _sim_services.IntegLoopScheduler_verbosity_set)
    last_step_deriv = property(_sim_services.IntegLoopScheduler_last_step_deriv_get, _sim_services.IntegLoopScheduler_last_step_deriv_set)
    first_step_deriv = property(_sim_services.IntegLoopScheduler_first_step_deriv_get, _sim_services.IntegLoopScheduler_first_step_deriv_set)
    integ_ptr = property(_sim_services.IntegLoopScheduler_integ_ptr_get, _sim_services.IntegLoopScheduler_integ_ptr_set)
    sim_objects = property(_sim_services.IntegLoopScheduler_sim_objects_get, _sim_services.IntegLoopScheduler_sim_objects_set)

    def __init__(self, *args):
        _sim_services.IntegLoopScheduler_swiginit(self, _sim_services.new_IntegLoopScheduler(*args))
    __swig_destroy__ = _sim_services.delete_IntegLoopScheduler

    def add_integ_jobs_from_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_add_integ_jobs_from_sim_object(self, *args)

    def call_deriv_jobs(self, *args):
        return _sim_services.IntegLoopScheduler_call_deriv_jobs(self, *args)

    def integrate(self, *args):
        return _sim_services.IntegLoopScheduler_integrate(self, *args)

    def add_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_add_sim_object(self, *args)

    def remove_sim_object(self, *args):
        return _sim_services.IntegLoopScheduler_remove_sim_object(self, *args)

    def rebuild_jobs(self, *args):
        return _sim_services.IntegLoopScheduler_rebuild_jobs(self, *args)

    def restart_checkpoint(self, *args):
        return _sim_services.IntegLoopScheduler_restart_checkpoint(self, *args)

    def get_first_step_deriv_from_integrator(self, *args):
        return _sim_services.IntegLoopScheduler_get_first_step_deriv_from_integrator(self, *args)

    def set_first_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_set_first_step_deriv(self, *args)

    def get_last_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_get_last_step_deriv(self, *args)

    def set_last_step_deriv(self, *args):
        return _sim_services.IntegLoopScheduler_set_last_step_deriv(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.IntegLoopScheduler_set_verbosity(self, *args)

    def getIntegrator(self, *args):
        return _sim_services.IntegLoopScheduler_getIntegrator(self, *args)

    def get_integ_cycle(self, *args):
        return _sim_services.IntegLoopScheduler_get_integ_cycle(self, *args)

    def set_integ_cycle(self, *args):
        return _sim_services.IntegLoopScheduler_set_integ_cycle(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.IntegLoopScheduler_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.IntegLoopScheduler_instrument_job_remove(self, *args)

# Register IntegLoopScheduler in _sim_services:
_sim_services.IntegLoopScheduler_swigregister(IntegLoopScheduler)

class IntegLoopSimObject(SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    integ_sched = property(_sim_services.IntegLoopSimObject_integ_sched_get, _sim_services.IntegLoopSimObject_integ_sched_set)

    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _sim_services.new_IntegLoopSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "IntegLoopSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def add_jobs(self, *args):
        return _sim_services.IntegLoopSimObject_add_jobs(self, *args)

    def call_function(self, *args):
        return _sim_services.IntegLoopSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _sim_services.IntegLoopSimObject_call_function_double(self, *args)

    def getIntegrator(self, *args):
        return _sim_services.IntegLoopSimObject_getIntegrator(self, *args)

    def set_integ_cycle(self, *args):
        return _sim_services.IntegLoopSimObject_set_integ_cycle(self, *args)

    def __getitem__(self, *args):
        return _sim_services.IntegLoopSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _sim_services.IntegLoopSimObject___len__(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegLoopSimObject

# Register IntegLoopSimObject in _sim_services:
_sim_services.IntegLoopSimObject_swigregister(IntegLoopSimObject)


def castAsIntegLoopSimObject(*args):
    return _sim_services.castAsIntegLoopSimObject(*args)
BIG_TGO = _sim_services.BIG_TGO
Decreasing = _sim_services.Decreasing
Any = _sim_services.Any
Increasing = _sim_services.Increasing
class REGULA_FALSI(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lower_set = property(_sim_services.REGULA_FALSI_lower_set_get, _sim_services.REGULA_FALSI_lower_set_set)
    upper_set = property(_sim_services.REGULA_FALSI_upper_set_get, _sim_services.REGULA_FALSI_upper_set_set)
    iterations = property(_sim_services.REGULA_FALSI_iterations_get, _sim_services.REGULA_FALSI_iterations_set)
    fires = property(_sim_services.REGULA_FALSI_fires_get, _sim_services.REGULA_FALSI_fires_set)
    x_lower = property(_sim_services.REGULA_FALSI_x_lower_get, _sim_services.REGULA_FALSI_x_lower_set)
    t_lower = property(_sim_services.REGULA_FALSI_t_lower_get, _sim_services.REGULA_FALSI_t_lower_set)
    x_upper = property(_sim_services.REGULA_FALSI_x_upper_get, _sim_services.REGULA_FALSI_x_upper_set)
    t_upper = property(_sim_services.REGULA_FALSI_t_upper_get, _sim_services.REGULA_FALSI_t_upper_set)
    delta_time = property(_sim_services.REGULA_FALSI_delta_time_get, _sim_services.REGULA_FALSI_delta_time_set)
    error = property(_sim_services.REGULA_FALSI_error_get, _sim_services.REGULA_FALSI_error_set)
    last_error = property(_sim_services.REGULA_FALSI_last_error_get, _sim_services.REGULA_FALSI_last_error_set)
    last_tgo = property(_sim_services.REGULA_FALSI_last_tgo_get, _sim_services.REGULA_FALSI_last_tgo_set)
    error_tol = property(_sim_services.REGULA_FALSI_error_tol_get, _sim_services.REGULA_FALSI_error_tol_set)
    mode = property(_sim_services.REGULA_FALSI_mode_get, _sim_services.REGULA_FALSI_mode_set)
    function_slope = property(_sim_services.REGULA_FALSI_function_slope_get, _sim_services.REGULA_FALSI_function_slope_set)

    def __init__(self):
        _sim_services.REGULA_FALSI_swiginit(self, _sim_services.new_REGULA_FALSI())
    __swig_destroy__ = _sim_services.delete_REGULA_FALSI

# Register REGULA_FALSI in _sim_services:
_sim_services.REGULA_FALSI_swigregister(REGULA_FALSI)


def regula_falsi(*args):
    return _sim_services.regula_falsi(*args)

def reset_regula_falsi(*args):
    return _sim_services.reset_regula_falsi(*args)

def regula_falsi_set_upper(*args):
    return _sim_services.regula_falsi_set_upper(*args)

def regula_falsi_set_lower(*args):
    return _sim_services.regula_falsi_set_lower(*args)
class Er7UtilsDeletable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Er7UtilsDeletable

    def __init__(self):
        _sim_services.Er7UtilsDeletable_swiginit(self, _sim_services.new_Er7UtilsDeletable())

# Register Er7UtilsDeletable in _sim_services:
_sim_services.Er7UtilsDeletable_swigregister(Er7UtilsDeletable)

class GeneralizedPositionDerivativeFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.GeneralizedPositionDerivativeFunctions_swiginit(self, _sim_services.new_GeneralizedPositionDerivativeFunctions(*args))
    __swig_destroy__ = _sim_services.delete_GeneralizedPositionDerivativeFunctions
    first_deriv_fun = property(_sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_get, _sim_services.GeneralizedPositionDerivativeFunctions_first_deriv_fun_set)
    second_deriv_fun = property(_sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_get, _sim_services.GeneralizedPositionDerivativeFunctions_second_deriv_fun_set)

# Register GeneralizedPositionDerivativeFunctions in _sim_services:
_sim_services.GeneralizedPositionDerivativeFunctions_swigregister(GeneralizedPositionDerivativeFunctions)

class GeneralizedPositionStepFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.GeneralizedPositionStepFunctions_swiginit(self, _sim_services.new_GeneralizedPositionStepFunctions(*args))
    __swig_destroy__ = _sim_services.delete_GeneralizedPositionStepFunctions
    expmap_step_fun = property(_sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_get, _sim_services.GeneralizedPositionStepFunctions_expmap_step_fun_set)
    dexpinv_xform_fun = property(_sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_get, _sim_services.GeneralizedPositionStepFunctions_dexpinv_xform_fun_set)

# Register GeneralizedPositionStepFunctions in _sim_services:
_sim_services.GeneralizedPositionStepFunctions_swigregister(GeneralizedPositionStepFunctions)

class Integration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Unspecified = _sim_services.Integration_Unspecified
    Euler = _sim_services.Integration_Euler
    SymplecticEuler = _sim_services.Integration_SymplecticEuler
    Beeman = _sim_services.Integration_Beeman
    NystromLear2 = _sim_services.Integration_NystromLear2
    PositionVerlet = _sim_services.Integration_PositionVerlet
    RK2Heun = _sim_services.Integration_RK2Heun
    RK2Midpoint = _sim_services.Integration_RK2Midpoint
    VelocityVerlet = _sim_services.Integration_VelocityVerlet
    ModifiedMidpoint4 = _sim_services.Integration_ModifiedMidpoint4
    AdamsBashforthMoulton4 = _sim_services.Integration_AdamsBashforthMoulton4
    RungeKutta4 = _sim_services.Integration_RungeKutta4
    RKGill4 = _sim_services.Integration_RKGill4
    RKNystrom4 = _sim_services.Integration_RKNystrom4
    RKFehlberg45 = _sim_services.Integration_RKFehlberg45
    RKFehlberg78 = _sim_services.Integration_RKFehlberg78
    Unsupported = _sim_services.Integration_Unsupported
    Invalid = _sim_services.Integration_Invalid
    FirstOrderODE = _sim_services.Integration_FirstOrderODE
    SimpleSecondOrderODE = _sim_services.Integration_SimpleSecondOrderODE
    GeneralizedDerivSecondOrderODE = _sim_services.Integration_GeneralizedDerivSecondOrderODE
    GeneralizedStepSecondOrderODE = _sim_services.Integration_GeneralizedStepSecondOrderODE

# Register Integration in _sim_services:
_sim_services.Integration_swigregister(Integration)

class IntegratorConstructor(Er7UtilsDeletable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegratorConstructor

    def get_class_name(self, *args):
        return _sim_services.IntegratorConstructor_get_class_name(self, *args)

    def provides(self, *args):
        return _sim_services.IntegratorConstructor_provides(self, *args)

    def implements(self, *args):
        return _sim_services.IntegratorConstructor_implements(self, *args)

    def need_first_step_derivatives(self, *args):
        return _sim_services.IntegratorConstructor_need_first_step_derivatives(self, *args)

    def is_fixed_step_integrator(self, *args):
        return _sim_services.IntegratorConstructor_is_fixed_step_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_buffer_size(self, *args):
        return _sim_services.IntegratorConstructor_get_buffer_size(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.IntegratorConstructor_get_transition_table_size(self, *args)

    def create_copy(self, *args):
        return _sim_services.IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.IntegratorConstructor_create_integration_controls(self, *args)

    def create_integrator_results_merger(self, *args):
        return _sim_services.IntegratorConstructor_create_integrator_results_merger(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

# Register IntegratorConstructor in _sim_services:
_sim_services.IntegratorConstructor_swigregister(IntegratorConstructor)

class PrimingIntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_PrimingIntegratorConstructor

    def get_primer_constructor(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_primer_constructor(self, *args)

    def is_fixed_step_integrator(self, *args):
        return _sim_services.PrimingIntegratorConstructor_is_fixed_step_integrator(self, *args)

    def get_buffer_size(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_buffer_size(self, *args)

    def get_history_length(self, *args):
        return _sim_services.PrimingIntegratorConstructor_get_history_length(self, *args)

# Register PrimingIntegratorConstructor in _sim_services:
_sim_services.PrimingIntegratorConstructor_swigregister(PrimingIntegratorConstructor)

class RK4IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.RK4IntegratorConstructor_create_constructor(*args)

    def get_class_name(self, *args):
        return _sim_services.RK4IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RK4IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RK4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        _sim_services.RK4IntegratorConstructor_swiginit(self, _sim_services.new_RK4IntegratorConstructor())
    __swig_destroy__ = _sim_services.delete_RK4IntegratorConstructor

# Register RK4IntegratorConstructor in _sim_services:
_sim_services.RK4IntegratorConstructor_swigregister(RK4IntegratorConstructor)

def RK4IntegratorConstructor_create_constructor(*args):
    return _sim_services.RK4IntegratorConstructor_create_constructor(*args)

class ABM4IntegratorConstructor(PrimingIntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.ABM4IntegratorConstructor_create_constructor(*args)

    def __init__(self, *args):
        _sim_services.ABM4IntegratorConstructor_swiginit(self, _sim_services.new_ABM4IntegratorConstructor(*args))

    def get_class_name(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.ABM4IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.ABM4IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.ABM4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_transition_table_size(self, *args)

    def get_history_length(self, *args):
        return _sim_services.ABM4IntegratorConstructor_get_history_length(self, *args)
    __swig_destroy__ = _sim_services.delete_ABM4IntegratorConstructor

# Register ABM4IntegratorConstructor in _sim_services:
_sim_services.ABM4IntegratorConstructor_swigregister(ABM4IntegratorConstructor)

def ABM4IntegratorConstructor_create_constructor(*args):
    return _sim_services.ABM4IntegratorConstructor_create_constructor(*args)

class StateIntegratorInterface(Er7UtilsDeletable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_StateIntegratorInterface

    def reset_integrator(self, *args):
        return _sim_services.StateIntegratorInterface_reset_integrator(self, *args)

    def create_copy(self, *args):
        return _sim_services.StateIntegratorInterface_create_copy(self, *args)

# Register StateIntegratorInterface in _sim_services:
_sim_services.StateIntegratorInterface_swigregister(StateIntegratorInterface)

class IntegratorResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.IntegratorResult_swiginit(self, _sim_services.new_IntegratorResult(*args))

    def get_time_scale(self, *args):
        return _sim_services.IntegratorResult_get_time_scale(self, *args)

    def get_passed(self, *args):
        return _sim_services.IntegratorResult_get_passed(self, *args)

    def get_failure_mode(self, *args):
        return _sim_services.IntegratorResult_get_failure_mode(self, *args)

    def get_merge_count(self, *args):
        return _sim_services.IntegratorResult_get_merge_count(self, *args)

    def set_time_scale(self, *args):
        return _sim_services.IntegratorResult_set_time_scale(self, *args)

    def set_passed(self, *args):
        return _sim_services.IntegratorResult_set_passed(self, *args)

    def set_failed(self, *args):
        return _sim_services.IntegratorResult_set_failed(self, *args)

    def set_failure_mode(self, *args):
        return _sim_services.IntegratorResult_set_failure_mode(self, *args)

    def mark_as_integrated(self, *args):
        return _sim_services.IntegratorResult_mark_as_integrated(self, *args)

    def mark_as_not_integrated(self, *args):
        return _sim_services.IntegratorResult_mark_as_not_integrated(self, *args)

    def increment_merge_count(self, *args):
        return _sim_services.IntegratorResult_increment_merge_count(self, *args)
    __swig_destroy__ = _sim_services.delete_IntegratorResult

# Register IntegratorResult in _sim_services:
_sim_services.IntegratorResult_swigregister(IntegratorResult)

class FirstOrderODEIntegrator(StateIntegratorInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_FirstOrderODEIntegrator

    def create_copy(self, *args):
        return _sim_services.FirstOrderODEIntegrator_create_copy(self, *args)

    def set_controls(self, *args):
        return _sim_services.FirstOrderODEIntegrator_set_controls(self, *args)

    def integrate(self, *args):
        return _sim_services.FirstOrderODEIntegrator_integrate(self, *args)

# Register FirstOrderODEIntegrator in _sim_services:
_sim_services.FirstOrderODEIntegrator_swigregister(FirstOrderODEIntegrator)

class SecondOrderODEIntegrator(StateIntegratorInterface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_SecondOrderODEIntegrator

    def create_copy(self, *args):
        return _sim_services.SecondOrderODEIntegrator_create_copy(self, *args)

    def set_controls(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_controls(self, *args)

    def set_position_derivative_functions(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_position_derivative_functions(self, *args)

    def set_position_step_functions(self, *args):
        return _sim_services.SecondOrderODEIntegrator_set_position_step_functions(self, *args)

    def integrate(self, *args):
        return _sim_services.SecondOrderODEIntegrator_integrate(self, *args)

# Register SecondOrderODEIntegrator in _sim_services:
_sim_services.SecondOrderODEIntegrator_swigregister(SecondOrderODEIntegrator)

class IntegratorInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegratorInterface

    def get_dt(self, *args):
        return _sim_services.IntegratorInterface_get_dt(self, *args)

    def get_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_get_first_step_derivs_flag(self, *args)

    def set_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_set_first_step_derivs_flag(self, *args)

    def reset_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_reset_first_step_derivs_flag(self, *args)

    def restore_first_step_derivs_flag(self, *args):
        return _sim_services.IntegratorInterface_restore_first_step_derivs_flag(self, *args)

    def set_step_number(self, *args):
        return _sim_services.IntegratorInterface_set_step_number(self, *args)

    def set_time(self, *args):
        return _sim_services.IntegratorInterface_set_time(self, *args)

# Register IntegratorInterface in _sim_services:
_sim_services.IntegratorInterface_swigregister(IntegratorInterface)

class IntegrationControls(Er7UtilsDeletable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegrationControls

    def create_copy(self, *args):
        return _sim_services.IntegrationControls_create_copy(self, *args)

    def get_simtime(self, *args):
        return _sim_services.IntegrationControls_get_simtime(self, *args)

    def get_final_stage(self, *args):
        return _sim_services.IntegrationControls_get_final_stage(self, *args)

    def get_step_number(self, *args):
        return _sim_services.IntegrationControls_get_step_number(self, *args)

    def in_initial_cycle(self, *args):
        return _sim_services.IntegrationControls_in_initial_cycle(self, *args)

    def get_expected_step_number(self, *args):
        return _sim_services.IntegrationControls_get_expected_step_number(self, *args)

    def get_reset_needed(self, *args):
        return _sim_services.IntegrationControls_get_reset_needed(self, *args)

    def set_reset_needed(self, *args):
        return _sim_services.IntegrationControls_set_reset_needed(self, *args)

    def get_transition_table_element(self, *args):
        return _sim_services.IntegrationControls_get_transition_table_element(self, *args)

    def set_transition_table_element(self, *args):
        return _sim_services.IntegrationControls_set_transition_table_element(self, *args)

    def integrate(self, *args):
        return _sim_services.IntegrationControls_integrate(self, *args)

    def reset_integrator(self, *args):
        return _sim_services.IntegrationControls_reset_integrator(self, *args)

# Register IntegrationControls in _sim_services:
_sim_services.IntegrationControls_swigregister(IntegrationControls)

class BaseIntegrationGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_BaseIntegrationGroup

    def reset_integrators(self, *args):
        return _sim_services.BaseIntegrationGroup_reset_integrators(self, *args)

    def get_first_step_derivs_flag(self, *args):
        return _sim_services.BaseIntegrationGroup_get_first_step_derivs_flag(self, *args)

    def integrate_group(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group(self, *args)

    def integrate_group_from(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group_from(self, *args)

    def integrate_group_to(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_group_to(self, *args)

    def initialize_group(self, *args):
        return _sim_services.BaseIntegrationGroup_initialize_group(self, *args)

    def update_integration_interface(self, *args):
        return _sim_services.BaseIntegrationGroup_update_integration_interface(self, *args)

    def integrate_bodies(self, *args):
        return _sim_services.BaseIntegrationGroup_integrate_bodies(self, *args)

    def reset_body_integrators(self, *args):
        return _sim_services.BaseIntegrationGroup_reset_body_integrators(self, *args)

# Register BaseIntegrationGroup in _sim_services:
_sim_services.BaseIntegrationGroup_swigregister(BaseIntegrationGroup)

class TimeInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TimeInterface

    def update_time(self, *args):
        return _sim_services.TimeInterface_update_time(self, *args)

    def get_time_scale_factor(self, *args):
        return _sim_services.TimeInterface_get_time_scale_factor(self, *args)

# Register TimeInterface in _sim_services:
_sim_services.TimeInterface_swigregister(TimeInterface)

class TrickIntegrator(Integrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    InvalidIntegrationMode = _sim_services.TrickIntegrator_InvalidIntegrationMode
    UseFirstOrderIntegrator = _sim_services.TrickIntegrator_UseFirstOrderIntegrator
    UseSecondOrderIntegrator = _sim_services.TrickIntegrator_UseSecondOrderIntegrator
    __swig_destroy__ = _sim_services.delete_TrickIntegrator

    def integrate(self, *args):
        return _sim_services.TrickIntegrator_integrate(self, *args)

    def initialize(self, *args):
        return _sim_services.TrickIntegrator_initialize(self, *args)

    def integrate_1st_order_ode(self, *args):
        return _sim_services.TrickIntegrator_integrate_1st_order_ode(self, *args)

    def integrate_2nd_order_ode(self, *args):
        return _sim_services.TrickIntegrator_integrate_2nd_order_ode(self, *args)

# Register TrickIntegrator in _sim_services:
_sim_services.TrickIntegrator_swigregister(TrickIntegrator)

class TrickFirstOrderOdeIntegrator(TrickIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TrickFirstOrderOdeIntegrator

# Register TrickFirstOrderOdeIntegrator in _sim_services:
_sim_services.TrickFirstOrderOdeIntegrator_swigregister(TrickFirstOrderOdeIntegrator)

class ABM_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.ABM_IntegratorHelper_swiginit(self, _sim_services.new_ABM_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_ABM_IntegratorHelper

# Register ABM_IntegratorHelper in _sim_services:
_sim_services.ABM_IntegratorHelper_swigregister(ABM_IntegratorHelper)

class ABM_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_ABM_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.ABM_Integrator_get_Integrator_type(self, *args)

# Register ABM_Integrator in _sim_services:
_sim_services.ABM_Integrator_swigregister(ABM_Integrator)

class SymplecticEulerIntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_constructor(*args)

    def __init__(self, *args):
        _sim_services.SymplecticEulerIntegratorConstructor_swiginit(self, _sim_services.new_SymplecticEulerIntegratorConstructor(*args))
    __swig_destroy__ = _sim_services.delete_SymplecticEulerIntegratorConstructor

    def get_class_name(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_implements(self, *args)

    def create_copy(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.SymplecticEulerIntegratorConstructor_get_transition_table_size(self, *args)

# Register SymplecticEulerIntegratorConstructor in _sim_services:
_sim_services.SymplecticEulerIntegratorConstructor_swigregister(SymplecticEulerIntegratorConstructor)

def SymplecticEulerIntegratorConstructor_create_constructor(*args):
    return _sim_services.SymplecticEulerIntegratorConstructor_create_constructor(*args)

class TrickSecondOrderOdeIntegrator(TrickIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_TrickSecondOrderOdeIntegrator

# Register TrickSecondOrderOdeIntegrator in _sim_services:
_sim_services.TrickSecondOrderOdeIntegrator_swigregister(TrickSecondOrderOdeIntegrator)

class Euler_Cromer_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.Euler_Cromer_IntegratorHelper_swiginit(self, _sim_services.new_Euler_Cromer_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_Euler_Cromer_IntegratorHelper

# Register Euler_Cromer_IntegratorHelper in _sim_services:
_sim_services.Euler_Cromer_IntegratorHelper_swigregister(Euler_Cromer_IntegratorHelper)

class Euler_Cromer_Integrator(TrickSecondOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Euler_Cromer_Integrator_swiginit(self, _sim_services.new_Euler_Cromer_Integrator(*args))

    def integrate(self, *args):
        return _sim_services.Euler_Cromer_Integrator_integrate(self, *args)
    __swig_destroy__ = _sim_services.delete_Euler_Cromer_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.Euler_Cromer_Integrator_get_Integrator_type(self, *args)

# Register Euler_Cromer_Integrator in _sim_services:
_sim_services.Euler_Cromer_Integrator_swigregister(Euler_Cromer_Integrator)

class EulerIntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.EulerIntegratorConstructor_create_constructor(*args)

    def __init__(self, *args):
        _sim_services.EulerIntegratorConstructor_swiginit(self, _sim_services.new_EulerIntegratorConstructor(*args))
    __swig_destroy__ = _sim_services.delete_EulerIntegratorConstructor

    def get_class_name(self, *args):
        return _sim_services.EulerIntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.EulerIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.EulerIntegratorConstructor_get_transition_table_size(self, *args)

# Register EulerIntegratorConstructor in _sim_services:
_sim_services.EulerIntegratorConstructor_swigregister(EulerIntegratorConstructor)

def EulerIntegratorConstructor_create_constructor(*args):
    return _sim_services.EulerIntegratorConstructor_create_constructor(*args)

class Euler_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.Euler_IntegratorHelper_swiginit(self, _sim_services.new_Euler_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_Euler_IntegratorHelper

# Register Euler_IntegratorHelper in _sim_services:
_sim_services.Euler_IntegratorHelper_swigregister(Euler_IntegratorHelper)

class Euler_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Euler_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.Euler_Integrator_get_Integrator_type(self, *args)

# Register Euler_Integrator in _sim_services:
_sim_services.Euler_Integrator_swigregister(Euler_Integrator)

class MM4IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.MM4IntegratorConstructor_create_constructor(*args)

    def get_class_name(self, *args):
        return _sim_services.MM4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.MM4IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.MM4IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.MM4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.MM4IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.MM4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        _sim_services.MM4IntegratorConstructor_swiginit(self, _sim_services.new_MM4IntegratorConstructor())
    __swig_destroy__ = _sim_services.delete_MM4IntegratorConstructor

# Register MM4IntegratorConstructor in _sim_services:
_sim_services.MM4IntegratorConstructor_swigregister(MM4IntegratorConstructor)

def MM4IntegratorConstructor_create_constructor(*args):
    return _sim_services.MM4IntegratorConstructor_create_constructor(*args)

class MM4_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.MM4_IntegratorHelper_swiginit(self, _sim_services.new_MM4_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_MM4_IntegratorHelper

# Register MM4_IntegratorHelper in _sim_services:
_sim_services.MM4_IntegratorHelper_swigregister(MM4_IntegratorHelper)

class MM4_Integrator(TrickSecondOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_MM4_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.MM4_Integrator_get_Integrator_type(self, *args)

# Register MM4_Integrator in _sim_services:
_sim_services.MM4_Integrator_swigregister(MM4_Integrator)

class NystromLear2IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.NystromLear2IntegratorConstructor_create_constructor(*args)

    def __init__(self, *args):
        _sim_services.NystromLear2IntegratorConstructor_swiginit(self, _sim_services.new_NystromLear2IntegratorConstructor(*args))
    __swig_destroy__ = _sim_services.delete_NystromLear2IntegratorConstructor

    def get_class_name(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_implements(self, *args)

    def provides(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_provides(self, *args)

    def create_copy(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def is_second_order_ode_technique(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_is_second_order_ode_technique(self, *args)

    def need_first_step_derivatives(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_need_first_step_derivatives(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.NystromLear2IntegratorConstructor_get_transition_table_size(self, *args)

# Register NystromLear2IntegratorConstructor in _sim_services:
_sim_services.NystromLear2IntegratorConstructor_swigregister(NystromLear2IntegratorConstructor)

def NystromLear2IntegratorConstructor_create_constructor(*args):
    return _sim_services.NystromLear2IntegratorConstructor_create_constructor(*args)

class NL2_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.NL2_IntegratorHelper_swiginit(self, _sim_services.new_NL2_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_NL2_IntegratorHelper

# Register NL2_IntegratorHelper in _sim_services:
_sim_services.NL2_IntegratorHelper_swigregister(NL2_IntegratorHelper)

class NL2_Integrator(TrickSecondOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_NL2_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.NL2_Integrator_get_Integrator_type(self, *args)

# Register NL2_Integrator in _sim_services:
_sim_services.NL2_Integrator_swigregister(NL2_Integrator)

class RK2HeunIntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.RK2HeunIntegratorConstructor_create_constructor(*args)

    def __init__(self, *args):
        _sim_services.RK2HeunIntegratorConstructor_swiginit(self, _sim_services.new_RK2HeunIntegratorConstructor(*args))
    __swig_destroy__ = _sim_services.delete_RK2HeunIntegratorConstructor

    def get_class_name(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RK2HeunIntegratorConstructor_get_transition_table_size(self, *args)

# Register RK2HeunIntegratorConstructor in _sim_services:
_sim_services.RK2HeunIntegratorConstructor_swigregister(RK2HeunIntegratorConstructor)

def RK2HeunIntegratorConstructor_create_constructor(*args):
    return _sim_services.RK2HeunIntegratorConstructor_create_constructor(*args)

class RK2_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RK2_IntegratorHelper_swiginit(self, _sim_services.new_RK2_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_RK2_IntegratorHelper

# Register RK2_IntegratorHelper in _sim_services:
_sim_services.RK2_IntegratorHelper_swigregister(RK2_IntegratorHelper)

class RK2_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RK2_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.RK2_Integrator_get_Integrator_type(self, *args)

# Register RK2_Integrator in _sim_services:
_sim_services.RK2_Integrator_swigregister(RK2_Integrator)

class RK4_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RK4_IntegratorHelper_swiginit(self, _sim_services.new_RK4_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_RK4_IntegratorHelper

# Register RK4_IntegratorHelper in _sim_services:
_sim_services.RK4_IntegratorHelper_swigregister(RK4_IntegratorHelper)

class RK4_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RK4_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.RK4_Integrator_get_Integrator_type(self, *args)

# Register RK4_Integrator in _sim_services:
_sim_services.RK4_Integrator_swigregister(RK4_Integrator)

class RKFehlberg45IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_constructor(*args)

    def get_class_name(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKFehlberg45IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        _sim_services.RKFehlberg45IntegratorConstructor_swiginit(self, _sim_services.new_RKFehlberg45IntegratorConstructor())
    __swig_destroy__ = _sim_services.delete_RKFehlberg45IntegratorConstructor

# Register RKFehlberg45IntegratorConstructor in _sim_services:
_sim_services.RKFehlberg45IntegratorConstructor_swigregister(RKFehlberg45IntegratorConstructor)

def RKFehlberg45IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKFehlberg45IntegratorConstructor_create_constructor(*args)

class RKF45_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RKF45_IntegratorHelper_swiginit(self, _sim_services.new_RKF45_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_RKF45_IntegratorHelper

# Register RKF45_IntegratorHelper in _sim_services:
_sim_services.RKF45_IntegratorHelper_swigregister(RKF45_IntegratorHelper)

class RKF45_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKF45_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.RKF45_Integrator_get_Integrator_type(self, *args)

# Register RKF45_Integrator in _sim_services:
_sim_services.RKF45_Integrator_swigregister(RKF45_Integrator)

class RKFehlberg78IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_constructor(*args)

    def get_class_name(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_get_class_name(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKFehlberg78IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        _sim_services.RKFehlberg78IntegratorConstructor_swiginit(self, _sim_services.new_RKFehlberg78IntegratorConstructor())
    __swig_destroy__ = _sim_services.delete_RKFehlberg78IntegratorConstructor

# Register RKFehlberg78IntegratorConstructor in _sim_services:
_sim_services.RKFehlberg78IntegratorConstructor_swigregister(RKFehlberg78IntegratorConstructor)

def RKFehlberg78IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKFehlberg78IntegratorConstructor_create_constructor(*args)

class RKF78_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RKF78_IntegratorHelper_swiginit(self, _sim_services.new_RKF78_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_RKF78_IntegratorHelper

# Register RKF78_IntegratorHelper in _sim_services:
_sim_services.RKF78_IntegratorHelper_swigregister(RKF78_IntegratorHelper)

class RKF78_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKF78_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.RKF78_Integrator_get_Integrator_type(self, *args)

# Register RKF78_Integrator in _sim_services:
_sim_services.RKF78_Integrator_swigregister(RKF78_Integrator)

class RKGill4IntegratorConstructor(IntegratorConstructor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def create_constructor(*args):
        return _sim_services.RKGill4IntegratorConstructor_create_constructor(*args)

    def get_class_name(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_get_class_name(self, *args)

    def implements(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_implements(self, *args)

    def create_copy(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_copy(self, *args)

    def create_integration_controls(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_integration_controls(self, *args)

    def create_first_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_first_order_ode_integrator(self, *args)

    def create_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_second_order_ode_integrator(self, *args)

    def create_generalized_deriv_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_generalized_deriv_second_order_ode_integrator(self, *args)

    def create_generalized_step_second_order_ode_integrator(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_create_generalized_step_second_order_ode_integrator(self, *args)

    def get_transition_table_size(self, *args):
        return _sim_services.RKGill4IntegratorConstructor_get_transition_table_size(self, *args)

    def __init__(self):
        _sim_services.RKGill4IntegratorConstructor_swiginit(self, _sim_services.new_RKGill4IntegratorConstructor())
    __swig_destroy__ = _sim_services.delete_RKGill4IntegratorConstructor

# Register RKGill4IntegratorConstructor in _sim_services:
_sim_services.RKGill4IntegratorConstructor_swigregister(RKGill4IntegratorConstructor)

def RKGill4IntegratorConstructor_create_constructor(*args):
    return _sim_services.RKGill4IntegratorConstructor_create_constructor(*args)

class RKG4_IntegratorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RKG4_IntegratorHelper_swiginit(self, _sim_services.new_RKG4_IntegratorHelper())
    __swig_destroy__ = _sim_services.delete_RKG4_IntegratorHelper

# Register RKG4_IntegratorHelper in _sim_services:
_sim_services.RKG4_IntegratorHelper_swigregister(RKG4_IntegratorHelper)

class RKG4_Integrator(TrickFirstOrderOdeIntegrator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RKG4_Integrator

    def get_Integrator_type(self, *args):
        return _sim_services.RKG4_Integrator_get_Integrator_type(self, *args)

# Register RKG4_Integrator in _sim_services:
_sim_services.RKG4_Integrator_swigregister(RKG4_Integrator)

class TIME_OFFSET(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    day = property(_sim_services.TIME_OFFSET_day_get, _sim_services.TIME_OFFSET_day_set)
    hour = property(_sim_services.TIME_OFFSET_hour_get, _sim_services.TIME_OFFSET_hour_set)
    min = property(_sim_services.TIME_OFFSET_min_get, _sim_services.TIME_OFFSET_min_set)
    sec = property(_sim_services.TIME_OFFSET_sec_get, _sim_services.TIME_OFFSET_sec_set)

    def __init__(self):
        _sim_services.TIME_OFFSET_swiginit(self, _sim_services.new_TIME_OFFSET())
    __swig_destroy__ = _sim_services.delete_TIME_OFFSET

# Register TIME_OFFSET in _sim_services:
_sim_services.TIME_OFFSET_swigregister(TIME_OFFSET)

class SimTime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ret_time = property(_sim_services.SimTime_ret_time_get, _sim_services.SimTime_ret_time_set)
    gmt_ref = property(_sim_services.SimTime_gmt_ref_get, _sim_services.SimTime_gmt_ref_set)
    gmt_sec_ref = property(_sim_services.SimTime_gmt_sec_ref_get, _sim_services.SimTime_gmt_sec_ref_set)
    gmt_time = property(_sim_services.SimTime_gmt_time_get, _sim_services.SimTime_gmt_time_set)
    met_ref = property(_sim_services.SimTime_met_ref_get, _sim_services.SimTime_met_ref_set)
    met_sec_ref = property(_sim_services.SimTime_met_sec_ref_get, _sim_services.SimTime_met_sec_ref_set)
    met_time = property(_sim_services.SimTime_met_time_get, _sim_services.SimTime_met_time_set)

    def __init__(self, *args):
        _sim_services.SimTime_swiginit(self, _sim_services.new_SimTime(*args))

    def init_times(self, *args):
        return _sim_services.SimTime_init_times(self, *args)

    def get_rettime(self, *args):
        return _sim_services.SimTime_get_rettime(self, *args)

    def get_gmttime(self, *args):
        return _sim_services.SimTime_get_gmttime(self, *args)

    def get_mettime(self, *args):
        return _sim_services.SimTime_get_mettime(self, *args)

    def get_rettime_struct(self, *args):
        return _sim_services.SimTime_get_rettime_struct(self, *args)

    def get_gmttime_struct(self, *args):
        return _sim_services.SimTime_get_gmttime_struct(self, *args)

    def get_mettime_struct(self, *args):
        return _sim_services.SimTime_get_mettime_struct(self, *args)
    __swig_destroy__ = _sim_services.delete_SimTime

# Register SimTime in _sim_services:
_sim_services.SimTime_swigregister(SimTime)


def get_rettime(*args):
    return _sim_services.get_rettime(*args)

def get_gmttime(*args):
    return _sim_services.get_gmttime(*args)

def get_mettime(*args):
    return _sim_services.get_mettime(*args)

def get_rettime_struct(*args):
    return _sim_services.get_rettime_struct(*args)

def get_gmttime_struct(*args):
    return _sim_services.get_gmttime_struct(*args)

def get_mettime_struct(*args):
    return _sim_services.get_mettime_struct(*args)
MS_ERROR_TIME = _sim_services.MS_ERROR_TIME
MS_ERROR_PORT = _sim_services.MS_ERROR_PORT
MS_ERROR_NAME = _sim_services.MS_ERROR_NAME
MS_NoCmd = _sim_services.MS_NoCmd
MS_FreezeCmd = _sim_services.MS_FreezeCmd
MS_RunCmd = _sim_services.MS_RunCmd
MS_ExitCmd = _sim_services.MS_ExitCmd
MS_ErrorCmd = _sim_services.MS_ErrorCmd
MS_ReconnectCmd = _sim_services.MS_ReconnectCmd
MS_ChkpntDumpAsciiCmd = _sim_services.MS_ChkpntDumpAsciiCmd
MS_ChkpntLoadAsciiCmd = _sim_services.MS_ChkpntLoadAsciiCmd
class MSConnect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_MSConnect

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSConnect_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSConnect_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSConnect_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSConnect_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSConnect_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSConnect_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSConnect_read_time(self, *args)

    def read_port(self, *args):
        return _sim_services.MSConnect_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSConnect_read_name(self, *args)

    def read_command(self, *args):
        return _sim_services.MSConnect_read_command(self, *args)

    def write_time(self, *args):
        return _sim_services.MSConnect_write_time(self, *args)

    def write_port(self, *args):
        return _sim_services.MSConnect_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSConnect_write_name(self, *args)

    def write_command(self, *args):
        return _sim_services.MSConnect_write_command(self, *args)
    sync_wait_limit = property(_sim_services.MSConnect_sync_wait_limit_get, _sim_services.MSConnect_sync_wait_limit_set)

# Register MSConnect in _sim_services:
_sim_services.MSConnect_swigregister(MSConnect)

class MSSocket(MSConnect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MSSocket_swiginit(self, _sim_services.new_MSSocket(*args))
    __swig_destroy__ = _sim_services.delete_MSSocket

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSSocket_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSSocket_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSSocket_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSSocket_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSSocket_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSSocket_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSSocket_read_time(self, *args)

    def read_command(self, *args):
        return _sim_services.MSSocket_read_command(self, *args)

    def read_port(self, *args):
        return _sim_services.MSSocket_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSSocket_read_name(self, *args)

    def write_time(self, *args):
        return _sim_services.MSSocket_write_time(self, *args)

    def write_command(self, *args):
        return _sim_services.MSSocket_write_command(self, *args)

    def write_port(self, *args):
        return _sim_services.MSSocket_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSSocket_write_name(self, *args)
    tc_dev = property(_sim_services.MSSocket_tc_dev_get, _sim_services.MSSocket_tc_dev_set)
    sync_port_tag = property(_sim_services.MSSocket_sync_port_tag_get, _sim_services.MSSocket_sync_port_tag_set)

# Register MSSocket in _sim_services:
_sim_services.MSSocket_swigregister(MSSocket)

TSM_SUCCESS = _sim_services.TSM_SUCCESS
TSM_FAIL = _sim_services.TSM_FAIL
TSM_MAX_TIMEOUT_LIMIT = _sim_services.TSM_MAX_TIMEOUT_LIMIT
class TSMDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    size = property(_sim_services.TSMDevice_size_get, _sim_services.TSMDevice_size_set)
    addr = property(_sim_services.TSMDevice_addr_get, _sim_services.TSMDevice_addr_set)
    key_file = property(_sim_services.TSMDevice_key_file_get, _sim_services.TSMDevice_key_file_set)
    key_id = property(_sim_services.TSMDevice_key_id_get, _sim_services.TSMDevice_key_id_set)
    key = property(_sim_services.TSMDevice_key_get, _sim_services.TSMDevice_key_set)
    shmid = property(_sim_services.TSMDevice_shmid_get, _sim_services.TSMDevice_shmid_set)
    timeout_limit = property(_sim_services.TSMDevice_timeout_limit_get, _sim_services.TSMDevice_timeout_limit_set)
    default_val = property(_sim_services.TSMDevice_default_val_get, _sim_services.TSMDevice_default_val_set)
    use_lock = property(_sim_services.TSMDevice_use_lock_get, _sim_services.TSMDevice_use_lock_set)
    rwlattr = property(_sim_services.TSMDevice_rwlattr_get, _sim_services.TSMDevice_rwlattr_set)
    rwlock_addr = property(_sim_services.TSMDevice_rwlock_addr_get, _sim_services.TSMDevice_rwlock_addr_set)

    def __init__(self):
        _sim_services.TSMDevice_swiginit(self, _sim_services.new_TSMDevice())
    __swig_destroy__ = _sim_services.delete_TSMDevice

# Register TSMDevice in _sim_services:
_sim_services.TSMDevice_swigregister(TSMDevice)

MSQ_MAXSIZE = _sim_services.MSQ_MAXSIZE
class MSSharedMemData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    master_pid = property(_sim_services.MSSharedMemData_master_pid_get, _sim_services.MSSharedMemData_master_pid_set)
    master_time = property(_sim_services.MSSharedMemData_master_time_get, _sim_services.MSSharedMemData_master_time_set)
    master_time_front = property(_sim_services.MSSharedMemData_master_time_front_get, _sim_services.MSSharedMemData_master_time_front_set)
    master_time_back = property(_sim_services.MSSharedMemData_master_time_back_get, _sim_services.MSSharedMemData_master_time_back_set)
    master_command = property(_sim_services.MSSharedMemData_master_command_get, _sim_services.MSSharedMemData_master_command_set)
    master_command_front = property(_sim_services.MSSharedMemData_master_command_front_get, _sim_services.MSSharedMemData_master_command_front_set)
    master_command_back = property(_sim_services.MSSharedMemData_master_command_back_get, _sim_services.MSSharedMemData_master_command_back_set)
    slave_command = property(_sim_services.MSSharedMemData_slave_command_get, _sim_services.MSSharedMemData_slave_command_set)
    slave_command_front = property(_sim_services.MSSharedMemData_slave_command_front_get, _sim_services.MSSharedMemData_slave_command_front_set)
    slave_command_back = property(_sim_services.MSSharedMemData_slave_command_back_get, _sim_services.MSSharedMemData_slave_command_back_set)
    slave_port = property(_sim_services.MSSharedMemData_slave_port_get, _sim_services.MSSharedMemData_slave_port_set)
    chkpnt_name = property(_sim_services.MSSharedMemData_chkpnt_name_get, _sim_services.MSSharedMemData_chkpnt_name_set)

    def __init__(self):
        _sim_services.MSSharedMemData_swiginit(self, _sim_services.new_MSSharedMemData())
    __swig_destroy__ = _sim_services.delete_MSSharedMemData

# Register MSSharedMemData in _sim_services:
_sim_services.MSSharedMemData_swigregister(MSSharedMemData)

class MSSharedMem(MSConnect):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MSSharedMem_swiginit(self, _sim_services.new_MSSharedMem(*args))
    __swig_destroy__ = _sim_services.delete_MSSharedMem

    def set_sync_wait_limit(self, *args):
        return _sim_services.MSSharedMem_set_sync_wait_limit(self, *args)

    def add_sim_args(self, *args):
        return _sim_services.MSSharedMem_add_sim_args(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MSSharedMem_process_sim_args(self, *args)

    def accept(self, *args):
        return _sim_services.MSSharedMem_accept(self, *args)

    def connect(self, *args):
        return _sim_services.MSSharedMem_connect(self, *args)

    def disconnect(self, *args):
        return _sim_services.MSSharedMem_disconnect(self, *args)

    def read_time(self, *args):
        return _sim_services.MSSharedMem_read_time(self, *args)

    def read_command(self, *args):
        return _sim_services.MSSharedMem_read_command(self, *args)

    def read_port(self, *args):
        return _sim_services.MSSharedMem_read_port(self, *args)

    def read_name(self, *args):
        return _sim_services.MSSharedMem_read_name(self, *args)

    def write_time(self, *args):
        return _sim_services.MSSharedMem_write_time(self, *args)

    def write_command(self, *args):
        return _sim_services.MSSharedMem_write_command(self, *args)

    def write_port(self, *args):
        return _sim_services.MSSharedMem_write_port(self, *args)

    def write_name(self, *args):
        return _sim_services.MSSharedMem_write_name(self, *args)

    def read_wait(self, *args):
        return _sim_services.MSSharedMem_read_wait(self, *args)
    tsm_dev = property(_sim_services.MSSharedMem_tsm_dev_get, _sim_services.MSSharedMem_tsm_dev_set)
    shm_addr = property(_sim_services.MSSharedMem_shm_addr_get, _sim_services.MSSharedMem_shm_addr_set)

# Register MSSharedMem in _sim_services:
_sim_services.MSSharedMem_swigregister(MSSharedMem)

TRICK_SSH = _sim_services.TRICK_SSH
TRICK_RSH = _sim_services.TRICK_RSH
TRICK_USER_REMOTE_SH = _sim_services.TRICK_USER_REMOTE_SH
class slaveVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _sim_services.slaveVector_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _sim_services.slaveVector___nonzero__(self, *args)

    def __bool__(self, *args):
        return _sim_services.slaveVector___bool__(self, *args)

    def __len__(self, *args):
        return _sim_services.slaveVector___len__(self, *args)

    def __getslice__(self, *args):
        return _sim_services.slaveVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _sim_services.slaveVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _sim_services.slaveVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _sim_services.slaveVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_services.slaveVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_services.slaveVector___setitem__(self, *args)

    def pop(self, *args):
        return _sim_services.slaveVector_pop(self, *args)

    def append(self, *args):
        return _sim_services.slaveVector_append(self, *args)

    def empty(self, *args):
        return _sim_services.slaveVector_empty(self, *args)

    def size(self, *args):
        return _sim_services.slaveVector_size(self, *args)

    def swap(self, *args):
        return _sim_services.slaveVector_swap(self, *args)

    def begin(self, *args):
        return _sim_services.slaveVector_begin(self, *args)

    def end(self, *args):
        return _sim_services.slaveVector_end(self, *args)

    def rbegin(self, *args):
        return _sim_services.slaveVector_rbegin(self, *args)

    def rend(self, *args):
        return _sim_services.slaveVector_rend(self, *args)

    def clear(self, *args):
        return _sim_services.slaveVector_clear(self, *args)

    def get_allocator(self, *args):
        return _sim_services.slaveVector_get_allocator(self, *args)

    def pop_back(self, *args):
        return _sim_services.slaveVector_pop_back(self, *args)

    def erase(self, *args):
        return _sim_services.slaveVector_erase(self, *args)

    def __init__(self, *args):
        _sim_services.slaveVector_swiginit(self, _sim_services.new_slaveVector(*args))

    def push_back(self, *args):
        return _sim_services.slaveVector_push_back(self, *args)

    def front(self, *args):
        return _sim_services.slaveVector_front(self, *args)

    def back(self, *args):
        return _sim_services.slaveVector_back(self, *args)

    def assign(self, *args):
        return _sim_services.slaveVector_assign(self, *args)

    def resize(self, *args):
        return _sim_services.slaveVector_resize(self, *args)

    def insert(self, *args):
        return _sim_services.slaveVector_insert(self, *args)

    def reserve(self, *args):
        return _sim_services.slaveVector_reserve(self, *args)

    def capacity(self, *args):
        return _sim_services.slaveVector_capacity(self, *args)
    __swig_destroy__ = _sim_services.delete_slaveVector

# Register slaveVector in _sim_services:
_sim_services.slaveVector_swigregister(slaveVector)

class SlaveInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.SlaveInfo_swiginit(self, _sim_services.new_SlaveInfo(*args))
    enabled = property(_sim_services.SlaveInfo_enabled_get, _sim_services.SlaveInfo_enabled_set)
    activated = property(_sim_services.SlaveInfo_activated_get, _sim_services.SlaveInfo_activated_set)
    slave_type = property(_sim_services.SlaveInfo_slave_type_get, _sim_services.SlaveInfo_slave_type_set)
    remote_shell = property(_sim_services.SlaveInfo_remote_shell_get, _sim_services.SlaveInfo_remote_shell_set)
    user_remote_shell = property(_sim_services.SlaveInfo_user_remote_shell_get, _sim_services.SlaveInfo_user_remote_shell_set)
    remote_shell_args = property(_sim_services.SlaveInfo_remote_shell_args_get, _sim_services.SlaveInfo_remote_shell_args_set)
    machine_name = property(_sim_services.SlaveInfo_machine_name_get, _sim_services.SlaveInfo_machine_name_set)
    machine_display = property(_sim_services.SlaveInfo_machine_display_get, _sim_services.SlaveInfo_machine_display_set)
    sim_path = property(_sim_services.SlaveInfo_sim_path_get, _sim_services.SlaveInfo_sim_path_set)
    remote_shell_config_file = property(_sim_services.SlaveInfo_remote_shell_config_file_get, _sim_services.SlaveInfo_remote_shell_config_file_set)
    S_main_name = property(_sim_services.SlaveInfo_S_main_name_get, _sim_services.SlaveInfo_S_main_name_set)
    chkpnt_dump_auto = property(_sim_services.SlaveInfo_chkpnt_dump_auto_get, _sim_services.SlaveInfo_chkpnt_dump_auto_set)
    chkpnt_load_auto = property(_sim_services.SlaveInfo_chkpnt_load_auto_get, _sim_services.SlaveInfo_chkpnt_load_auto_set)
    chkpnt_name = property(_sim_services.SlaveInfo_chkpnt_name_get, _sim_services.SlaveInfo_chkpnt_name_set)
    run_input_file = property(_sim_services.SlaveInfo_run_input_file_get, _sim_services.SlaveInfo_run_input_file_set)
    other_args = property(_sim_services.SlaveInfo_other_args_get, _sim_services.SlaveInfo_other_args_set)
    sync_error_terminate = property(_sim_services.SlaveInfo_sync_error_terminate_get, _sim_services.SlaveInfo_sync_error_terminate_set)
    sync_wait_limit = property(_sim_services.SlaveInfo_sync_wait_limit_get, _sim_services.SlaveInfo_sync_wait_limit_set)
    reconnect_wait_limit = property(_sim_services.SlaveInfo_reconnect_wait_limit_get, _sim_services.SlaveInfo_reconnect_wait_limit_set)
    reconnect_count = property(_sim_services.SlaveInfo_reconnect_count_get, _sim_services.SlaveInfo_reconnect_count_set)
    connection = property(_sim_services.SlaveInfo_connection_get, _sim_services.SlaveInfo_connection_set)

    def set_connection_type(self, *args):
        return _sim_services.SlaveInfo_set_connection_type(self, *args)

    def start(self, *args):
        return _sim_services.SlaveInfo_start(self, *args)

    def read_slave_status(self, *args):
        return _sim_services.SlaveInfo_read_slave_status(self, *args)

    def write_master_status(self, *args):
        return _sim_services.SlaveInfo_write_master_status(self, *args)

    def write_master_chkpnt_name(self, *args):
        return _sim_services.SlaveInfo_write_master_chkpnt_name(self, *args)
    __swig_destroy__ = _sim_services.delete_SlaveInfo

# Register SlaveInfo in _sim_services:
_sim_services.SlaveInfo_swigregister(SlaveInfo)

class Master(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Master_swiginit(self, _sim_services.new_Master(*args))
    enabled = property(_sim_services.Master_enabled_get, _sim_services.Master_enabled_set)
    num_slaves = property(_sim_services.Master_num_slaves_get, _sim_services.Master_num_slaves_set)
    slaves = property(_sim_services.Master_slaves_get, _sim_services.Master_slaves_set)

    def enable(self, *args):
        return _sim_services.Master_enable(self, *args)

    def disable(self, *args):
        return _sim_services.Master_disable(self, *args)

    def add_slave(self, *args):
        return _sim_services.Master_add_slave(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Master_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Master_init(self, *args)

    def end_of_frame_status_from_slave(self, *args):
        return _sim_services.Master_end_of_frame_status_from_slave(self, *args)

    def end_of_frame_status_to_slave(self, *args):
        return _sim_services.Master_end_of_frame_status_to_slave(self, *args)

    def freeze_init(self, *args):
        return _sim_services.Master_freeze_init(self, *args)

    def freeze(self, *args):
        return _sim_services.Master_freeze(self, *args)

    def checkpoint(self, *args):
        return _sim_services.Master_checkpoint(self, *args)

    def preload_checkpoint(self, *args):
        return _sim_services.Master_preload_checkpoint(self, *args)

    def unfreeze(self, *args):
        return _sim_services.Master_unfreeze(self, *args)

    def shutdown(self, *args):
        return _sim_services.Master_shutdown(self, *args)
    __swig_destroy__ = _sim_services.delete_Master

# Register Master in _sim_services:
_sim_services.Master_swigregister(Master)

class MonteCarloVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Undefined = _sim_services.MonteCarloVariable_Undefined
    Calculated = _sim_services.MonteCarloVariable_Calculated
    Constant = _sim_services.MonteCarloVariable_Constant
    Execute = _sim_services.MonteCarloVariable_Execute
    Prescribed = _sim_services.MonteCarloVariable_Prescribed
    Random = _sim_services.MonteCarloVariable_Random
    units = property(_sim_services.MonteCarloVariable_units_get, _sim_services.MonteCarloVariable_units_set)
    include_in_summary = property(_sim_services.MonteCarloVariable_include_in_summary_get, _sim_services.MonteCarloVariable_include_in_summary_set)
    __swig_destroy__ = _sim_services.delete_MonteCarloVariable

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariable_generate_assignment(self, *args)

    def shutdown(self, *args):
        return _sim_services.MonteCarloVariable_shutdown(self, *args)

    def get_command(self, *args):
        return _sim_services.MonteCarloVariable_get_command(self, *args)

    def get_variable_name(self, *args):
        return _sim_services.MonteCarloVariable_get_variable_name(self, *args)

    def get_assignment(self, *args):
        return _sim_services.MonteCarloVariable_get_assignment(self, *args)

    def get_type(self, *args):
        return _sim_services.MonteCarloVariable_get_type(self, *args)

    def get_type_str(self, *args):
        return _sim_services.MonteCarloVariable_get_type_str(self, *args)

    def get_seed(self, *args):
        return _sim_services.MonteCarloVariable_get_seed(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariable_summarize_variable(self, *args)

# Register MonteCarloVariable in _sim_services:
_sim_services.MonteCarloVariable_swigregister(MonteCarloVariable)

class MonteCarloVariableFile(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_skip = property(_sim_services.MonteCarloVariableFile_max_skip_get, _sim_services.MonteCarloVariableFile_max_skip_set)
    is_dependent = property(_sim_services.MonteCarloVariableFile_is_dependent_get, _sim_services.MonteCarloVariableFile_is_dependent_set)

    def __init__(self, *args):
        _sim_services.MonteCarloVariableFile_swiginit(self, _sim_services.new_MonteCarloVariableFile(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableFile

    def initialize_file(self, *args):
        return _sim_services.MonteCarloVariableFile_initialize_file(self, *args)

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableFile_generate_assignment(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariableFile_summarize_variable(self, *args)

    def register_dependent(self, *args):
        return _sim_services.MonteCarloVariableFile_register_dependent(self, *args)

    def shutdown(self, *args):
        return _sim_services.MonteCarloVariableFile_shutdown(self, *args)

    def has_dependents(self, *args):
        return _sim_services.MonteCarloVariableFile_has_dependents(self, *args)

    def get_column_number(self, *args):
        return _sim_services.MonteCarloVariableFile_get_column_number(self, *args)

    def get_first_column_number(self, *args):
        return _sim_services.MonteCarloVariableFile_get_first_column_number(self, *args)

    def get_filename(self, *args):
        return _sim_services.MonteCarloVariableFile_get_filename(self, *args)

    def get_dependents(self, *args):
        return _sim_services.MonteCarloVariableFile_get_dependents(self, *args)

# Register MonteCarloVariableFile in _sim_services:
_sim_services.MonteCarloVariableFile_swigregister(MonteCarloVariableFile)

class MonteCarloPythonLineExec(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    instruction_set = property(_sim_services.MonteCarloPythonLineExec_instruction_set_get, _sim_services.MonteCarloPythonLineExec_instruction_set_set)

    def __init__(self, *args):
        _sim_services.MonteCarloPythonLineExec_swiginit(self, _sim_services.new_MonteCarloPythonLineExec(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloPythonLineExec

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloPythonLineExec_generate_assignment(self, *args)

# Register MonteCarloPythonLineExec in _sim_services:
_sim_services.MonteCarloPythonLineExec_swigregister(MonteCarloPythonLineExec)

class MonteCarloPythonFileExec(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloPythonFileExec_swiginit(self, _sim_services.new_MonteCarloPythonFileExec(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloPythonFileExec

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloPythonFileExec_generate_assignment(self, *args)

# Register MonteCarloPythonFileExec in _sim_services:
_sim_services.MonteCarloPythonFileExec_swigregister(MonteCarloPythonFileExec)

class MonteCarloVariableRandom(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandom

    def get_seed(self, *args):
        return _sim_services.MonteCarloVariableRandom_get_seed(self, *args)

# Register MonteCarloVariableRandom in _sim_services:
_sim_services.MonteCarloVariableRandom_swigregister(MonteCarloVariableRandom)

class MonteCarloVariableFixed(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloVariableFixed_swiginit(self, _sim_services.new_MonteCarloVariableFixed(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableFixed

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableFixed_generate_assignment(self, *args)

# Register MonteCarloVariableFixed in _sim_services:
_sim_services.MonteCarloVariableFixed_swigregister(MonteCarloVariableFixed)

MSG_NORMAL = _sim_services.MSG_NORMAL
MSG_INFO = _sim_services.MSG_INFO
MSG_WARNING = _sim_services.MSG_WARNING
MSG_ERROR = _sim_services.MSG_ERROR
MSG_DEBUG = _sim_services.MSG_DEBUG
MSG_PLAYBACK = _sim_services.MSG_PLAYBACK

def message_add_subscriber(*args):
    return _sim_services.message_add_subscriber(*args)

def message_remove_subscriber(*args):
    return _sim_services.message_remove_subscriber(*args)

def message_get_subscriber(*args):
    return _sim_services.message_get_subscriber(*args)

def message_publish(*args):
    return _sim_services.message_publish(*args)

def message_publish_standalone(*args):
    return _sim_services.message_publish_standalone(*args)

def send_hs(*args):
    return _sim_services.send_hs(*args)
class MonteCarloVariableSemiFixed(MonteCarloVariable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloVariableSemiFixed_swiginit(self, _sim_services.new_MonteCarloVariableSemiFixed(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableSemiFixed

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableSemiFixed_generate_assignment(self, *args)

# Register MonteCarloVariableSemiFixed in _sim_services:
_sim_services.MonteCarloVariableSemiFixed_swigregister(MonteCarloVariableSemiFixed)

class MonteCarloMaster(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    active = property(_sim_services.MonteCarloMaster_active_get, _sim_services.MonteCarloMaster_active_set)
    generate_dispersions = property(_sim_services.MonteCarloMaster_generate_dispersions_get, _sim_services.MonteCarloMaster_generate_dispersions_set)
    run_name = property(_sim_services.MonteCarloMaster_run_name_get, _sim_services.MonteCarloMaster_run_name_set)
    monte_dir = property(_sim_services.MonteCarloMaster_monte_dir_get, _sim_services.MonteCarloMaster_monte_dir_set)
    input_file_name = property(_sim_services.MonteCarloMaster_input_file_name_get, _sim_services.MonteCarloMaster_input_file_name_set)
    generate_meta_data = property(_sim_services.MonteCarloMaster_generate_meta_data_get, _sim_services.MonteCarloMaster_generate_meta_data_set)
    generate_summary = property(_sim_services.MonteCarloMaster_generate_summary_get, _sim_services.MonteCarloMaster_generate_summary_set)
    minimum_padding = property(_sim_services.MonteCarloMaster_minimum_padding_get, _sim_services.MonteCarloMaster_minimum_padding_set)
    monte_run_number = property(_sim_services.MonteCarloMaster_monte_run_number_get, _sim_services.MonteCarloMaster_monte_run_number_set)

    def __init__(self, *args):
        _sim_services.MonteCarloMaster_swiginit(self, _sim_services.new_MonteCarloMaster(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloMaster

    def activate(self, *args):
        return _sim_services.MonteCarloMaster_activate(self, *args)

    def prepare_input_files(self, *args):
        return _sim_services.MonteCarloMaster_prepare_input_files(self, *args)

    def add_variable(self, *args):
        return _sim_services.MonteCarloMaster_add_variable(self, *args)

    def find_variable(self, *args):
        return _sim_services.MonteCarloMaster_find_variable(self, *args)

    def remove_variable(self, *args):
        return _sim_services.MonteCarloMaster_remove_variable(self, *args)

    def set_num_runs(self, *args):
        return _sim_services.MonteCarloMaster_set_num_runs(self, *args)

    def execute(self, *args):
        return _sim_services.MonteCarloMaster_execute(self, *args)

    def collate_meta_data(self, *args):
        return _sim_services.MonteCarloMaster_collate_meta_data(self, *args)

# Register MonteCarloMaster in _sim_services:
_sim_services.MonteCarloMaster_swigregister(MonteCarloMaster)

class MonteCarloVariableRandomUniform(MonteCarloVariableRandom):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloVariableRandomUniform_swiginit(self, _sim_services.new_MonteCarloVariableRandomUniform(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandomUniform

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableRandomUniform_generate_assignment(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariableRandomUniform_summarize_variable(self, *args)

# Register MonteCarloVariableRandomUniform in _sim_services:
_sim_services.MonteCarloVariableRandomUniform_swigregister(MonteCarloVariableRandomUniform)

class MonteCarloVariableRandomUniformInt(MonteCarloVariableRandom):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloVariableRandomUniformInt_swiginit(self, _sim_services.new_MonteCarloVariableRandomUniformInt(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandomUniformInt

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableRandomUniformInt_generate_assignment(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariableRandomUniformInt_summarize_variable(self, *args)

# Register MonteCarloVariableRandomUniformInt in _sim_services:
_sim_services.MonteCarloVariableRandomUniformInt_swigregister(MonteCarloVariableRandomUniformInt)

class MonteCarloVariableRandomStringSet(MonteCarloVariableRandomUniform):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    values = property(_sim_services.MonteCarloVariableRandomStringSet_values_get, _sim_services.MonteCarloVariableRandomStringSet_values_set)

    def __init__(self, *args):
        _sim_services.MonteCarloVariableRandomStringSet_swiginit(self, _sim_services.new_MonteCarloVariableRandomStringSet(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandomStringSet

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableRandomStringSet_generate_assignment(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariableRandomStringSet_summarize_variable(self, *args)

    def add_string(self, *args):
        return _sim_services.MonteCarloVariableRandomStringSet_add_string(self, *args)

# Register MonteCarloVariableRandomStringSet in _sim_services:
_sim_services.MonteCarloVariableRandomStringSet_swigregister(MonteCarloVariableRandomStringSet)

class MonteCarloVariableRandomBool(MonteCarloVariableRandomStringSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteCarloVariableRandomBool_swiginit(self, _sim_services.new_MonteCarloVariableRandomBool(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandomBool

# Register MonteCarloVariableRandomBool in _sim_services:
_sim_services.MonteCarloVariableRandomBool_swigregister(MonteCarloVariableRandomBool)

class MonteCarloVariableRandomNormal(MonteCarloVariableRandom):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    StandardDeviation = _sim_services.MonteCarloVariableRandomNormal_StandardDeviation
    Relative = _sim_services.MonteCarloVariableRandomNormal_Relative
    Absolute = _sim_services.MonteCarloVariableRandomNormal_Absolute
    max_num_tries = property(_sim_services.MonteCarloVariableRandomNormal_max_num_tries_get, _sim_services.MonteCarloVariableRandomNormal_max_num_tries_set)

    def __init__(self, *args):
        _sim_services.MonteCarloVariableRandomNormal_swiginit(self, _sim_services.new_MonteCarloVariableRandomNormal(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarloVariableRandomNormal

    def generate_assignment(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_generate_assignment(self, *args)

    def summarize_variable(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_summarize_variable(self, *args)

    def truncate(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_truncate(self, *args)

    def truncate_low(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_truncate_low(self, *args)

    def truncate_high(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_truncate_high(self, *args)

    def untruncate(self, *args):
        return _sim_services.MonteCarloVariableRandomNormal_untruncate(self, *args)

# Register MonteCarloVariableRandomNormal in _sim_services:
_sim_services.MonteCarloVariableRandomNormal_swigregister(MonteCarloVariableRandomNormal)

class Slave(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Slave_swiginit(self, _sim_services.new_Slave(*args))
    activated = property(_sim_services.Slave_activated_get, _sim_services.Slave_activated_set)
    enabled = property(_sim_services.Slave_enabled_get, _sim_services.Slave_enabled_set)
    reconnected = property(_sim_services.Slave_reconnected_get, _sim_services.Slave_reconnected_set)
    sent_reconnect_cmd = property(_sim_services.Slave_sent_reconnect_cmd_get, _sim_services.Slave_sent_reconnect_cmd_set)
    msg_published = property(_sim_services.Slave_msg_published_get, _sim_services.Slave_msg_published_set)
    chkpnt_name = property(_sim_services.Slave_chkpnt_name_get, _sim_services.Slave_chkpnt_name_set)
    sync_error_terminate = property(_sim_services.Slave_sync_error_terminate_get, _sim_services.Slave_sync_error_terminate_set)
    sync_wait_limit = property(_sim_services.Slave_sync_wait_limit_get, _sim_services.Slave_sync_wait_limit_set)
    connection = property(_sim_services.Slave_connection_get, _sim_services.Slave_connection_set)

    def set_connection_type(self, *args):
        return _sim_services.Slave_set_connection_type(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.Slave_process_sim_args(self, *args)

    def init(self, *args):
        return _sim_services.Slave_init(self, *args)

    def get_checkpoint_name(self, *args):
        return _sim_services.Slave_get_checkpoint_name(self, *args)

    def end_of_frame(self, *args):
        return _sim_services.Slave_end_of_frame(self, *args)

    def freeze_init(self, *args):
        return _sim_services.Slave_freeze_init(self, *args)

    def freeze(self, *args):
        return _sim_services.Slave_freeze(self, *args)

    def unfreeze(self, *args):
        return _sim_services.Slave_unfreeze(self, *args)

    def shutdown(self, *args):
        return _sim_services.Slave_shutdown(self, *args)
    __swig_destroy__ = _sim_services.delete_Slave

# Register Slave in _sim_services:
_sim_services.Slave_swigregister(Slave)


def ms_master_enable(*args):
    return _sim_services.ms_master_enable(*args)

def ms_master_disable(*args):
    return _sim_services.ms_master_disable(*args)
class CheckPointRestart(Scheduler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    checkpoint_times = property(_sim_services.CheckPointRestart_checkpoint_times_get, _sim_services.CheckPointRestart_checkpoint_times_set)
    safestore_period = property(_sim_services.CheckPointRestart_safestore_period_get, _sim_services.CheckPointRestart_safestore_period_set)
    safestore_time = property(_sim_services.CheckPointRestart_safestore_time_get, _sim_services.CheckPointRestart_safestore_time_set)
    pre_init_checkpoint = property(_sim_services.CheckPointRestart_pre_init_checkpoint_get, _sim_services.CheckPointRestart_pre_init_checkpoint_set)
    post_init_checkpoint = property(_sim_services.CheckPointRestart_post_init_checkpoint_get, _sim_services.CheckPointRestart_post_init_checkpoint_set)
    end_checkpoint = property(_sim_services.CheckPointRestart_end_checkpoint_get, _sim_services.CheckPointRestart_end_checkpoint_set)
    safestore_enabled = property(_sim_services.CheckPointRestart_safestore_enabled_get, _sim_services.CheckPointRestart_safestore_enabled_set)
    output_file = property(_sim_services.CheckPointRestart_output_file_get, _sim_services.CheckPointRestart_output_file_set)
    load_checkpoint_file_name = property(_sim_services.CheckPointRestart_load_checkpoint_file_name_get, _sim_services.CheckPointRestart_load_checkpoint_file_name_set)
    cpu_num = property(_sim_services.CheckPointRestart_cpu_num_get, _sim_services.CheckPointRestart_cpu_num_set)

    def __init__(self, *args):
        _sim_services.CheckPointRestart_swiginit(self, _sim_services.new_CheckPointRestart(*args))

    def set_pre_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_pre_init_checkpoint(self, *args)

    def set_post_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_post_init_checkpoint(self, *args)

    def set_end_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_set_end_checkpoint(self, *args)

    def set_safestore_enabled(self, *args):
        return _sim_services.CheckPointRestart_set_safestore_enabled(self, *args)

    def get_output_file(self, *args):
        return _sim_services.CheckPointRestart_get_output_file(self, *args)

    def get_load_file(self, *args):
        return _sim_services.CheckPointRestart_get_load_file(self, *args)

    def set_cpu_num(self, *args):
        return _sim_services.CheckPointRestart_set_cpu_num(self, *args)

    def find_write_checkpoint_jobs(self, *args):
        return _sim_services.CheckPointRestart_find_write_checkpoint_jobs(self, *args)

    def set_safestore_time(self, *args):
        return _sim_services.CheckPointRestart_set_safestore_time(self, *args)

    def checkpoint(self, *args):
        return _sim_services.CheckPointRestart_checkpoint(self, *args)

    def write_pre_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_pre_init_checkpoint(self, *args)

    def write_post_init_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_post_init_checkpoint(self, *args)

    def write_end_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_end_checkpoint(self, *args)

    def write_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_write_checkpoint(self, *args)

    def safestore_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_safestore_checkpoint(self, *args)

    def load_checkpoint(self, *args):
        return _sim_services.CheckPointRestart_load_checkpoint(self, *args)

    def load_checkpoint_job(self, *args):
        return _sim_services.CheckPointRestart_load_checkpoint_job(self, *args)

    def write_s_job_execution(self, *args):
        return _sim_services.CheckPointRestart_write_s_job_execution(self, *args)

    def instrument_job_before(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_before(self, *args)

    def instrument_job_after(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_after(self, *args)

    def instrument_job_remove(self, *args):
        return _sim_services.CheckPointRestart_instrument_job_remove(self, *args)
    __swig_destroy__ = _sim_services.delete_CheckPointRestart

# Register CheckPointRestart in _sim_services:
_sim_services.CheckPointRestart_swigregister(CheckPointRestart)


def checkpoint_pre_init(*args):
    return _sim_services.checkpoint_pre_init(*args)

def checkpoint_post_init(*args):
    return _sim_services.checkpoint_post_init(*args)

def checkpoint_end(*args):
    return _sim_services.checkpoint_end(*args)

def get_checkpoint_pre_init(*args):
    return _sim_services.get_checkpoint_pre_init(*args)

def get_checkpoint_post_init(*args):
    return _sim_services.get_checkpoint_post_init(*args)

def get_checkpoint_end(*args):
    return _sim_services.get_checkpoint_end(*args)

def checkpoint_safestore(*args):
    return _sim_services.checkpoint_safestore(*args)

def checkpoint_cpu(*args):
    return _sim_services.checkpoint_cpu(*args)

def checkpoint_safestore_period(*args):
    return _sim_services.checkpoint_safestore_period(*args)

def checkpoint_get_output_file(*args):
    return _sim_services.checkpoint_get_output_file(*args)

def checkpoint_get_load_file(*args):
    return _sim_services.checkpoint_get_load_file(*args)

def checkpoint(*args):
    return _sim_services.checkpoint(*args)

def checkpoint_objects(*args):
    return _sim_services.checkpoint_objects(*args)

def load_checkpoint(*args):
    return _sim_services.load_checkpoint(*args)

def load_checkpoint_stls(*args):
    return _sim_services.load_checkpoint_stls(*args)

def load_checkpoint_job(*args):
    return _sim_services.load_checkpoint_job(*args)

def get_address(*args):
    return _sim_services.get_address(*args)

def next_attr_name(*args):
    return _sim_services.next_attr_name(*args)

def add_collect(*args):
    return _sim_services.add_collect(*args)

def delete_collect(*args):
    return _sim_services.delete_collect(*args)
class AttributesMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def attributes_map(*args):
        return _sim_services.AttributesMap_attributes_map(*args)

    def __init__(self, *args):
        _sim_services.AttributesMap_swiginit(self, _sim_services.new_AttributesMap(*args))
    __swig_destroy__ = _sim_services.delete_AttributesMap

    def add_attr(self, *args):
        return _sim_services.AttributesMap_add_attr(self, *args)

    def get_attr(self, *args):
        return _sim_services.AttributesMap_get_attr(self, *args)

    def replace_special_chars(self, *args):
        return _sim_services.AttributesMap_replace_special_chars(self, *args)

    def type_remove_dims(self, *args):
        return _sim_services.AttributesMap_type_remove_dims(self, *args)

    def print_xml(self, *args):
        return _sim_services.AttributesMap_print_xml(self, *args)

    def print_json(self, *args):
        return _sim_services.AttributesMap_print_json(self, *args)

# Register AttributesMap in _sim_services:
_sim_services.AttributesMap_swigregister(AttributesMap)

def AttributesMap_attributes_map(*args):
    return _sim_services.AttributesMap_attributes_map(*args)


def sie_print_xml(*args):
    return _sim_services.sie_print_xml(*args)

def sie_class_attr_map_print_xml(*args):
    return _sim_services.sie_class_attr_map_print_xml(*args)

def sie_enum_attr_map_print_xml(*args):
    return _sim_services.sie_enum_attr_map_print_xml(*args)

def sie_top_level_objects_print_xml(*args):
    return _sim_services.sie_top_level_objects_print_xml(*args)

def sie_append_runtime_objs(*args):
    return _sim_services.sie_append_runtime_objs(*args)

def sie_get_runtime_sie_dir(*args):
    return _sim_services.sie_get_runtime_sie_dir(*args)
class MessageSubscriber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    enabled = property(_sim_services.MessageSubscriber_enabled_get, _sim_services.MessageSubscriber_enabled_set)
    color = property(_sim_services.MessageSubscriber_color_get, _sim_services.MessageSubscriber_color_set)
    name = property(_sim_services.MessageSubscriber_name_get, _sim_services.MessageSubscriber_name_set)

    def set_enabled(self, *args):
        return _sim_services.MessageSubscriber_set_enabled(self, *args)

    def set_color(self, *args):
        return _sim_services.MessageSubscriber_set_color(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageSubscriber

    def init(self, *args):
        return _sim_services.MessageSubscriber_init(self, *args)

    def update(self, *args):
        return _sim_services.MessageSubscriber_update(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageSubscriber_shutdown(self, *args)

# Register MessageSubscriber in _sim_services:
_sim_services.MessageSubscriber_swigregister(MessageSubscriber)

class MessageCout(MessageSubscriber):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageCout_swiginit(self, _sim_services.new_MessageCout(*args))

    def update(self, *args):
        return _sim_services.MessageCout_update(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageCout

# Register MessageCout in _sim_services:
_sim_services.MessageCout_swigregister(MessageCout)

class MessageThreadedCout(MessageSubscriber, SysThread):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    max_buffer_items = property(_sim_services.MessageThreadedCout_max_buffer_items_get, _sim_services.MessageThreadedCout_max_buffer_items_set)
    max_buffer_size = property(_sim_services.MessageThreadedCout_max_buffer_size_get, _sim_services.MessageThreadedCout_max_buffer_size_set)
    color_code = property(_sim_services.MessageThreadedCout_color_code_get, _sim_services.MessageThreadedCout_color_code_set)

    def __init__(self, *args):
        _sim_services.MessageThreadedCout_swiginit(self, _sim_services.new_MessageThreadedCout(*args))
    __swig_destroy__ = _sim_services.delete_MessageThreadedCout

    def init(self, *args):
        return _sim_services.MessageThreadedCout_init(self, *args)

    def update(self, *args):
        return _sim_services.MessageThreadedCout_update(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageThreadedCout_shutdown(self, *args)

    def thread_body(self, *args):
        return _sim_services.MessageThreadedCout_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.MessageThreadedCout_dump(self, *args)

    def write_pending_messages(self, *args):
        return _sim_services.MessageThreadedCout_write_pending_messages(self, *args)

# Register MessageThreadedCout in _sim_services:
_sim_services.MessageThreadedCout_swigregister(MessageThreadedCout)

class MessageFile(MessageSubscriber):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file_name = property(_sim_services.MessageFile_file_name_get, _sim_services.MessageFile_file_name_set)

    def __init__(self, *args):
        _sim_services.MessageFile_swiginit(self, _sim_services.new_MessageFile(*args))
    __swig_destroy__ = _sim_services.delete_MessageFile

    def update(self, *args):
        return _sim_services.MessageFile_update(self, *args)

    def set_file_name(self, *args):
        return _sim_services.MessageFile_set_file_name(self, *args)

    def init(self, *args):
        return _sim_services.MessageFile_init(self, *args)

    def restart(self, *args):
        return _sim_services.MessageFile_restart(self, *args)

# Register MessageFile in _sim_services:
_sim_services.MessageFile_swigregister(MessageFile)

class MessageHSFile(MessageFile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageHSFile_swiginit(self, _sim_services.new_MessageHSFile(*args))

    def update(self, *args):
        return _sim_services.MessageHSFile_update(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageHSFile

# Register MessageHSFile in _sim_services:
_sim_services.MessageHSFile_swigregister(MessageHSFile)

class MessageCustomFile(MessageFile):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageCustomFile_swiginit(self, _sim_services.new_MessageCustomFile(*args))

    def update(self, *args):
        return _sim_services.MessageCustomFile_update(self, *args)

    def get_level(self, *args):
        return _sim_services.MessageCustomFile_get_level(self, *args)

    def set_level(self, *args):
        return _sim_services.MessageCustomFile_set_level(self, *args)

    def set_name(self, *args):
        return _sim_services.MessageCustomFile_set_name(self, *args)

    def set_file_name(self, *args):
        return _sim_services.MessageCustomFile_set_file_name(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageCustomFile

# Register MessageCustomFile in _sim_services:
_sim_services.MessageCustomFile_swigregister(MessageCustomFile)

class MessageCustomManager(MessageSubscriber):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageCustomManager_swiginit(self, _sim_services.new_MessageCustomManager(*args))
    __swig_destroy__ = _sim_services.delete_MessageCustomManager

    def open_custom_message_file(self, *args):
        return _sim_services.MessageCustomManager_open_custom_message_file(self, *args)

    def update(self, *args):
        return _sim_services.MessageCustomManager_update(self, *args)

    def restart(self, *args):
        return _sim_services.MessageCustomManager_restart(self, *args)

# Register MessageCustomManager in _sim_services:
_sim_services.MessageCustomManager_swigregister(MessageCustomManager)

class MessageLCout(MessageSubscriber):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageLCout_swiginit(self, _sim_services.new_MessageLCout(*args))

    def update(self, *args):
        return _sim_services.MessageLCout_update(self, *args)
    __swig_destroy__ = _sim_services.delete_MessageLCout

# Register MessageLCout in _sim_services:
_sim_services.MessageLCout_swigregister(MessageLCout)

class MessagePublisher(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sim_name = property(_sim_services.MessagePublisher_sim_name_get, _sim_services.MessagePublisher_sim_name_set)

    def __init__(self, *args):
        _sim_services.MessagePublisher_swiginit(self, _sim_services.new_MessagePublisher(*args))
    __swig_destroy__ = _sim_services.delete_MessagePublisher

    def init(self, *args):
        return _sim_services.MessagePublisher_init(self, *args)

    def subscribe(self, *args):
        return _sim_services.MessagePublisher_subscribe(self, *args)

    def unsubscribe(self, *args):
        return _sim_services.MessagePublisher_unsubscribe(self, *args)

    def publish(self, *args):
        return _sim_services.MessagePublisher_publish(self, *args)

    def getSubscriber(self, *args):
        return _sim_services.MessagePublisher_getSubscriber(self, *args)

# Register MessagePublisher in _sim_services:
_sim_services.MessagePublisher_swigregister(MessagePublisher)

class MessageTCDeviceListenThread(SysThread):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageTCDeviceListenThread_swiginit(self, _sim_services.new_MessageTCDeviceListenThread(*args))
    __swig_destroy__ = _sim_services.delete_MessageTCDeviceListenThread

    def get_port(self, *args):
        return _sim_services.MessageTCDeviceListenThread_get_port(self, *args)

    def init_listen_device(self, *args):
        return _sim_services.MessageTCDeviceListenThread_init_listen_device(self, *args)

    def restart(self, *args):
        return _sim_services.MessageTCDeviceListenThread_restart(self, *args)

    def thread_body(self, *args):
        return _sim_services.MessageTCDeviceListenThread_thread_body(self, *args)

    def dump(self, *args):
        return _sim_services.MessageTCDeviceListenThread_dump(self, *args)

# Register MessageTCDeviceListenThread in _sim_services:
_sim_services.MessageTCDeviceListenThread_swigregister(MessageTCDeviceListenThread)

class MessageTCDevice(MessageSubscriber):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MessageTCDevice_swiginit(self, _sim_services.new_MessageTCDevice(*args))
    __swig_destroy__ = _sim_services.delete_MessageTCDevice

    def get_listen_thread(self, *args):
        return _sim_services.MessageTCDevice_get_listen_thread(self, *args)

    def add_connection(self, *args):
        return _sim_services.MessageTCDevice_add_connection(self, *args)

    def update(self, *args):
        return _sim_services.MessageTCDevice_update(self, *args)

    def default_data(self, *args):
        return _sim_services.MessageTCDevice_default_data(self, *args)

    def init(self, *args):
        return _sim_services.MessageTCDevice_init(self, *args)

    def restart(self, *args):
        return _sim_services.MessageTCDevice_restart(self, *args)

    def shutdown(self, *args):
        return _sim_services.MessageTCDevice_shutdown(self, *args)
    port = property(_sim_services.MessageTCDevice_port_get, _sim_services.MessageTCDevice_port_set)

# Register MessageTCDevice in _sim_services:
_sim_services.MessageTCDevice_swigregister(MessageTCDevice)


def message_subscribe(*args):
    return _sim_services.message_subscribe(*args)

def message_unsubscribe(*args):
    return _sim_services.message_unsubscribe(*args)

def open_custom_message_file(*args):
    return _sim_services.open_custom_message_file(*args)
class MonteVar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    name = property(_sim_services.MonteVar_name_get, _sim_services.MonteVar_name_set)
    unit = property(_sim_services.MonteVar_unit_get, _sim_services.MonteVar_unit_set)
    value = property(_sim_services.MonteVar_value_get, _sim_services.MonteVar_value_set)
    __swig_destroy__ = _sim_services.delete_MonteVar

    def set_unit(self, *args):
        return _sim_services.MonteVar_set_unit(self, *args)

    def describe_variable(self, *args):
        return _sim_services.MonteVar_describe_variable(self, *args)

# Register MonteVar in _sim_services:
_sim_services.MonteVar_swigregister(MonteVar)

class MonteVarVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self, *args):
        return _sim_services.MonteVarVector_iterator(self, *args)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self, *args):
        return _sim_services.MonteVarVector___nonzero__(self, *args)

    def __bool__(self, *args):
        return _sim_services.MonteVarVector___bool__(self, *args)

    def __len__(self, *args):
        return _sim_services.MonteVarVector___len__(self, *args)

    def __getslice__(self, *args):
        return _sim_services.MonteVarVector___getslice__(self, *args)

    def __setslice__(self, *args):
        return _sim_services.MonteVarVector___setslice__(self, *args)

    def __delslice__(self, *args):
        return _sim_services.MonteVarVector___delslice__(self, *args)

    def __delitem__(self, *args):
        return _sim_services.MonteVarVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _sim_services.MonteVarVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _sim_services.MonteVarVector___setitem__(self, *args)

    def pop(self, *args):
        return _sim_services.MonteVarVector_pop(self, *args)

    def append(self, *args):
        return _sim_services.MonteVarVector_append(self, *args)

    def empty(self, *args):
        return _sim_services.MonteVarVector_empty(self, *args)

    def size(self, *args):
        return _sim_services.MonteVarVector_size(self, *args)

    def swap(self, *args):
        return _sim_services.MonteVarVector_swap(self, *args)

    def begin(self, *args):
        return _sim_services.MonteVarVector_begin(self, *args)

    def end(self, *args):
        return _sim_services.MonteVarVector_end(self, *args)

    def rbegin(self, *args):
        return _sim_services.MonteVarVector_rbegin(self, *args)

    def rend(self, *args):
        return _sim_services.MonteVarVector_rend(self, *args)

    def clear(self, *args):
        return _sim_services.MonteVarVector_clear(self, *args)

    def get_allocator(self, *args):
        return _sim_services.MonteVarVector_get_allocator(self, *args)

    def pop_back(self, *args):
        return _sim_services.MonteVarVector_pop_back(self, *args)

    def erase(self, *args):
        return _sim_services.MonteVarVector_erase(self, *args)

    def __init__(self, *args):
        _sim_services.MonteVarVector_swiginit(self, _sim_services.new_MonteVarVector(*args))

    def push_back(self, *args):
        return _sim_services.MonteVarVector_push_back(self, *args)

    def front(self, *args):
        return _sim_services.MonteVarVector_front(self, *args)

    def back(self, *args):
        return _sim_services.MonteVarVector_back(self, *args)

    def assign(self, *args):
        return _sim_services.MonteVarVector_assign(self, *args)

    def resize(self, *args):
        return _sim_services.MonteVarVector_resize(self, *args)

    def insert(self, *args):
        return _sim_services.MonteVarVector_insert(self, *args)

    def reserve(self, *args):
        return _sim_services.MonteVarVector_reserve(self, *args)

    def capacity(self, *args):
        return _sim_services.MonteVarVector_capacity(self, *args)
    __swig_destroy__ = _sim_services.delete_MonteVarVector

# Register MonteVarVector in _sim_services:
_sim_services.MonteVarVector_swigregister(MonteVarVector)

class MonteRun(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MC_RUN_INCOMPLETE = _sim_services.MonteRun_MC_RUN_INCOMPLETE
    MC_RUN_COMPLETE = _sim_services.MonteRun_MC_RUN_COMPLETE
    MC_RUN_FAILED = _sim_services.MonteRun_MC_RUN_FAILED
    MC_RUN_DUMPED_CORE = _sim_services.MonteRun_MC_RUN_DUMPED_CORE
    MC_RUN_TIMED_OUT = _sim_services.MonteRun_MC_RUN_TIMED_OUT
    MC_CANT_CREATE_OUTPUT_DIR = _sim_services.MonteRun_MC_CANT_CREATE_OUTPUT_DIR
    MC_PROBLEM_PARSING_INPUT = _sim_services.MonteRun_MC_PROBLEM_PARSING_INPUT
    MC_UNRECOGNIZED_RETURN_CODE = _sim_services.MonteRun_MC_UNRECOGNIZED_RETURN_CODE
    id = property(_sim_services.MonteRun_id_get, _sim_services.MonteRun_id_set)
    num_tries = property(_sim_services.MonteRun_num_tries_get, _sim_services.MonteRun_num_tries_set)
    start_time = property(_sim_services.MonteRun_start_time_get, _sim_services.MonteRun_start_time_set)
    end_time = property(_sim_services.MonteRun_end_time_get, _sim_services.MonteRun_end_time_set)
    variables = property(_sim_services.MonteRun_variables_get, _sim_services.MonteRun_variables_set)
    exit_status = property(_sim_services.MonteRun_exit_status_get, _sim_services.MonteRun_exit_status_set)

    def __init__(self, *args):
        _sim_services.MonteRun_swiginit(self, _sim_services.new_MonteRun(*args))

    def exit_status_string(self, *args):
        return _sim_services.MonteRun_exit_status_string(self, *args)
    __swig_destroy__ = _sim_services.delete_MonteRun

# Register MonteRun in _sim_services:
_sim_services.MonteRun_swigregister(MonteRun)

class MonteSlave(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MC_UNINITIALIZED = _sim_services.MonteSlave_MC_UNINITIALIZED
    MC_INITIALIZING = _sim_services.MonteSlave_MC_INITIALIZING
    MC_READY = _sim_services.MonteSlave_MC_READY
    MC_RUNNING = _sim_services.MonteSlave_MC_RUNNING
    MC_STOPPING = _sim_services.MonteSlave_MC_STOPPING
    MC_STOPPED = _sim_services.MonteSlave_MC_STOPPED
    MC_FINISHED = _sim_services.MonteSlave_MC_FINISHED
    MC_UNRESPONSIVE_RUNNING = _sim_services.MonteSlave_MC_UNRESPONSIVE_RUNNING
    MC_UNRESPONSIVE_STOPPING = _sim_services.MonteSlave_MC_UNRESPONSIVE_STOPPING
    MC_DISCONNECTED = _sim_services.MonteSlave_MC_DISCONNECTED
    MC_PROCESS_RUN = _sim_services.MonteSlave_MC_PROCESS_RUN
    MC_SHUTDOWN = _sim_services.MonteSlave_MC_SHUTDOWN
    MC_DIE = _sim_services.MonteSlave_MC_DIE
    id = property(_sim_services.MonteSlave_id_get, _sim_services.MonteSlave_id_set)
    state = property(_sim_services.MonteSlave_state_get, _sim_services.MonteSlave_state_set)
    machine_name = property(_sim_services.MonteSlave_machine_name_get, _sim_services.MonteSlave_machine_name_set)
    port = property(_sim_services.MonteSlave_port_get, _sim_services.MonteSlave_port_set)
    current_run = property(_sim_services.MonteSlave_current_run_get, _sim_services.MonteSlave_current_run_set)
    num_dispatches = property(_sim_services.MonteSlave_num_dispatches_get, _sim_services.MonteSlave_num_dispatches_set)
    num_results = property(_sim_services.MonteSlave_num_results_get, _sim_services.MonteSlave_num_results_set)
    cpu_time = property(_sim_services.MonteSlave_cpu_time_get, _sim_services.MonteSlave_cpu_time_set)
    remote_shell = property(_sim_services.MonteSlave_remote_shell_get, _sim_services.MonteSlave_remote_shell_set)
    user_remote_shell = property(_sim_services.MonteSlave_user_remote_shell_get, _sim_services.MonteSlave_user_remote_shell_set)
    remote_shell_args = property(_sim_services.MonteSlave_remote_shell_args_get, _sim_services.MonteSlave_remote_shell_args_set)
    multiplier = property(_sim_services.MonteSlave_multiplier_get, _sim_services.MonteSlave_multiplier_set)
    sim_path = property(_sim_services.MonteSlave_sim_path_get, _sim_services.MonteSlave_sim_path_set)
    S_main_name = property(_sim_services.MonteSlave_S_main_name_get, _sim_services.MonteSlave_S_main_name_set)

    def set_S_main_name(self, *args):
        return _sim_services.MonteSlave_set_S_main_name(self, *args)

    def __init__(self, *args):
        _sim_services.MonteSlave_swiginit(self, _sim_services.new_MonteSlave(*args))
    __swig_destroy__ = _sim_services.delete_MonteSlave

# Register MonteSlave in _sim_services:
_sim_services.MonteSlave_swigregister(MonteSlave)

class MonteRange(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MonteRange_swiginit(self, _sim_services.new_MonteRange(*args))

    def get_start(self, *args):
        return _sim_services.MonteRange_get_start(self, *args)

    def get_end(self, *args):
        return _sim_services.MonteRange_get_end(self, *args)
    __swig_destroy__ = _sim_services.delete_MonteRange

# Register MonteRange in _sim_services:
_sim_services.MonteRange_swigregister(MonteRange)

class MonteCarlo(Scheduler):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    MC_NONE = _sim_services.MonteCarlo_MC_NONE
    MC_ERROR = _sim_services.MonteCarlo_MC_ERROR
    MC_INFORMATIONAL = _sim_services.MonteCarlo_MC_INFORMATIONAL
    MC_ALL = _sim_services.MonteCarlo_MC_ALL
    slave_sim_options = property(_sim_services.MonteCarlo_slave_sim_options_get, _sim_services.MonteCarlo_slave_sim_options_set)
    slave_output_directory = property(_sim_services.MonteCarlo_slave_output_directory_get, _sim_services.MonteCarlo_slave_output_directory_set)

    def __init__(self, *args):
        _sim_services.MonteCarlo_swiginit(self, _sim_services.new_MonteCarlo(*args))
    __swig_destroy__ = _sim_services.delete_MonteCarlo

    def execute_monte(self, *args):
        return _sim_services.MonteCarlo_execute_monte(self, *args)

    def set_enabled(self, *args):
        return _sim_services.MonteCarlo_set_enabled(self, *args)

    def get_enabled(self, *args):
        return _sim_services.MonteCarlo_get_enabled(self, *args)

    def set_dry_run(self, *args):
        return _sim_services.MonteCarlo_set_dry_run(self, *args)

    def get_dry_run(self, *args):
        return _sim_services.MonteCarlo_get_dry_run(self, *args)

    def is_slave(self, *args):
        return _sim_services.MonteCarlo_is_slave(self, *args)

    def is_master(self, *args):
        return _sim_services.MonteCarlo_is_master(self, *args)

    def set_localhost_as_remote(self, *args):
        return _sim_services.MonteCarlo_set_localhost_as_remote(self, *args)

    def get_localhost_as_remote(self, *args):
        return _sim_services.MonteCarlo_get_localhost_as_remote(self, *args)

    def set_custom_slave_dispatch(self, *args):
        return _sim_services.MonteCarlo_set_custom_slave_dispatch(self, *args)

    def get_custom_slave_dispatch(self, *args):
        return _sim_services.MonteCarlo_get_custom_slave_dispatch(self, *args)

    def set_timeout(self, *args):
        return _sim_services.MonteCarlo_set_timeout(self, *args)

    def get_timeout(self, *args):
        return _sim_services.MonteCarlo_get_timeout(self, *args)

    def set_max_tries(self, *args):
        return _sim_services.MonteCarlo_set_max_tries(self, *args)

    def get_max_tries(self, *args):
        return _sim_services.MonteCarlo_get_max_tries(self, *args)

    def set_user_cmd_string(self, *args):
        return _sim_services.MonteCarlo_set_user_cmd_string(self, *args)

    def get_user_cmd_string(self, *args):
        return _sim_services.MonteCarlo_get_user_cmd_string(self, *args)

    def get_user_cmd_string_c_str(self, *args):
        return _sim_services.MonteCarlo_get_user_cmd_string_c_str(self, *args)

    def set_custom_pre_text(self, *args):
        return _sim_services.MonteCarlo_set_custom_pre_text(self, *args)

    def get_custom_pre_text(self, *args):
        return _sim_services.MonteCarlo_get_custom_pre_text(self, *args)

    def get_custom_pre_text_c_str(self, *args):
        return _sim_services.MonteCarlo_get_custom_pre_text_c_str(self, *args)

    def set_custom_post_text(self, *args):
        return _sim_services.MonteCarlo_set_custom_post_text(self, *args)

    def get_custom_post_text(self, *args):
        return _sim_services.MonteCarlo_get_custom_post_text(self, *args)

    def get_custom_post_text_c_str(self, *args):
        return _sim_services.MonteCarlo_get_custom_post_text_c_str(self, *args)

    def set_verbosity(self, *args):
        return _sim_services.MonteCarlo_set_verbosity(self, *args)

    def get_verbosity(self, *args):
        return _sim_services.MonteCarlo_get_verbosity(self, *args)

    def set_num_runs(self, *args):
        return _sim_services.MonteCarlo_set_num_runs(self, *args)

    def get_num_runs(self, *args):
        return _sim_services.MonteCarlo_get_num_runs(self, *args)

    def get_num_results(self, *args):
        return _sim_services.MonteCarlo_get_num_results(self, *args)

    def get_slave_id(self, *args):
        return _sim_services.MonteCarlo_get_slave_id(self, *args)

    def add_range(self, *args):
        return _sim_services.MonteCarlo_add_range(self, *args)

    def in_range(self, *args):
        return _sim_services.MonteCarlo_in_range(self, *args)

    def get_ranges(self, *args):
        return _sim_services.MonteCarlo_get_ranges(self, *args)

    def add_variable(self, *args):
        return _sim_services.MonteCarlo_add_variable(self, *args)

    def get_variable(self, *args):
        return _sim_services.MonteCarlo_get_variable(self, *args)

    def get_variables(self, *args):
        return _sim_services.MonteCarlo_get_variables(self, *args)

    def add_slave(self, *args):
        return _sim_services.MonteCarlo_add_slave(self, *args)

    def start_slave(self, *args):
        return _sim_services.MonteCarlo_start_slave(self, *args)

    def stop_slave(self, *args):
        return _sim_services.MonteCarlo_stop_slave(self, *args)

    def disable_slave(self, *args):
        return _sim_services.MonteCarlo_disable_slave(self, *args)

    def process_sim_args(self, *args):
        return _sim_services.MonteCarlo_process_sim_args(self, *args)

    def shutdown(self, *args):
        return _sim_services.MonteCarlo_shutdown(self, *args)

    def get_current_run(self, *args):
        return _sim_services.MonteCarlo_get_current_run(self, *args)

    def set_current_run(self, *args):
        return _sim_services.MonteCarlo_set_current_run(self, *args)

    def set_listen_device_port(self, *args):
        return _sim_services.MonteCarlo_set_listen_device_port(self, *args)

    def set_connection_device_port(self, *args):
        return _sim_services.MonteCarlo_set_connection_device_port(self, *args)

    def get_listen_device_port(self, *args):
        return _sim_services.MonteCarlo_get_listen_device_port(self, *args)

    def get_connection_device_port(self, *args):
        return _sim_services.MonteCarlo_get_connection_device_port(self, *args)

    def write(self, *args):
        return _sim_services.MonteCarlo_write(self, *args)

    def read(self, *args):
        return _sim_services.MonteCarlo_read(self, *args)

# Register MonteCarlo in _sim_services:
_sim_services.MonteCarlo_swigregister(MonteCarlo)


def tc_init(*args):
    return _sim_services.tc_init(*args)

def tc_init_with_connection_info(*args):
    return _sim_services.tc_init_with_connection_info(*args)

def tc_listen(*args):
    return _sim_services.tc_listen(*args)

def tc_accept_(*args):
    return _sim_services.tc_accept_(*args)

def tc_connect_(*args):
    return _sim_services.tc_connect_(*args)

def tc_clock_init(*args):
    return _sim_services.tc_clock_init(*args)

def tc_clock_time(*args):
    return _sim_services.tc_clock_time(*args)

def tc_pending(*args):
    return _sim_services.tc_pending(*args)

def tc_blockio(*args):
    return _sim_services.tc_blockio(*args)

def tc_isValid(*args):
    return _sim_services.tc_isValid(*args)

def tc_set_blockio_timeout_limit(*args):
    return _sim_services.tc_set_blockio_timeout_limit(*args)

def tc_read_(*args):
    return _sim_services.tc_read_(*args)

def tc_read_byteswap(*args):
    return _sim_services.tc_read_byteswap(*args)

def tc_write_(*args):
    return _sim_services.tc_write_(*args)

def tc_write_byteswap(*args):
    return _sim_services.tc_write_byteswap(*args)

def tc_disconnect(*args):
    return _sim_services.tc_disconnect(*args)

def tc_multiconnect(*args):
    return _sim_services.tc_multiconnect(*args)

def tc_init_udp_client(*args):
    return _sim_services.tc_init_udp_client(*args)

def tc_init_udp_server(*args):
    return _sim_services.tc_init_udp_server(*args)

def tc_init_mcast_client(*args):
    return _sim_services.tc_init_mcast_client(*args)

def tc_init_mcast_server(*args):
    return _sim_services.tc_init_mcast_server(*args)

def tc_broadcast_conninfo(*args):
    return _sim_services.tc_broadcast_conninfo(*args)

def tc_error(*args):
    return _sim_services.tc_error(*args)

def tc_dev_copy(*args):
    return _sim_services.tc_dev_copy(*args)

def trick_bswap_buffer(*args):
    return _sim_services.trick_bswap_buffer(*args)

def trick_bswap_single_parameter(*args):
    return _sim_services.trick_bswap_single_parameter(*args)

def mc_set_enabled(*args):
    return _sim_services.mc_set_enabled(*args)

def mc_get_enabled(*args):
    return _sim_services.mc_get_enabled(*args)

def mc_set_dry_run(*args):
    return _sim_services.mc_set_dry_run(*args)

def mc_get_dry_run(*args):
    return _sim_services.mc_get_dry_run(*args)

def mc_is_slave(*args):
    return _sim_services.mc_is_slave(*args)

def mc_set_localhost_as_remote(*args):
    return _sim_services.mc_set_localhost_as_remote(*args)

def mc_get_localhost_as_remote(*args):
    return _sim_services.mc_get_localhost_as_remote(*args)

def mc_set_custom_slave_dispatch(*args):
    return _sim_services.mc_set_custom_slave_dispatch(*args)

def mc_get_custom_slave_dispatch(*args):
    return _sim_services.mc_get_custom_slave_dispatch(*args)

def mc_set_timeout(*args):
    return _sim_services.mc_set_timeout(*args)

def mc_get_timeout(*args):
    return _sim_services.mc_get_timeout(*args)

def mc_set_max_tries(*args):
    return _sim_services.mc_set_max_tries(*args)

def mc_get_max_tries(*args):
    return _sim_services.mc_get_max_tries(*args)

def mc_set_user_cmd_string(*args):
    return _sim_services.mc_set_user_cmd_string(*args)

def mc_set_slave_sim_options(*args):
    return _sim_services.mc_set_slave_sim_options(*args)

def mc_set_slave_output_directory(*args):
    return _sim_services.mc_set_slave_output_directory(*args)

def mc_get_slave_sim_options(*args):
    return _sim_services.mc_get_slave_sim_options(*args)

def mc_get_user_cmd_string(*args):
    return _sim_services.mc_get_user_cmd_string(*args)

def mc_set_custom_pre_text(*args):
    return _sim_services.mc_set_custom_pre_text(*args)

def mc_get_custom_pre_text(*args):
    return _sim_services.mc_get_custom_pre_text(*args)

def mc_set_custom_post_text(*args):
    return _sim_services.mc_set_custom_post_text(*args)

def mc_get_custom_post_text(*args):
    return _sim_services.mc_get_custom_post_text(*args)

def mc_set_verbosity(*args):
    return _sim_services.mc_set_verbosity(*args)

def mc_get_verbosity(*args):
    return _sim_services.mc_get_verbosity(*args)

def mc_set_num_runs(*args):
    return _sim_services.mc_set_num_runs(*args)

def mc_get_num_runs(*args):
    return _sim_services.mc_get_num_runs(*args)

def mc_get_num_results(*args):
    return _sim_services.mc_get_num_results(*args)

def mc_get_slave_id(*args):
    return _sim_services.mc_get_slave_id(*args)

def mc_add_range(*args):
    return _sim_services.mc_add_range(*args)

def mc_add_slave(*args):
    return _sim_services.mc_add_slave(*args)

def mc_start_slave(*args):
    return _sim_services.mc_start_slave(*args)

def mc_stop_slave(*args):
    return _sim_services.mc_stop_slave(*args)

def mc_write(*args):
    return _sim_services.mc_write(*args)

def mc_read(*args):
    return _sim_services.mc_read(*args)

def mc_get_current_run(*args):
    return _sim_services.mc_get_current_run(*args)

def mc_set_current_run(*args):
    return _sim_services.mc_set_current_run(*args)

def mc_set_listen_device_port(*args):
    return _sim_services.mc_set_listen_device_port(*args)

def mc_set_connection_device_port(*args):
    return _sim_services.mc_set_connection_device_port(*args)

def mc_get_listen_device_port(*args):
    return _sim_services.mc_get_listen_device_port(*args)

def mc_get_connection_device_port(*args):
    return _sim_services.mc_get_connection_device_port(*args)
class MonteVarCalculated(MonteVar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarCalculated(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def describe_variable(self):
        return _sim_services.MonteVarCalculated_describe_variable(self)
    __swig_destroy__ = _sim_services.delete_MonteVarCalculated

# Register MonteVarCalculated in _sim_services:
_sim_services.MonteVarCalculated_swigregister(MonteVarCalculated)

class MonteVarFile(MonteVar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarFile(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)


    __swig_destroy__ = _sim_services.delete_MonteVarFile

    def set_file_name(self, in_file_name):
        return _sim_services.MonteVarFile_set_file_name(self, in_file_name)

    def set_column(self, in_column):
        return _sim_services.MonteVarFile_set_column(self, in_column)

    def describe_variable(self):
        return _sim_services.MonteVarFile_describe_variable(self)

# Register MonteVarFile in _sim_services:
_sim_services.MonteVarFile_swigregister(MonteVarFile)

class MonteVarFixed(MonteVar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sim_services.new_MonteVarFixed(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)



    def set_value(self, in_value):
        return _sim_services.MonteVarFixed_set_value(self, in_value)

    def describe_variable(self):
        return _sim_services.MonteVarFixed_describe_variable(self)
    __swig_destroy__ = _sim_services.delete_MonteVarFixed

# Register MonteVarFixed in _sim_services:
_sim_services.MonteVarFixed_swigregister(MonteVarFixed)

class StlRandomGenerator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TRICK_DEFAULT_ENGINE = _sim_services.StlRandomGenerator_TRICK_DEFAULT_ENGINE
    GAUSSIAN = _sim_services.StlRandomGenerator_GAUSSIAN
    FLAT = _sim_services.StlRandomGenerator_FLAT
    POISSON = _sim_services.StlRandomGenerator_POISSON
    __swig_destroy__ = _sim_services.delete_StlRandomGenerator

    def __call__(self):
        return _sim_services.StlRandomGenerator___call__(self)

    def set_seed(self, in_seed):
        return _sim_services.StlRandomGenerator_set_seed(self, in_seed)

    def set_param(self, a, b=0.0):
        return _sim_services.StlRandomGenerator_set_param(self, a, b)

    def get_param_a(self):
        return _sim_services.StlRandomGenerator_get_param_a(self)

    def get_param_b(self):
        return _sim_services.StlRandomGenerator_get_param_b(self)

# Register StlRandomGenerator in _sim_services:
_sim_services.StlRandomGenerator_swigregister(StlRandomGenerator)

class StlRandomGeneratorFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def newGenerator(*args):
        return _sim_services.StlRandomGeneratorFactory_newGenerator(*args)

# Register StlRandomGeneratorFactory in _sim_services:
_sim_services.StlRandomGeneratorFactory_swigregister(StlRandomGeneratorFactory)

def StlRandomGeneratorFactory_newGenerator(*args):
    return _sim_services.StlRandomGeneratorFactory_newGenerator(*args)

class MonteVarRandom(MonteVar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NO_ENGINE = _sim_services.MonteVarRandom_NO_ENGINE
    TRICK_DEFAULT_ENGINE = _sim_services.MonteVarRandom_TRICK_DEFAULT_ENGINE
    GAUSSIAN = _sim_services.MonteVarRandom_GAUSSIAN
    FLAT = _sim_services.MonteVarRandom_FLAT
    POISSON = _sim_services.MonteVarRandom_POISSON

    def __init__(self, *args):
        this = _sim_services.new_MonteVarRandom(*args)
        try: self.this.append(this)
        except: self.this = this
        this.own(0)
        self.this.own(0)


    __swig_destroy__ = _sim_services.delete_MonteVarRandom

    def set_seed(self, seed):
        return _sim_services.MonteVarRandom_set_seed(self, seed)

    def set_sigma(self, sigma):
        return _sim_services.MonteVarRandom_set_sigma(self, sigma)

    def set_sigma_range(self, sigma_range):
        return _sim_services.MonteVarRandom_set_sigma_range(self, sigma_range)

    def set_mu(self, mu):
        return _sim_services.MonteVarRandom_set_mu(self, mu)

    def set_min(self, min):
        return _sim_services.MonteVarRandom_set_min(self, min)

    def set_max(self, max):
        return _sim_services.MonteVarRandom_set_max(self, max)

    def set_min_is_relative(self, relativity):
        return _sim_services.MonteVarRandom_set_min_is_relative(self, relativity)

    def set_max_is_relative(self, relativity):
        return _sim_services.MonteVarRandom_set_max_is_relative(self, relativity)

    def set_uniform_generator(self, uniform):
        return _sim_services.MonteVarRandom_set_uniform_generator(self, uniform)

    def get_absolute_min(self):
        return _sim_services.MonteVarRandom_get_absolute_min(self)

    def get_absolute_max(self):
        return _sim_services.MonteVarRandom_get_absolute_max(self)

    def get_random_distribution(self):
        return _sim_services.MonteVarRandom_get_random_distribution(self)

    def describe_variable(self):
        return _sim_services.MonteVarRandom_describe_variable(self)

# Register MonteVarRandom in _sim_services:
_sim_services.MonteVarRandom_swigregister(MonteVarRandom)

class Timer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_Timer

    def enable(self):
        return _sim_services.Timer_enable(self)

    def disable(self):
        return _sim_services.Timer_disable(self)

    def get_enabled(self):
        return _sim_services.Timer_get_enabled(self)

    def set_active(self, in_active):
        return _sim_services.Timer_set_active(self, in_active)

    def init(self):
        return _sim_services.Timer_init(self)

    def start(self, frame_time):
        return _sim_services.Timer_start(self, frame_time)

    def reset(self, frame_time):
        return _sim_services.Timer_reset(self, frame_time)

    def stop(self):
        return _sim_services.Timer_stop(self)

    def pause(self):
        return _sim_services.Timer_pause(self)

    def shutdown(self):
        return _sim_services.Timer_shutdown(self)

# Register Timer in _sim_services:
_sim_services.Timer_swigregister(Timer)

class RealtimeSync(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enable_flag = property(_sim_services.RealtimeSync_enable_flag_get, _sim_services.RealtimeSync_enable_flag_set)
    disable_flag = property(_sim_services.RealtimeSync_disable_flag_get, _sim_services.RealtimeSync_disable_flag_set)
    active = property(_sim_services.RealtimeSync_active_get, _sim_services.RealtimeSync_active_set)
    freeze_frame = property(_sim_services.RealtimeSync_freeze_frame_get, _sim_services.RealtimeSync_freeze_frame_set)
    freeze_time_tics = property(_sim_services.RealtimeSync_freeze_time_tics_get, _sim_services.RealtimeSync_freeze_time_tics_set)
    frame_overrun_cnt = property(_sim_services.RealtimeSync_frame_overrun_cnt_get, _sim_services.RealtimeSync_frame_overrun_cnt_set)
    total_overrun = property(_sim_services.RealtimeSync_total_overrun_get, _sim_services.RealtimeSync_total_overrun_set)
    rt_max_overrun_cnt = property(_sim_services.RealtimeSync_rt_max_overrun_cnt_get, _sim_services.RealtimeSync_rt_max_overrun_cnt_set)
    rt_max_overrun_time = property(_sim_services.RealtimeSync_rt_max_overrun_time_get, _sim_services.RealtimeSync_rt_max_overrun_time_set)
    rt_max_overrun_time_tics = property(_sim_services.RealtimeSync_rt_max_overrun_time_tics_get, _sim_services.RealtimeSync_rt_max_overrun_time_tics_set)
    rt_overrun_freeze = property(_sim_services.RealtimeSync_rt_overrun_freeze_get, _sim_services.RealtimeSync_rt_overrun_freeze_set)
    frame_sched_time = property(_sim_services.RealtimeSync_frame_sched_time_get, _sim_services.RealtimeSync_frame_sched_time_set)
    frame_time = property(_sim_services.RealtimeSync_frame_time_get, _sim_services.RealtimeSync_frame_time_set)
    frame_overrun_time = property(_sim_services.RealtimeSync_frame_overrun_time_get, _sim_services.RealtimeSync_frame_overrun_time_set)
    frame_overrun = property(_sim_services.RealtimeSync_frame_overrun_get, _sim_services.RealtimeSync_frame_overrun_set)
    last_clock_time = property(_sim_services.RealtimeSync_last_clock_time_get, _sim_services.RealtimeSync_last_clock_time_set)
    tics_per_sec = property(_sim_services.RealtimeSync_tics_per_sec_get, _sim_services.RealtimeSync_tics_per_sec_set)
    align_sim_to_wall_clock = property(_sim_services.RealtimeSync_align_sim_to_wall_clock_get, _sim_services.RealtimeSync_align_sim_to_wall_clock_set)
    align_tic_mult = property(_sim_services.RealtimeSync_align_tic_mult_get, _sim_services.RealtimeSync_align_tic_mult_set)
    rt_clock = property(_sim_services.RealtimeSync_rt_clock_get, _sim_services.RealtimeSync_rt_clock_set)
    default_clock = property(_sim_services.RealtimeSync_default_clock_get, _sim_services.RealtimeSync_default_clock_set)
    sleep_timer = property(_sim_services.RealtimeSync_sleep_timer_get, _sim_services.RealtimeSync_sleep_timer_set)
    freeze_shutdown = property(_sim_services.RealtimeSync_freeze_shutdown_get, _sim_services.RealtimeSync_freeze_shutdown_set)
    sim_start_time = property(_sim_services.RealtimeSync_sim_start_time_get, _sim_services.RealtimeSync_sim_start_time_set)
    sim_end_init_time = property(_sim_services.RealtimeSync_sim_end_init_time_get, _sim_services.RealtimeSync_sim_end_init_time_set)
    sim_end_time = property(_sim_services.RealtimeSync_sim_end_time_get, _sim_services.RealtimeSync_sim_end_time_set)
    actual_run_ratio = property(_sim_services.RealtimeSync_actual_run_ratio_get, _sim_services.RealtimeSync_actual_run_ratio_set)

    def __init__(self, in_clock, in_timer=None):
        _sim_services.RealtimeSync_swiginit(self, _sim_services.new_RealtimeSync(in_clock, in_timer))
    __swig_destroy__ = _sim_services.delete_RealtimeSync

    def enable(self):
        return _sim_services.RealtimeSync_enable(self)

    def disable(self):
        return _sim_services.RealtimeSync_disable(self)

    def change_clock(self, in_clock):
        return _sim_services.RealtimeSync_change_clock(self, in_clock)

    def clock_get_name(self):
        return _sim_services.RealtimeSync_clock_get_name(self)

    def change_timer(self, in_sleep_timer):
        return _sim_services.RealtimeSync_change_timer(self, in_sleep_timer)

    def set_rt_clock_ratio(self, in_clock_ratio):
        return _sim_services.RealtimeSync_set_rt_clock_ratio(self, in_clock_ratio)

    def get_sim_start_time(self):
        return _sim_services.RealtimeSync_get_sim_start_time(self)

    def get_sim_end_init_time(self):
        return _sim_services.RealtimeSync_get_sim_end_init_time(self)

    def get_sim_end_time(self):
        return _sim_services.RealtimeSync_get_sim_end_time(self)

    def initialize(self):
        return _sim_services.RealtimeSync_initialize(self)

    def restart(self, ref_time):
        return _sim_services.RealtimeSync_restart(self, ref_time)

    def start_realtime(self, in_frame_time, ref_time):
        return _sim_services.RealtimeSync_start_realtime(self, in_frame_time, ref_time)

    def rt_monitor(self, sim_time_tics):
        return _sim_services.RealtimeSync_rt_monitor(self, sim_time_tics)

    def freeze_init(self, in_freeze_frame):
        return _sim_services.RealtimeSync_freeze_init(self, in_freeze_frame)

    def freeze_pause(self, in_freeze_frame):
        return _sim_services.RealtimeSync_freeze_pause(self, in_freeze_frame)

    def unfreeze(self, sim_time_tics, software_frame):
        return _sim_services.RealtimeSync_unfreeze(self, sim_time_tics, software_frame)

    def shutdown(self):
        return _sim_services.RealtimeSync_shutdown(self)

    def start_sleep_timer(self):
        return _sim_services.RealtimeSync_start_sleep_timer(self)

    def is_active(self):
        return _sim_services.RealtimeSync_is_active(self)

# Register RealtimeSync in _sim_services:
_sim_services.RealtimeSync_swigregister(RealtimeSync)


def real_time_change_clock(in_clock):
    return _sim_services.real_time_change_clock(in_clock)

def real_time_change_timer(in_sleep_timer):
    return _sim_services.real_time_change_timer(in_sleep_timer)

def real_time_enable():
    return _sim_services.real_time_enable()

def real_time_disable():
    return _sim_services.real_time_disable()

def real_time_restart(ref_time):
    return _sim_services.real_time_restart(ref_time)

def is_real_time():
    return _sim_services.is_real_time()

def real_time_clock_get_name():
    return _sim_services.real_time_clock_get_name()

def real_time_set_rt_clock_ratio(in_clock_ratio):
    return _sim_services.real_time_set_rt_clock_ratio(in_clock_ratio)

def real_time_lock_memory(yes_no):
    return _sim_services.real_time_lock_memory(yes_no)

def exec_set_lock_memory(yes_no):
    return _sim_services.exec_set_lock_memory(yes_no)

def extract_bitfield_any(arg1, arg2, arg3, arg4):
    return _sim_services.extract_bitfield_any(arg1, arg2, arg3, arg4)

def extract_unsigned_bitfield_any(arg1, arg2, arg3, arg4):
    return _sim_services.extract_unsigned_bitfield_any(arg1, arg2, arg3, arg4)

def insert_bitfield_any(arg1, arg2, arg3, arg4, arg5):
    return _sim_services.insert_bitfield_any(arg1, arg2, arg3, arg4, arg5)

def addr_bitfield(A, B, field_count):
    return _sim_services.addr_bitfield(A, B, field_count)
class RtiEventBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_RtiEventBase

    def do_assignment(self):
        return _sim_services.RtiEventBase_do_assignment(self)

    def print_val(self):
        return _sim_services.RtiEventBase_print_val(self)

    def print_rti(self):
        return _sim_services.RtiEventBase_print_rti(self)

    def check_address(self):
        return _sim_services.RtiEventBase_check_address(self)
    ref = property(_sim_services.RtiEventBase_ref_get, _sim_services.RtiEventBase_ref_set)

# Register RtiEventBase in _sim_services:
_sim_services.RtiEventBase_swigregister(RtiEventBase)

class RtiList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def execute(self, debug):
        return _sim_services.RtiList_execute(self, debug)

    def print_list(self):
        return _sim_services.RtiList_print_list(self)
    event_list = property(_sim_services.RtiList_event_list_get, _sim_services.RtiList_event_list_set)

    def __init__(self):
        _sim_services.RtiList_swiginit(self, _sim_services.new_RtiList())
    __swig_destroy__ = _sim_services.delete_RtiList

# Register RtiList in _sim_services:
_sim_services.RtiList_swigregister(RtiList)

class RtiExec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RtiExec_swiginit(self, _sim_services.new_RtiExec())
    __swig_destroy__ = _sim_services.delete_RtiExec

    def AddToFireList(self, rti_list):
        return _sim_services.RtiExec_AddToFireList(self, rti_list)

    def Exec(self):
        return _sim_services.RtiExec_Exec(self)

    def SetDebug(self, on_off):
        return _sim_services.RtiExec_SetDebug(self, on_off)

    def SetFrameMultiple(self, mult):
        return _sim_services.RtiExec_SetFrameMultiple(self, mult)

    def SetFrameOffset(self, offset):
        return _sim_services.RtiExec_SetFrameOffset(self, offset)
    frame_multiple = property(_sim_services.RtiExec_frame_multiple_get, _sim_services.RtiExec_frame_multiple_set)
    frame_offset = property(_sim_services.RtiExec_frame_offset_get, _sim_services.RtiExec_frame_offset_set)

# Register RtiExec in _sim_services:
_sim_services.RtiExec_swigregister(RtiExec)

class RtiStager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.RtiStager_swiginit(self, _sim_services.new_RtiStager())
    __swig_destroy__ = _sim_services.delete_RtiStager

    def Add(self, *args):
        return _sim_services.RtiStager_Add(self, *args)

    def Fire(self, thread_id=0):
        return _sim_services.RtiStager_Fire(self, thread_id)

    def List(self):
        return _sim_services.RtiStager_List(self)

    def SetDebug(self, on_off):
        return _sim_services.RtiStager_SetDebug(self, on_off)

    def SetFrameMultiple(self, thread_id, mult):
        return _sim_services.RtiStager_SetFrameMultiple(self, thread_id, mult)

    def SetFrameOffset(self, thread_id, offset):
        return _sim_services.RtiStager_SetFrameOffset(self, thread_id, offset)

    def AddInjectorExecutor(self, arg2):
        return _sim_services.RtiStager_AddInjectorExecutor(self, arg2)

    def GetRtiExecutor(self, thread_id):
        return _sim_services.RtiStager_GetRtiExecutor(self, thread_id)

# Register RtiStager in _sim_services:
_sim_services.RtiStager_swigregister(RtiStager)

class ITimer(Timer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.ITimer_swiginit(self, _sim_services.new_ITimer())
    __swig_destroy__ = _sim_services.delete_ITimer

    def semaphore_post(self):
        return _sim_services.ITimer_semaphore_post(self)

    def init(self):
        return _sim_services.ITimer_init(self)

    def start(self, frame_time):
        return _sim_services.ITimer_start(self, frame_time)

    def reset(self, frame_time):
        return _sim_services.ITimer_reset(self, frame_time)

    def stop(self):
        return _sim_services.ITimer_stop(self)

    def pause(self):
        return _sim_services.ITimer_pause(self)

    def shutdown(self):
        return _sim_services.ITimer_shutdown(self)

# Register ITimer in _sim_services:
_sim_services.ITimer_swigregister(ITimer)


def get_itimer():
    return _sim_services.get_itimer()

def it_handler(sig):
    return _sim_services.it_handler(sig)
class UCFn(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C = property(_sim_services.UCFn_C_get, _sim_services.UCFn_C_set)
    t_name = property(_sim_services.UCFn_t_name_get, _sim_services.UCFn_t_name_set)
    f_name = property(_sim_services.UCFn_f_name_get, _sim_services.UCFn_f_name_set)

    def __init__(self, t_name, f_name, C1, C0):
        _sim_services.UCFn_swiginit(self, _sim_services.new_UCFn(t_name, f_name, C1, C0))

    def eval(self, val):
        return _sim_services.UCFn_eval(self, val)
    __swig_destroy__ = _sim_services.delete_UCFn

# Register UCFn in _sim_services:
_sim_services.UCFn_swigregister(UCFn)

class Unit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.Unit_swiginit(self, _sim_services.new_Unit(*args))
    __swig_destroy__ = _sim_services.delete_Unit

    def setUnitName(self, units_spec):
        return _sim_services.Unit_setUnitName(self, units_spec)

    def getUnitName(self):
        return _sim_services.Unit_getUnitName(self)

    def Conversion_to(self, *args):
        return _sim_services.Unit_Conversion_to(self, *args)

    def Convert_to(self, *args):
        return _sim_services.Unit_Convert_to(self, *args)

# Register Unit in _sim_services:
_sim_services.Unit_swigregister(Unit)

class TestCase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_sim_services.TestCase_name_get, _sim_services.TestCase_name_set)
    status = property(_sim_services.TestCase_status_get, _sim_services.TestCase_status_set)
    parent = property(_sim_services.TestCase_parent_get, _sim_services.TestCase_parent_set)
    elapsed_time = property(_sim_services.TestCase_elapsed_time_get, _sim_services.TestCase_elapsed_time_set)
    failure_string = property(_sim_services.TestCase_failure_string_get, _sim_services.TestCase_failure_string_set)

    def __init__(self, test_case_name, in_failure_string):
        _sim_services.TestCase_swiginit(self, _sim_services.new_TestCase(test_case_name, in_failure_string))
    __swig_destroy__ = _sim_services.delete_TestCase

# Register TestCase in _sim_services:
_sim_services.TestCase_swigregister(TestCase)

class TestSuite(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    num_failures = property(_sim_services.TestSuite_num_failures_get, _sim_services.TestSuite_num_failures_set)
    test_results = property(_sim_services.TestSuite_test_results_get, _sim_services.TestSuite_test_results_set)

    def __init__(self):
        _sim_services.TestSuite_swiginit(self, _sim_services.new_TestSuite())

    def add_test_results(self, *args):
        return _sim_services.TestSuite_add_test_results(self, *args)

    def add_test_requirements(self, test_case, par_num):
        return _sim_services.TestSuite_add_test_requirements(self, test_case, par_num)

    def delete_test_results(self):
        return _sim_services.TestSuite_delete_test_results(self)
    __swig_destroy__ = _sim_services.delete_TestSuite

# Register TestSuite in _sim_services:
_sim_services.TestSuite_swigregister(TestSuite)

class UnitTest(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enabled = property(_sim_services.UnitTest_enabled_get, _sim_services.UnitTest_enabled_set)
    exit_code_enabled = property(_sim_services.UnitTest_exit_code_enabled_get, _sim_services.UnitTest_exit_code_enabled_set)
    name = property(_sim_services.UnitTest_name_get, _sim_services.UnitTest_name_set)
    file_name = property(_sim_services.UnitTest_file_name_get, _sim_services.UnitTest_file_name_set)
    test_suites = property(_sim_services.UnitTest_test_suites_get, _sim_services.UnitTest_test_suites_set)

    def __init__(self):
        _sim_services.UnitTest_swiginit(self, _sim_services.new_UnitTest())
    __swig_destroy__ = _sim_services.delete_UnitTest

    def enable(self):
        return _sim_services.UnitTest_enable(self)

    def set_exit_code_enabled(self, in_enable):
        return _sim_services.UnitTest_set_exit_code_enabled(self, in_enable)

    def add_test_results(self, *args):
        return _sim_services.UnitTest_add_test_results(self, *args)

    def add_test_requirements(self, in_test_suite_name, in_test_case, par_num):
        return _sim_services.UnitTest_add_test_requirements(self, in_test_suite_name, in_test_case, par_num)

    def set_test_name(self, in_name):
        return _sim_services.UnitTest_set_test_name(self, in_name)

    def set_file_name(self, in_name):
        return _sim_services.UnitTest_set_file_name(self, in_name)

    def write_output(self):
        return _sim_services.UnitTest_write_output(self)

# Register UnitTest in _sim_services:
_sim_services.UnitTest_swigregister(UnitTest)


def trick_test_enable():
    return _sim_services.trick_test_enable()

def trick_test_set_file_name(in_file_name):
    return _sim_services.trick_test_set_file_name(in_file_name)

def trick_test_set_test_name(in_test_name):
    return _sim_services.trick_test_set_test_name(in_test_name)

def trick_test_add_parent(in_test_suite_name, in_test_case, par_num):
    return _sim_services.trick_test_add_parent(in_test_suite_name, in_test_case, par_num)

def add_test_result(in_test_suite_name, in_test_case, in_failure_string):
    return _sim_services.add_test_result(in_test_suite_name, in_test_case, in_failure_string)

def call_write_output():
    return _sim_services.call_write_output()
VS_COPY_ASYNC = _sim_services.VS_COPY_ASYNC
VS_COPY_SCHEDULED = _sim_services.VS_COPY_SCHEDULED
VS_COPY_TOP_OF_FRAME = _sim_services.VS_COPY_TOP_OF_FRAME
VS_WRITE_ASYNC = _sim_services.VS_WRITE_ASYNC
VS_WRITE_WHEN_COPIED = _sim_services.VS_WRITE_WHEN_COPIED
MAX_ARRAY_LENGTH = _sim_services.MAX_ARRAY_LENGTH
class VariableReference(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.VariableReference_swiginit(self, _sim_services.new_VariableReference(*args))
    __swig_destroy__ = _sim_services.delete_VariableReference

    def getName(self):
        return _sim_services.VariableReference_getName(self)

    def getType(self):
        return _sim_services.VariableReference_getType(self)

    def getBaseUnits(self):
        return _sim_services.VariableReference_getBaseUnits(self)

    def setRequestedUnits(self, new_units):
        return _sim_services.VariableReference_setRequestedUnits(self, new_units)

    def stageValue(self, validate_address=False):
        return _sim_services.VariableReference_stageValue(self, validate_address)

    def prepareForWrite(self):
        return _sim_services.VariableReference_prepareForWrite(self)

    def isStaged(self):
        return _sim_services.VariableReference_isStaged(self)

    def isWriteReady(self):
        return _sim_services.VariableReference_isWriteReady(self)

    def getSizeAscii(self):
        return _sim_services.VariableReference_getSizeAscii(self)

    def getSizeBinary(self):
        return _sim_services.VariableReference_getSizeBinary(self)

    def writeValueAscii(self, out):
        return _sim_services.VariableReference_writeValueAscii(self, out)

    def writeValueBinary(self, out, byteswap=False):
        return _sim_services.VariableReference_writeValueBinary(self, out, byteswap)

    def writeNameBinary(self, out, byteswap=False):
        return _sim_services.VariableReference_writeNameBinary(self, out, byteswap)

    def writeNameLengthBinary(self, out, byteswap=False):
        return _sim_services.VariableReference_writeNameLengthBinary(self, out, byteswap)

    def writeSizeBinary(self, out, byteswap=False):
        return _sim_services.VariableReference_writeSizeBinary(self, out, byteswap)

    def writeTypeBinary(self, out, byteswap=False):
        return _sim_services.VariableReference_writeTypeBinary(self, out, byteswap)

    def validate(self):
        return _sim_services.VariableReference_validate(self)

    def tagAsInvalid(self):
        return _sim_services.VariableReference_tagAsInvalid(self)

    @staticmethod
    def byteswap_var(out, _in, ref):
        return _sim_services.VariableReference_byteswap_var(out, _in, ref)

# Register VariableReference in _sim_services:
_sim_services.VariableReference_swigregister(VariableReference)

def VariableReference_byteswap_var(out, _in, ref):
    return _sim_services.VariableReference_byteswap_var(out, _in, ref)

class ClientConnection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_ClientConnection
    MAX_CMD_LEN = _sim_services.ClientConnection_MAX_CMD_LEN
    TCP = _sim_services.ClientConnection_TCP
    UDP = _sim_services.ClientConnection_UDP
    MCAST = _sim_services.ClientConnection_MCAST
    WS = _sim_services.ClientConnection_WS

    def start(self):
        return _sim_services.ClientConnection_start(self)

    def write(self, *args):
        return _sim_services.ClientConnection_write(self, *args)

    def read(self, *args):
        return _sim_services.ClientConnection_read(self, *args)

    def setBlockMode(self, blocking):
        return _sim_services.ClientConnection_setBlockMode(self, blocking)

    def disconnect(self):
        return _sim_services.ClientConnection_disconnect(self)

    def isInitialized(self):
        return _sim_services.ClientConnection_isInitialized(self)

    def getClientTag(self):
        return _sim_services.ClientConnection_getClientTag(self)

    def setClientTag(self, tag):
        return _sim_services.ClientConnection_setClientTag(self, tag)

    def restart(self):
        return _sim_services.ClientConnection_restart(self)

    def getClientHostname(self):
        return _sim_services.ClientConnection_getClientHostname(self)

    def getClientPort(self):
        return _sim_services.ClientConnection_getClientPort(self)

# Register ClientConnection in _sim_services:
_sim_services.ClientConnection_swigregister(ClientConnection)

VS_IP_ERROR = _sim_services.VS_IP_ERROR
VS_VAR_LIST = _sim_services.VS_VAR_LIST
VS_VAR_EXISTS = _sim_services.VS_VAR_EXISTS
VS_SIE_RESOURCE = _sim_services.VS_SIE_RESOURCE
VS_LIST_SIZE = _sim_services.VS_LIST_SIZE
VS_STDIO = _sim_services.VS_STDIO
VS_SEND_ONCE = _sim_services.VS_SEND_ONCE
VS_MIN_CODE = _sim_services.VS_MIN_CODE
VS_MAX_CODE = _sim_services.VS_MAX_CODE
class VariableServerSession(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.VariableServerSession_swiginit(self, _sim_services.new_VariableServerSession())
    __swig_destroy__ = _sim_services.delete_VariableServerSession

    def set_connection(self, connection):
        return _sim_services.VariableServerSession_set_connection(self, connection)

    def handle_message(self):
        return _sim_services.VariableServerSession_handle_message(self)

    def get_pause(self):
        return _sim_services.VariableServerSession_get_pause(self)

    def set_pause(self, on_off):
        return _sim_services.VariableServerSession_set_pause(self, on_off)

    def get_exit_cmd(self):
        return _sim_services.VariableServerSession_get_exit_cmd(self)

    def set_exit_cmd(self):
        return _sim_services.VariableServerSession_set_exit_cmd(self)

    def get_send_stdio(self):
        return _sim_services.VariableServerSession_get_send_stdio(self)

    def set_send_stdio(self, on_off):
        return _sim_services.VariableServerSession_set_send_stdio(self, on_off)

    def copy_and_write_freeze(self, curr_frame):
        return _sim_services.VariableServerSession_copy_and_write_freeze(self, curr_frame)

    def copy_and_write_freeze_scheduled(self, curr_tics):
        return _sim_services.VariableServerSession_copy_and_write_freeze_scheduled(self, curr_tics)

    def copy_and_write_scheduled(self, curr_tics):
        return _sim_services.VariableServerSession_copy_and_write_scheduled(self, curr_tics)

    def copy_and_write_top(self, curr_frame):
        return _sim_services.VariableServerSession_copy_and_write_top(self, curr_frame)

    def copy_and_write_async(self):
        return _sim_services.VariableServerSession_copy_and_write_async(self)

    def copy_sim_data(self, *args):
        return _sim_services.VariableServerSession_copy_sim_data(self, *args)

    def write_data(self, *args):
        return _sim_services.VariableServerSession_write_data(self, *args)

    def write_stdio(self, stream, text):
        return _sim_services.VariableServerSession_write_stdio(self, stream, text)

    def disconnect_references(self):
        return _sim_services.VariableServerSession_disconnect_references(self)

    def get_next_tics(self):
        return _sim_services.VariableServerSession_get_next_tics(self)

    def get_freeze_next_tics(self):
        return _sim_services.VariableServerSession_get_freeze_next_tics(self)

    def freeze_init(self):
        return _sim_services.VariableServerSession_freeze_init(self)

    def get_update_rate(self):
        return _sim_services.VariableServerSession_get_update_rate(self)

    def pause_copy(self):
        return _sim_services.VariableServerSession_pause_copy(self)

    def unpause_copy(self):
        return _sim_services.VariableServerSession_unpause_copy(self)

    def get_write_mode(self):
        return _sim_services.VariableServerSession_get_write_mode(self)

    def get_copy_mode(self):
        return _sim_services.VariableServerSession_get_copy_mode(self)

    def var_add(self, *args):
        return _sim_services.VariableServerSession_var_add(self, *args)

    def var_remove(self, in_name):
        return _sim_services.VariableServerSession_var_remove(self, in_name)

    def var_units(self, var_name, units_name):
        return _sim_services.VariableServerSession_var_units(self, var_name, units_name)

    def var_exists(self, in_name):
        return _sim_services.VariableServerSession_var_exists(self, in_name)

    def var_send_once(self, in_name_list, num_vars):
        return _sim_services.VariableServerSession_var_send_once(self, in_name_list, num_vars)

    def var_send(self):
        return _sim_services.VariableServerSession_var_send(self)

    def var_clear(self):
        return _sim_services.VariableServerSession_var_clear(self)

    def var_validate_address(self, on_off):
        return _sim_services.VariableServerSession_var_validate_address(self, on_off)

    def var_debug(self, level):
        return _sim_services.VariableServerSession_var_debug(self, level)

    def var_ascii(self):
        return _sim_services.VariableServerSession_var_ascii(self)

    def var_binary(self):
        return _sim_services.VariableServerSession_var_binary(self)

    def var_binary_nonames(self):
        return _sim_services.VariableServerSession_var_binary_nonames(self)

    def var_set_copy_mode(self, mode):
        return _sim_services.VariableServerSession_var_set_copy_mode(self, mode)

    def var_set_write_mode(self, mode):
        return _sim_services.VariableServerSession_var_set_write_mode(self, mode)

    def var_sync(self, on_off):
        return _sim_services.VariableServerSession_var_sync(self, on_off)

    def var_set_frame_multiple(self, mult):
        return _sim_services.VariableServerSession_var_set_frame_multiple(self, mult)

    def var_set_frame_offset(self, offset):
        return _sim_services.VariableServerSession_var_set_frame_offset(self, offset)

    def var_set_freeze_frame_multiple(self, mult):
        return _sim_services.VariableServerSession_var_set_freeze_frame_multiple(self, mult)

    def var_set_freeze_frame_offset(self, offset):
        return _sim_services.VariableServerSession_var_set_freeze_frame_offset(self, offset)

    def var_byteswap(self, on_off):
        return _sim_services.VariableServerSession_var_byteswap(self, on_off)

    def set_log(self, on_off):
        return _sim_services.VariableServerSession_set_log(self, on_off)

    def set_session_log(self, on_off):
        return _sim_services.VariableServerSession_set_session_log(self, on_off)

    def set_info_message(self, on):
        return _sim_services.VariableServerSession_set_info_message(self, on)

    def send_list_size(self):
        return _sim_services.VariableServerSession_send_list_size(self)

    def send_sie_resource(self):
        return _sim_services.VariableServerSession_send_sie_resource(self)

    def send_sie_class(self):
        return _sim_services.VariableServerSession_send_sie_class(self)

    def send_sie_enum(self):
        return _sim_services.VariableServerSession_send_sie_enum(self)

    def send_sie_top_level_objects(self):
        return _sim_services.VariableServerSession_send_sie_top_level_objects(self)

    def send_file(self, file_name):
        return _sim_services.VariableServerSession_send_file(self, file_name)

    def var_cycle(self, in_cycle):
        return _sim_services.VariableServerSession_var_cycle(self, in_cycle)

    def var_exit(self):
        return _sim_services.VariableServerSession_var_exit(self)

# Register VariableServerSession in _sim_services:
_sim_services.VariableServerSession_swigregister(VariableServerSession)

class SystemInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def socket(self, domain, type, protocol):
        return _sim_services.SystemInterface_socket(self, domain, type, protocol)

    def setsockopt(self, socket, level, option_name, option_value, option_len):
        return _sim_services.SystemInterface_setsockopt(self, socket, level, option_name, option_value, option_len)

    def bind(self, socket, address, address_len):
        return _sim_services.SystemInterface_bind(self, socket, address, address_len)

    def getsockname(self, socket, address, address_len):
        return _sim_services.SystemInterface_getsockname(self, socket, address, address_len)

    def listen(self, socket, backlog):
        return _sim_services.SystemInterface_listen(self, socket, backlog)

    def select(self, nfds, readfds, writefds, errorfds, timeout):
        return _sim_services.SystemInterface_select(self, nfds, readfds, writefds, errorfds, timeout)

    def close(self, fildes):
        return _sim_services.SystemInterface_close(self, fildes)

    def getaddrinfo(self, hostname, servname, hints, res):
        return _sim_services.SystemInterface_getaddrinfo(self, hostname, servname, hints, res)

    def fcntl(self, fildes, cmd, arg):
        return _sim_services.SystemInterface_fcntl(self, fildes, cmd, arg)

    def shutdown(self, socket, how):
        return _sim_services.SystemInterface_shutdown(self, socket, how)

    def accept(self, socket, address, address_len):
        return _sim_services.SystemInterface_accept(self, socket, address, address_len)

    def send(self, socket, buffer, length, flags):
        return _sim_services.SystemInterface_send(self, socket, buffer, length, flags)

    def sendto(self, socket, buffer, length, flags, dest_addr, dest_len):
        return _sim_services.SystemInterface_sendto(self, socket, buffer, length, flags, dest_addr, dest_len)

    def recv(self, socket, buffer, length, flags):
        return _sim_services.SystemInterface_recv(self, socket, buffer, length, flags)

    def recvfrom(self, socket, buffer, length, flags, address, address_len):
        return _sim_services.SystemInterface_recvfrom(self, socket, buffer, length, flags, address, address_len)

    def inet_addr(self, cp):
        return _sim_services.SystemInterface_inet_addr(self, cp)

    def __init__(self):
        _sim_services.SystemInterface_swiginit(self, _sim_services.new_SystemInterface())
    __swig_destroy__ = _sim_services.delete_SystemInterface

# Register SystemInterface in _sim_services:
_sim_services.SystemInterface_swigregister(SystemInterface)

class TCPConnection(ClientConnection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.TCPConnection_swiginit(self, _sim_services.new_TCPConnection(*args))

    def start(self):
        return _sim_services.TCPConnection_start(self)

    def write(self, *args):
        return _sim_services.TCPConnection_write(self, *args)

    def read(self, *args):
        return _sim_services.TCPConnection_read(self, *args)

    def disconnect(self):
        return _sim_services.TCPConnection_disconnect(self)

    def isInitialized(self):
        return _sim_services.TCPConnection_isInitialized(self)

    def setBlockMode(self, blocking):
        return _sim_services.TCPConnection_setBlockMode(self, blocking)

    def restart(self):
        return _sim_services.TCPConnection_restart(self)

    def getClientTag(self):
        return _sim_services.TCPConnection_getClientTag(self)

    def setClientTag(self, tag):
        return _sim_services.TCPConnection_setClientTag(self, tag)

    def getClientHostname(self):
        return _sim_services.TCPConnection_getClientHostname(self)

    def getClientPort(self):
        return _sim_services.TCPConnection_getClientPort(self)
    __swig_destroy__ = _sim_services.delete_TCPConnection

# Register TCPConnection in _sim_services:
_sim_services.TCPConnection_swigregister(TCPConnection)

LISTENER_ERROR = _sim_services.LISTENER_ERROR
class TCPClientListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.TCPClientListener_swiginit(self, _sim_services.new_TCPClientListener(*args))
    __swig_destroy__ = _sim_services.delete_TCPClientListener

    def initialize(self, *args):
        return _sim_services.TCPClientListener_initialize(self, *args)

    def setBlockMode(self, blocking):
        return _sim_services.TCPClientListener_setBlockMode(self, blocking)

    def checkForNewConnections(self):
        return _sim_services.TCPClientListener_checkForNewConnections(self)

    def setUpNewConnection(self):
        return _sim_services.TCPClientListener_setUpNewConnection(self)

    def disconnect(self):
        return _sim_services.TCPClientListener_disconnect(self)

    def checkSocket(self):
        return _sim_services.TCPClientListener_checkSocket(self)

    def validateSourceAddress(self, source_address):
        return _sim_services.TCPClientListener_validateSourceAddress(self, source_address)

    def isInitialized(self):
        return _sim_services.TCPClientListener_isInitialized(self)

    def restart(self):
        return _sim_services.TCPClientListener_restart(self)

    def getHostname(self):
        return _sim_services.TCPClientListener_getHostname(self)

    def getPort(self):
        return _sim_services.TCPClientListener_getPort(self)

# Register TCPClientListener in _sim_services:
_sim_services.TCPClientListener_swigregister(TCPClientListener)

CONNECTION_PENDING = _sim_services.CONNECTION_PENDING
CONNECTION_SUCCESS = _sim_services.CONNECTION_SUCCESS
CONNECTION_FAIL = _sim_services.CONNECTION_FAIL
class VariableServerSessionThread(SysThread):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.VariableServerSessionThread_swiginit(self, _sim_services.new_VariableServerSessionThread(*args))
    __swig_destroy__ = _sim_services.delete_VariableServerSessionThread

    @staticmethod
    def set_vs_ptr(in_vs):
        return _sim_services.VariableServerSessionThread_set_vs_ptr(in_vs)

    def set_client_tag(self, tag):
        return _sim_services.VariableServerSessionThread_set_client_tag(self, tag)

    def set_connection(self, in_connection):
        return _sim_services.VariableServerSessionThread_set_connection(self, in_connection)

    def wait_for_accept(self):
        return _sim_services.VariableServerSessionThread_wait_for_accept(self)

    def thread_body(self):
        return _sim_services.VariableServerSessionThread_thread_body(self)

    def get_vs(self):
        return _sim_services.VariableServerSessionThread_get_vs(self)

    def preload_checkpoint(self):
        return _sim_services.VariableServerSessionThread_preload_checkpoint(self)

    def restart(self):
        return _sim_services.VariableServerSessionThread_restart(self)

    def cleanup(self):
        return _sim_services.VariableServerSessionThread_cleanup(self)

# Register VariableServerSessionThread in _sim_services:
_sim_services.VariableServerSessionThread_swigregister(VariableServerSessionThread)

def VariableServerSessionThread_set_vs_ptr(in_vs):
    return _sim_services.VariableServerSessionThread_set_vs_ptr(in_vs)


def __lshift__(*args):
    return _sim_services.__lshift__(*args)
class UDPConnection(ClientConnection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.UDPConnection_swiginit(self, _sim_services.new_UDPConnection(*args))

    def start(self):
        return _sim_services.UDPConnection_start(self)

    def write(self, *args):
        return _sim_services.UDPConnection_write(self, *args)

    def read(self, *args):
        return _sim_services.UDPConnection_read(self, *args)

    def disconnect(self):
        return _sim_services.UDPConnection_disconnect(self)

    def isInitialized(self):
        return _sim_services.UDPConnection_isInitialized(self)

    def setBlockMode(self, block_mode):
        return _sim_services.UDPConnection_setBlockMode(self, block_mode)

    def restart(self):
        return _sim_services.UDPConnection_restart(self)

    def getClientTag(self):
        return _sim_services.UDPConnection_getClientTag(self)

    def setClientTag(self, tag):
        return _sim_services.UDPConnection_setClientTag(self, tag)

    def initialize(self, hostname, port):
        return _sim_services.UDPConnection_initialize(self, hostname, port)

    def getPort(self):
        return _sim_services.UDPConnection_getPort(self)

    def getHostname(self):
        return _sim_services.UDPConnection_getHostname(self)

    def getClientHostname(self):
        return _sim_services.UDPConnection_getClientHostname(self)

    def getClientPort(self):
        return _sim_services.UDPConnection_getClientPort(self)
    __swig_destroy__ = _sim_services.delete_UDPConnection

# Register UDPConnection in _sim_services:
_sim_services.UDPConnection_swigregister(UDPConnection)

class MulticastGroup(UDPConnection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.MulticastGroup_swiginit(self, _sim_services.new_MulticastGroup(*args))
    __swig_destroy__ = _sim_services.delete_MulticastGroup

    def initialize_with_receiving(self, local_addr, mcast_addr, port):
        return _sim_services.MulticastGroup_initialize_with_receiving(self, local_addr, mcast_addr, port)

    def initialize(self):
        return _sim_services.MulticastGroup_initialize(self)

    def broadcast(self, message):
        return _sim_services.MulticastGroup_broadcast(self, message)

    def addAddress(self, addr, port):
        return _sim_services.MulticastGroup_addAddress(self, addr, port)

    def write(self, *args):
        return _sim_services.MulticastGroup_write(self, *args)

    def read(self, *args):
        return _sim_services.MulticastGroup_read(self, *args)

    def disconnect(self):
        return _sim_services.MulticastGroup_disconnect(self)

    def isInitialized(self):
        return _sim_services.MulticastGroup_isInitialized(self)

    def restart(self):
        return _sim_services.MulticastGroup_restart(self)

    def getClientHostname(self):
        return _sim_services.MulticastGroup_getClientHostname(self)

    def getClientPort(self):
        return _sim_services.MulticastGroup_getClientPort(self)

# Register MulticastGroup in _sim_services:
_sim_services.MulticastGroup_swigregister(MulticastGroup)

class VariableServerListenThread(SysThread):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sim_services.VariableServerListenThread_swiginit(self, _sim_services.new_VariableServerListenThread(*args))
    __swig_destroy__ = _sim_services.delete_VariableServerListenThread

    def get_hostname(self):
        return _sim_services.VariableServerListenThread_get_hostname(self)

    def get_port(self):
        return _sim_services.VariableServerListenThread_get_port(self)

    def set_port(self, in_port):
        return _sim_services.VariableServerListenThread_set_port(self, in_port)

    def get_user_tag(self):
        return _sim_services.VariableServerListenThread_get_user_tag(self)

    def get_user_tag_ref(self):
        return _sim_services.VariableServerListenThread_get_user_tag_ref(self)

    def set_user_tag(self, in_tag):
        return _sim_services.VariableServerListenThread_set_user_tag(self, in_tag)

    def set_source_address(self, address):
        return _sim_services.VariableServerListenThread_set_source_address(self, address)

    def get_source_address(self):
        return _sim_services.VariableServerListenThread_get_source_address(self)

    def get_broadcast(self):
        return _sim_services.VariableServerListenThread_get_broadcast(self)

    def set_broadcast(self, in_broadcast):
        return _sim_services.VariableServerListenThread_set_broadcast(self, in_broadcast)

    def init_listen_device(self):
        return _sim_services.VariableServerListenThread_init_listen_device(self)

    def check_and_move_listen_device(self):
        return _sim_services.VariableServerListenThread_check_and_move_listen_device(self)

    def thread_body(self):
        return _sim_services.VariableServerListenThread_thread_body(self)

    def restart(self):
        return _sim_services.VariableServerListenThread_restart(self)

    def pause_listening(self):
        return _sim_services.VariableServerListenThread_pause_listening(self)

    def restart_listening(self):
        return _sim_services.VariableServerListenThread_restart_listening(self)

    def set_multicast_group(self, group):
        return _sim_services.VariableServerListenThread_set_multicast_group(self, group)

    def dump(self, *args):
        return _sim_services.VariableServerListenThread_dump(self, *args)

    def shutdownConnections(self):
        return _sim_services.VariableServerListenThread_shutdownConnections(self)

# Register VariableServerListenThread in _sim_services:
_sim_services.VariableServerListenThread_swigregister(VariableServerListenThread)

class VariableServer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sim_services.VariableServer_swiginit(self, _sim_services.new_VariableServer())
    __swig_destroy__ = _sim_services.delete_VariableServer

    def default_data(self):
        return _sim_services.VariableServer_default_data(self)

    def init(self):
        return _sim_services.VariableServer_init(self)

    def restart(self):
        return _sim_services.VariableServer_restart(self)

    def freeze_init(self):
        return _sim_services.VariableServer_freeze_init(self)

    def shutdownConnections(self):
        return _sim_services.VariableServer_shutdownConnections(self)

    def shutdown(self):
        return _sim_services.VariableServer_shutdown(self)

    def get_next_sync_call_time(self):
        return _sim_services.VariableServer_get_next_sync_call_time(self)

    def get_next_freeze_call_time(self):
        return _sim_services.VariableServer_get_next_freeze_call_time(self)

    def copy_and_write_top(self):
        return _sim_services.VariableServer_copy_and_write_top(self)

    def copy_and_write_scheduled(self):
        return _sim_services.VariableServer_copy_and_write_scheduled(self)

    def copy_and_write_freeze_scheduled(self):
        return _sim_services.VariableServer_copy_and_write_freeze_scheduled(self)

    def copy_and_write_freeze(self):
        return _sim_services.VariableServer_copy_and_write_freeze(self)

    def add_vst(self, thread_id, in_vst):
        return _sim_services.VariableServer_add_vst(self, thread_id, in_vst)

    def add_session(self, thread_id, in_session):
        return _sim_services.VariableServer_add_session(self, thread_id, in_session)

    def get_vst(self, thread_id):
        return _sim_services.VariableServer_get_vst(self, thread_id)

    def get_session(self, thread_id):
        return _sim_services.VariableServer_get_session(self, thread_id)

    def delete_vst(self, thread_id):
        return _sim_services.VariableServer_delete_vst(self, thread_id)

    def delete_session(self, thread_id):
        return _sim_services.VariableServer_delete_session(self, thread_id)

    def get_hostname(self):
        return _sim_services.VariableServer_get_hostname(self)

    def get_listen_thread(self):
        return _sim_services.VariableServer_get_listen_thread(self)

    def set_enabled(self, on_off):
        return _sim_services.VariableServer_set_enabled(self, on_off)

    def get_enabled(self):
        return _sim_services.VariableServer_get_enabled(self)

    def get_info_msg(self):
        return _sim_services.VariableServer_get_info_msg(self)

    def get_log(self):
        return _sim_services.VariableServer_get_log(self)

    def get_session_log(self):
        return _sim_services.VariableServer_get_session_log(self)

    def set_var_server_info_msg_on(self):
        return _sim_services.VariableServer_set_var_server_info_msg_on(self)

    def set_var_server_info_msg_off(self):
        return _sim_services.VariableServer_set_var_server_info_msg_off(self)

    def set_var_server_log_on(self):
        return _sim_services.VariableServer_set_var_server_log_on(self)

    def set_var_server_log_off(self):
        return _sim_services.VariableServer_set_var_server_log_off(self)

    def set_var_server_session_log_on(self):
        return _sim_services.VariableServer_set_var_server_session_log_on(self)

    def set_var_server_session_log_off(self):
        return _sim_services.VariableServer_set_var_server_session_log_off(self)

    def create_tcp_socket(self, source_address, port):
        return _sim_services.VariableServer_create_tcp_socket(self, source_address, port)

    def create_udp_socket(self, source_address, port):
        return _sim_services.VariableServer_create_udp_socket(self, source_address, port)

    def create_multicast_socket(self, mcast_address, source_address, port):
        return _sim_services.VariableServer_create_multicast_socket(self, mcast_address, source_address, port)

    def suspendPreCheckpointReload(self):
        return _sim_services.VariableServer_suspendPreCheckpointReload(self)

    def resumePostCheckpointReload(self):
        return _sim_services.VariableServer_resumePostCheckpointReload(self)

    def set_copy_data_job(self, arg2):
        return _sim_services.VariableServer_set_copy_data_job(self, arg2)

    def set_copy_and_write_freeze_job(self, arg2):
        return _sim_services.VariableServer_set_copy_and_write_freeze_job(self, arg2)

# Register VariableServer in _sim_services:
_sim_services.VariableServer_swigregister(VariableServer)


def var_server_get_var_server():
    return _sim_services.var_server_get_var_server()

def var_add(*args):
    return _sim_services.var_add(*args)

def var_remove(in_name):
    return _sim_services.var_remove(in_name)

def var_units(var_name, units_name):
    return _sim_services.var_units(var_name, units_name)

def var_exists(in_name):
    return _sim_services.var_exists(in_name)

def var_send_once(*args):
    return _sim_services.var_send_once(*args)

def var_send():
    return _sim_services.var_send()

def var_clear():
    return _sim_services.var_clear()

def var_cycle(in_rate):
    return _sim_services.var_cycle(in_rate)

def var_pause():
    return _sim_services.var_pause()

def var_unpause():
    return _sim_services.var_unpause()

def var_exit():
    return _sim_services.var_exit()

def var_write_stdio(stream, text):
    return _sim_services.var_write_stdio(stream, text)

def var_set_client_tag(text):
    return _sim_services.var_set_client_tag(text)

def var_debug(level):
    return _sim_services.var_debug(level)

def var_ascii():
    return _sim_services.var_ascii()

def var_binary():
    return _sim_services.var_binary()

def var_binary_nonames():
    return _sim_services.var_binary_nonames()

def var_validate_address(on_off):
    return _sim_services.var_validate_address(on_off)

def var_set_copy_mode(mode):
    return _sim_services.var_set_copy_mode(mode)

def var_set_write_mode(mode):
    return _sim_services.var_set_write_mode(mode)

def var_set_send_stdio(mode):
    return _sim_services.var_set_send_stdio(mode)

def var_sync(mode):
    return _sim_services.var_sync(mode)

def var_set_frame_multiple(mult):
    return _sim_services.var_set_frame_multiple(mult)

def var_set_frame_offset(offset):
    return _sim_services.var_set_frame_offset(offset)

def var_set_freeze_frame_multiple(mult):
    return _sim_services.var_set_freeze_frame_multiple(mult)

def var_set_freeze_frame_offset(offset):
    return _sim_services.var_set_freeze_frame_offset(offset)

def var_byteswap(on_off):
    return _sim_services.var_byteswap(on_off)

def var_send_list_size():
    return _sim_services.var_send_list_size()

def send_sie_resource():
    return _sim_services.send_sie_resource()

def send_sie_class():
    return _sim_services.send_sie_class()

def send_sie_enum():
    return _sim_services.send_sie_enum()

def send_sie_top_level_objects():
    return _sim_services.send_sie_top_level_objects()

def send_file(file_name):
    return _sim_services.send_file(file_name)

def var_set(*args):
    return _sim_services.var_set(*args)

def var_server_log_on():
    return _sim_services.var_server_log_on()

def var_server_log_off():
    return _sim_services.var_server_log_off()

def var_server_list_connections():
    return _sim_services.var_server_list_connections()

def var_server_get_hostname():
    return _sim_services.var_server_get_hostname()

def var_server_get_port():
    return _sim_services.var_server_get_port()

def var_server_set_port(port):
    return _sim_services.var_server_set_port(port)

def var_server_set_source_address(address):
    return _sim_services.var_server_set_source_address(address)

def var_server_get_user_tag():
    return _sim_services.var_server_get_user_tag()

def var_server_set_user_tag(tag):
    return _sim_services.var_server_set_user_tag(tag)

def var_server_get_enabled():
    return _sim_services.var_server_get_enabled()

def var_server_set_enabled(on_off):
    return _sim_services.var_server_set_enabled(on_off)

def var_server_create_tcp_socket(address, port):
    return _sim_services.var_server_create_tcp_socket(address, port)

def var_server_create_udp_socket(address, port):
    return _sim_services.var_server_create_udp_socket(address, port)

def var_server_create_multicast_socket(mcast_address, address, port):
    return _sim_services.var_server_create_multicast_socket(mcast_address, address, port)

def vval_char(V):
    return _sim_services.vval_char(V)

def vval_short(V):
    return _sim_services.vval_short(V)

def vval_int(V):
    return _sim_services.vval_int(V)

def vval_long(V):
    return _sim_services.vval_long(V)

def vval_longlong(V):
    return _sim_services.vval_longlong(V)

def vval_float(V):
    return _sim_services.vval_float(V)

def vval_double(V):
    return _sim_services.vval_double(V)

def vval_string(V):
    return _sim_services.vval_string(V)

def vval_filep(V):
    return _sim_services.vval_filep(V)

def vval_voidp(V):
    return _sim_services.vval_voidp(V)

def delete_v_tree(v_tree):
    return _sim_services.delete_v_tree(v_tree)
Off = _sim_services.Off
On = _sim_services.On
No = _sim_services.No
Yes = _sim_services.Yes
Disconnect = _sim_services.Disconnect
Connect = _sim_services.Connect
Inactive = _sim_services.Inactive
Active = _sim_services.Active
Stop = _sim_services.Stop
Go = _sim_services.Go
Low = _sim_services.Low
High = _sim_services.High
Disable = _sim_services.Disable
Enable = _sim_services.Enable
TRUE = _sim_services.TRUE
FALSE = _sim_services.FALSE
Open = _sim_services.Open
Closed = _sim_services.Closed
OFF = _sim_services.OFF
ON = _sim_services.ON
NO = _sim_services.NO
YES = _sim_services.YES
INACTIVE = _sim_services.INACTIVE
ACTIVE = _sim_services.ACTIVE
BACKWARD = _sim_services.BACKWARD
FORWARD = _sim_services.FORWARD
BAD = _sim_services.BAD
GOOD = _sim_services.GOOD
class UdUnits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def get_u_system():
        return _sim_services.UdUnits_get_u_system()

    def read_default_xml(self):
        return _sim_services.UdUnits_read_default_xml(self)

    def read_user_xml(self, arg2):
        return _sim_services.UdUnits_read_user_xml(self, arg2)

    def __init__(self):
        _sim_services.UdUnits_swiginit(self, _sim_services.new_UdUnits())
    __swig_destroy__ = _sim_services.delete_UdUnits

# Register UdUnits in _sim_services:
_sim_services.UdUnits_swigregister(UdUnits)

def UdUnits_get_u_system():
    return _sim_services.UdUnits_get_u_system()

class IntegratorConstructorFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def create(type):
        return _sim_services.IntegratorConstructorFactory_create(type)

# Register IntegratorConstructorFactory in _sim_services:
_sim_services.IntegratorConstructorFactory_swigregister(IntegratorConstructorFactory)

def IntegratorConstructorFactory_create(type):
    return _sim_services.IntegratorConstructorFactory_create(type)

class IntegrableObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sim_services.delete_IntegrableObject

    def create_integrators(self, generator, controls, time_if):
        return _sim_services.IntegrableObject_create_integrators(self, generator, controls, time_if)

    def destroy_integrators(self):
        return _sim_services.IntegrableObject_destroy_integrators(self)

    def reset_integrators(self):
        return _sim_services.IntegrableObject_reset_integrators(self)

    def integrate(self, dyn_dt, target_stage):
        return _sim_services.IntegrableObject_integrate(self, dyn_dt, target_stage)

    def set_integration_group(self, integ_group_in):
        return _sim_services.IntegrableObject_set_integration_group(self, integ_group_in)

    def clear_integration_group(self):
        return _sim_services.IntegrableObject_clear_integration_group(self)

    def get_integration_group(self):
        return _sim_services.IntegrableObject_get_integration_group(self)

# Register IntegrableObject in _sim_services:
_sim_services.IntegrableObject_swigregister(IntegrableObject)


import os
import linecache
import re

curr_dir = os.getcwd()
exclude_dir = os.getcwd() + "/trick"

def traceit(frame, event, arg):
    if event == "line":
        lineno = frame.f_lineno
        filename = frame.f_code.co_filename
        if ( not filename.startswith(exclude_dir) and not filename.startswith("/usr") and not filename.startswith("/opt") and not filename.startswith("<") and not filename.startswith(".trick/") ):
            if (filename.endswith(".pyc") or
                filename.endswith(".pyo")):
                filename = filename[:-1]
            line = linecache.getline(filename, lineno)
            print (filename,":",lineno,": ",line.rstrip())
    return traceit



