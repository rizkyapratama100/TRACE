# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _m181f40f22510dfe97733d5bf05fda032
else:
    import _m181f40f22510dfe97733d5bf05fda032

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_SwigPyIterator

    def value(self):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_equal(self, x)

    def copy(self):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_copy(self)

    def next(self):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_next(self)

    def __next__(self):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___next__(self)

    def previous(self):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_previous(self)

    def advance(self, n):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

import sim_services
import m99523ff1a540d552c47712a194727d6b
import me72287aa13591e6a424dbbeb9127ca3c
class SimEnvironment(sim_services.Environment):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)


    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_SimEnvironment()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SimEnvironment", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SimEnvironment___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SimEnvironment___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_SimEnvironment

# Register SimEnvironment in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.SimEnvironment_swigregister(SimEnvironment)


def exec_collect_init(*args):
    return _m181f40f22510dfe97733d5bf05fda032.exec_collect_init(*args)
class SysSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    sched = property(_m181f40f22510dfe97733d5bf05fda032.SysSimObject_sched_get)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_SysSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SysSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SysSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SysSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SysSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SysSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_SysSimObject

# Register SysSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.SysSimObject_swigregister(SysSimObject)

class MonteCarloSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    mc = property(_m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject_mc_get, _m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject_mc_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_MonteCarloSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MonteCarloSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_MonteCarloSimObject

# Register MonteCarloSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.MonteCarloSimObject_swigregister(MonteCarloSimObject)

class MemoryManagerSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    mm = property(_m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject_mm_get, _m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject_mm_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_MemoryManagerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MemoryManagerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_MemoryManagerSimObject

# Register MemoryManagerSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.MemoryManagerSimObject_swigregister(MemoryManagerSimObject)

class CheckPointRestartSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    cpr = property(_m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject_cpr_get, _m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject_cpr_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_CheckPointRestartSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "CheckPointRestartSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_CheckPointRestartSimObject

# Register CheckPointRestartSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.CheckPointRestartSimObject_swigregister(CheckPointRestartSimObject)

class SieSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    sie = property(_m181f40f22510dfe97733d5bf05fda032.SieSimObject_sie_get, _m181f40f22510dfe97733d5bf05fda032.SieSimObject_sie_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_SieSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "SieSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SieSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SieSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SieSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.SieSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_SieSimObject

# Register SieSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.SieSimObject_swigregister(SieSimObject)

class CommandLineArgumentsSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    cmd_args = property(_m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject_cmd_args_get, _m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject_cmd_args_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_CommandLineArgumentsSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "CommandLineArgumentsSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_CommandLineArgumentsSimObject

# Register CommandLineArgumentsSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.CommandLineArgumentsSimObject_swigregister(CommandLineArgumentsSimObject)

class MessageSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    mpublisher = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mpublisher_get, _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mpublisher_set)
    mcout = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mcout_get, _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mcout_set)
    mtcout = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mtcout_get, _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mtcout_set)
    mfile = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mfile_get)
    mdevice = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mdevice_get, _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_mdevice_set)
    pfile = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_pfile_get)
    message_file_manager = property(_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_message_file_manager_get, _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_message_file_manager_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_MessageSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MessageSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_call_function_double(self, *args)

    def separate_thread_set_enabled(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MessageSimObject_separate_thread_set_enabled(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MessageSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MessageSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_MessageSimObject

# Register MessageSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.MessageSimObject_swigregister(MessageSimObject)

class JITSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    jit = property(_m181f40f22510dfe97733d5bf05fda032.JITSimObject_jit_get, _m181f40f22510dfe97733d5bf05fda032.JITSimObject_jit_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_JITSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "JITSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.JITSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.JITSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.JITSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.JITSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_JITSimObject

# Register JITSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.JITSimObject_swigregister(JITSimObject)

class InputProcessorSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    ip = property(_m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_ip_get, _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_ip_set)
    mtv = property(_m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_mtv_get, _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_mtv_set)
    units_map_ptr = property(_m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_units_map_ptr_get, _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_units_map_ptr_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_InputProcessorSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InputProcessorSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_InputProcessorSimObject

    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject___len__(self, *args)

# Register InputProcessorSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.InputProcessorSimObject_swigregister(InputProcessorSimObject)

class ThreadProcessEventSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    ep = property(_m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject_ep_get, _m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject_ep_set)

    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_ThreadProcessEventSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "ThreadProcessEventSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_ThreadProcessEventSimObject

# Register ThreadProcessEventSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.ThreadProcessEventSimObject_swigregister(ThreadProcessEventSimObject)

class EventManagerSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    em = property(_m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_em_get, _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_em_set)
    ep = property(_m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_ep_get, _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_ep_set)
    thread_process_event_so = property(_m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_thread_process_event_so_get, _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_thread_process_event_so_set)
    thread_process_event_so_names = property(_m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_thread_process_event_so_names_get, _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_thread_process_event_so_names_set)

    def create_thread_process_event(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_create_thread_process_event(self, *args)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_EventManagerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "EventManagerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_EventManagerSimObject

    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject___len__(self, *args)

# Register EventManagerSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.EventManagerSimObject_swigregister(EventManagerSimObject)

class VariableServerSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    vs = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_vs_get, _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_vs_set)
    sim_control_panel = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_sim_control_panel_get)
    trick_view = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_trick_view_get)
    malfunctions_trick_view = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_malfunctions_trick_view_get)
    stripchart = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_stripchart_get)
    monte_monitor = property(_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_monte_monitor_get)

    def monte_carlo_disable_all_apps(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_monte_carlo_disable_all_apps(self, *args)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_VariableServerSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "VariableServerSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_VariableServerSimObject

# Register VariableServerSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.VariableServerSimObject_swigregister(VariableServerSimObject)

class DataRecordDispatcherSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    drd = property(_m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject_drd_get)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_DataRecordDispatcherSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "DataRecordDispatcherSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_DataRecordDispatcherSimObject

# Register DataRecordDispatcherSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.DataRecordDispatcherSimObject_swigregister(DataRecordDispatcherSimObject)

class RTSyncSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    gtod_clock = property(_m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_gtod_clock_get, _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_gtod_clock_set)
    itimer = property(_m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_itimer_get, _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_itimer_set)
    rt_sync = property(_m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_rt_sync_get, _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_rt_sync_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_RTSyncSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "RTSyncSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_RTSyncSimObject

# Register RTSyncSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.RTSyncSimObject_swigregister(RTSyncSimObject)

class FrameLogSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    frame_log = property(_m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject_frame_log_get)

    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_FrameLogSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "FrameLogSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_FrameLogSimObject

# Register FrameLogSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.FrameLogSimObject_swigregister(FrameLogSimObject)

class MasterSlaveSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    master = property(_m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_master_get, _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_master_set)
    slave = property(_m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_slave_get, _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_slave_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_MasterSlaveSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "MasterSlaveSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_MasterSlaveSimObject

# Register MasterSlaveSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.MasterSlaveSimObject_swigregister(MasterSlaveSimObject)

class InstrumentationSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    echo_jobs = property(_m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_echo_jobs_get, _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_echo_jobs_set)
    debug_pause = property(_m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_debug_pause_get, _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_debug_pause_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_InstrumentationSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InstrumentationSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_InstrumentationSimObject

# Register InstrumentationSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.InstrumentationSimObject_swigregister(InstrumentationSimObject)

class InjectorExecSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    rtie = property(_m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject_rtie_get, _m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject_rtie_set)

    def __init__(self, *args, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_InjectorExecSimObject(*args)
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            this.own(0)
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InjectorExecSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_InjectorExecSimObject

# Register InjectorExecSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.InjectorExecSimObject_swigregister(InjectorExecSimObject)

class InjectorSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    rtis = property(_m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_rtis_get, _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_rtis_set)
    injector_executor_so = property(_m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_injector_executor_so_get, _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_injector_executor_so_set)
    injector_executor_so_names = property(_m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_injector_executor_so_names_get, _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_injector_executor_so_names_set)

    def create_injector_executors(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_create_injector_executors(self, *args)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_InjectorSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "InjectorSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_InjectorSimObject

    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.InjectorSimObject___len__(self, *args)

# Register InjectorSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.InjectorSimObject_swigregister(InjectorSimObject)

class ZeroconfSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    zc = property(_m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject_zc_get, _m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject_zc_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_ZeroconfSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "ZeroconfSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_ZeroconfSimObject

# Register ZeroconfSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.ZeroconfSimObject_swigregister(ZeroconfSimObject)

class UnitTestSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    unit_tests = property(_m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject_unit_tests_get, _m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject_unit_tests_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_UnitTestSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "UnitTestSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_UnitTestSimObject

# Register UnitTestSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.UnitTestSimObject_swigregister(UnitTestSimObject)

class UdUnitsSimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    udunits = property(_m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject_udunits_get, _m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject_udunits_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_UdUnitsSimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "UdUnitsSimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_UdUnitsSimObject

# Register UdUnitsSimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.UdUnitsSimObject_swigregister(UdUnitsSimObject)

class TRACESimObject(sim_services.SimObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __setattr__ = _swig_setattr_nondynamic_instance_variable(object.__setattr__)

    ball = property(_m181f40f22510dfe97733d5bf05fda032.TRACESimObject_ball_get, _m181f40f22510dfe97733d5bf05fda032.TRACESimObject_ball_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _m181f40f22510dfe97733d5bf05fda032.new_TRACESimObject()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "TRACESimObject", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW



    def call_function(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.TRACESimObject_call_function(self, *args)

    def call_function_double(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.TRACESimObject_call_function_double(self, *args)

    def __getitem__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.TRACESimObject___getitem__(self, *args)

    def __len__(self, *args):
        return _m181f40f22510dfe97733d5bf05fda032.TRACESimObject___len__(self, *args)
    __swig_destroy__ = _m181f40f22510dfe97733d5bf05fda032.delete_TRACESimObject

# Register TRACESimObject in _m181f40f22510dfe97733d5bf05fda032:
_m181f40f22510dfe97733d5bf05fda032.TRACESimObject_swigregister(TRACESimObject)


def castAsSimEnvironment(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsSimEnvironment(*args)

def castAsSysSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsSysSimObject(*args)

def castAsMonteCarloSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsMonteCarloSimObject(*args)

def castAsMemoryManagerSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsMemoryManagerSimObject(*args)

def castAsCheckPointRestartSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsCheckPointRestartSimObject(*args)

def castAsSieSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsSieSimObject(*args)

def castAsCommandLineArgumentsSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsCommandLineArgumentsSimObject(*args)

def castAsMessageSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsMessageSimObject(*args)

def castAsJITSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsJITSimObject(*args)

def castAsInputProcessorSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsInputProcessorSimObject(*args)

def castAsThreadProcessEventSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsThreadProcessEventSimObject(*args)

def castAsEventManagerSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsEventManagerSimObject(*args)

def castAsVariableServerSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsVariableServerSimObject(*args)

def castAsDataRecordDispatcherSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsDataRecordDispatcherSimObject(*args)

def castAsRTSyncSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsRTSyncSimObject(*args)

def castAsFrameLogSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsFrameLogSimObject(*args)

def castAsMasterSlaveSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsMasterSlaveSimObject(*args)

def castAsInstrumentationSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsInstrumentationSimObject(*args)

def castAsInjectorExecSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsInjectorExecSimObject(*args)

def castAsInjectorSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsInjectorSimObject(*args)

def castAsZeroconfSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsZeroconfSimObject(*args)

def castAsUnitTestSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsUnitTestSimObject(*args)

def castAsUdUnitsSimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsUdUnitsSimObject(*args)

def castAsTRACESimObject(*args):
    return _m181f40f22510dfe97733d5bf05fda032.castAsTRACESimObject(*args)


